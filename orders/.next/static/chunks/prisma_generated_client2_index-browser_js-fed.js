"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkorders"] = self["webpackChunkorders"] || []).push([["prisma_generated_client2_index-browser_js"],{

/***/ "../node_modules/@swc/helpers/lib/_assert_this_initialized.js":
/*!********************************************************************!*\
  !*** ../node_modules/@swc/helpers/lib/_assert_this_initialized.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = _assertThisInitialized;\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2Fzc2VydF90aGlzX2luaXRpYWxpemVkLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcmRlcnMvLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2Fzc2VydF90aGlzX2luaXRpYWxpemVkLmpzPzE0YzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkO1xuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gICAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@swc/helpers/lib/_assert_this_initialized.js\n"));

/***/ }),

/***/ "../node_modules/@swc/helpers/lib/_class_call_check.js":
/*!*************************************************************!*\
  !*** ../node_modules/@swc/helpers/lib/_class_call_check.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = _classCallCheck;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2NsYXNzX2NhbGxfY2hlY2suanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcmRlcnMvLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2NsYXNzX2NhbGxfY2hlY2suanM/OGZkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9jbGFzc0NhbGxDaGVjaztcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@swc/helpers/lib/_class_call_check.js\n"));

/***/ }),

/***/ "../node_modules/@swc/helpers/lib/_create_class.js":
/*!*********************************************************!*\
  !*** ../node_modules/@swc/helpers/lib/_create_class.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = _createClass;\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2NyZWF0ZV9jbGFzcy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGtCQUFrQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29yZGVycy8uLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fY3JlYXRlX2NsYXNzLmpzPzJiNGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfY3JlYXRlQ2xhc3M7XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspe1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@swc/helpers/lib/_create_class.js\n"));

/***/ }),

/***/ "../node_modules/@swc/helpers/lib/_create_super.js":
/*!*********************************************************!*\
  !*** ../node_modules/@swc/helpers/lib/_create_super.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = _createSuper;\nvar _isNativeReflectConstructMjs = _interopRequireDefault(__webpack_require__(/*! ./_is_native_reflect_construct.js */ \"../node_modules/@swc/helpers/lib/_is_native_reflect_construct.js\"));\nvar _getPrototypeOfMjs = _interopRequireDefault(__webpack_require__(/*! ./_get_prototype_of.js */ \"../node_modules/@swc/helpers/lib/_get_prototype_of.js\"));\nvar _possibleConstructorReturnMjs = _interopRequireDefault(__webpack_require__(/*! ./_possible_constructor_return.js */ \"../node_modules/@swc/helpers/lib/_possible_constructor_return.js\"));\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = (0, _isNativeReflectConstructMjs).default();\n    return function _createSuperInternal() {\n        var Super = (0, _getPrototypeOfMjs).default(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = (0, _getPrototypeOfMjs).default(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return (0, _possibleConstructorReturnMjs).default(this, result);\n    };\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2NyZWF0ZV9zdXBlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFlO0FBQ2YsMERBQTBELG1CQUFPLENBQUMsMkdBQW1DO0FBQ3JHLGdEQUFnRCxtQkFBTyxDQUFDLHFGQUF3QjtBQUNoRiwyREFBMkQsbUJBQU8sQ0FBQywyR0FBbUM7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcmRlcnMvLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2NyZWF0ZV9zdXBlci5qcz85YjhiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2NyZWF0ZVN1cGVyO1xudmFyIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3RNanMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL19pc19uYXRpdmVfcmVmbGVjdF9jb25zdHJ1Y3QuanNcIikpO1xudmFyIF9nZXRQcm90b3R5cGVPZk1qcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX2dldF9wcm90b3R5cGVfb2YuanNcIikpO1xudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuTWpzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9fcG9zc2libGVfY29uc3RydWN0b3JfcmV0dXJuLmpzXCIpKTtcbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7XG4gICAgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSAoMCwgX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdE1qcykuZGVmYXVsdCgpO1xuICAgIHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHtcbiAgICAgICAgdmFyIFN1cGVyID0gKDAsIF9nZXRQcm90b3R5cGVPZk1qcykuZGVmYXVsdChEZXJpdmVkKSwgcmVzdWx0O1xuICAgICAgICBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkge1xuICAgICAgICAgICAgdmFyIE5ld1RhcmdldCA9ICgwLCBfZ2V0UHJvdG90eXBlT2ZNanMpLmRlZmF1bHQodGhpcykuY29uc3RydWN0b3I7XG4gICAgICAgICAgICByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuTWpzKS5kZWZhdWx0KHRoaXMsIHJlc3VsdCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@swc/helpers/lib/_create_super.js\n"));

/***/ }),

/***/ "../node_modules/@swc/helpers/lib/_get_prototype_of.js":
/*!*************************************************************!*\
  !*** ../node_modules/@swc/helpers/lib/_get_prototype_of.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = _getPrototypeOf;\nfunction _getPrototypeOf(o) {\n    return getPrototypeOf(o);\n}\nfunction getPrototypeOf(o1) {\n    getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return getPrototypeOf(o1);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2dldF9wcm90b3R5cGVfb2YuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29yZGVycy8uLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fZ2V0X3Byb3RvdHlwZV9vZi5qcz8xNmIyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2dldFByb3RvdHlwZU9mO1xuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5mdW5jdGlvbiBnZXRQcm90b3R5cGVPZihvMSkge1xuICAgIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2Yobykge1xuICAgICAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICAgIH07XG4gICAgcmV0dXJuIGdldFByb3RvdHlwZU9mKG8xKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@swc/helpers/lib/_get_prototype_of.js\n"));

/***/ }),

/***/ "../node_modules/@swc/helpers/lib/_inherits.js":
/*!*****************************************************!*\
  !*** ../node_modules/@swc/helpers/lib/_inherits.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = _inherits;\nvar _setPrototypeOfMjs = _interopRequireDefault(__webpack_require__(/*! ./_set_prototype_of.js */ \"../node_modules/@swc/helpers/lib/_set_prototype_of.js\"));\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) (0, _setPrototypeOfMjs).default(subClass, superClass);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2luaGVyaXRzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixnREFBZ0QsbUJBQU8sQ0FBQyxxRkFBd0I7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcmRlcnMvLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2luaGVyaXRzLmpzP2QwMzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfaW5oZXJpdHM7XG52YXIgX3NldFByb3RvdHlwZU9mTWpzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9fc2V0X3Byb3RvdHlwZV9vZi5qc1wiKSk7XG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpICgwLCBfc2V0UHJvdG90eXBlT2ZNanMpLmRlZmF1bHQoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@swc/helpers/lib/_inherits.js\n"));

/***/ }),

/***/ "../node_modules/@swc/helpers/lib/_instanceof.js":
/*!*******************************************************!*\
  !*** ../node_modules/@swc/helpers/lib/_instanceof.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = _instanceof;\nfunction _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else {\n        return left instanceof right;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2luc3RhbmNlb2YuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcmRlcnMvLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2luc3RhbmNlb2YuanM/MDhhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9pbnN0YW5jZW9mO1xuZnVuY3Rpb24gX2luc3RhbmNlb2YobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAocmlnaHQgIT0gbnVsbCAmJiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIHJpZ2h0W1N5bWJvbC5oYXNJbnN0YW5jZV0pIHtcbiAgICAgICAgcmV0dXJuICEhcmlnaHRbU3ltYm9sLmhhc0luc3RhbmNlXShsZWZ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbGVmdCBpbnN0YW5jZW9mIHJpZ2h0O1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@swc/helpers/lib/_instanceof.js\n"));

/***/ }),

/***/ "../node_modules/@swc/helpers/lib/_is_native_reflect_construct.js":
/*!************************************************************************!*\
  !*** ../node_modules/@swc/helpers/lib/_is_native_reflect_construct.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = _isNativeReflectConstruct;\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2lzX25hdGl2ZV9yZWZsZWN0X2NvbnN0cnVjdC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1GQUFtRjtBQUNuRjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcmRlcnMvLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2lzX25hdGl2ZV9yZWZsZWN0X2NvbnN0cnVjdC5qcz9mMzhjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdDtcbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgICBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uKCkge30pKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@swc/helpers/lib/_is_native_reflect_construct.js\n"));

/***/ }),

/***/ "../node_modules/@swc/helpers/lib/_possible_constructor_return.js":
/*!************************************************************************!*\
  !*** ../node_modules/@swc/helpers/lib/_possible_constructor_return.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = _possibleConstructorReturn;\nvar _assertThisInitializedMjs = _interopRequireDefault(__webpack_require__(/*! ./_assert_this_initialized.js */ \"../node_modules/@swc/helpers/lib/_assert_this_initialized.js\"));\nvar _typeOfMjs = _interopRequireDefault(__webpack_require__(/*! ./_type_of.js */ \"../node_modules/@swc/helpers/lib/_type_of.js\"));\nfunction _possibleConstructorReturn(self, call) {\n    if (call && ((0, _typeOfMjs).default(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return (0, _assertThisInitializedMjs).default(self);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX3Bvc3NpYmxlX2NvbnN0cnVjdG9yX3JldHVybi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFlO0FBQ2YsdURBQXVELG1CQUFPLENBQUMsbUdBQStCO0FBQzlGLHdDQUF3QyxtQkFBTyxDQUFDLG1FQUFlO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcmRlcnMvLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX3Bvc3NpYmxlX2NvbnN0cnVjdG9yX3JldHVybi5qcz9mNDBkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm47XG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZE1qcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX2Fzc2VydF90aGlzX2luaXRpYWxpemVkLmpzXCIpKTtcbnZhciBfdHlwZU9mTWpzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9fdHlwZV9vZi5qc1wiKSk7XG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKGNhbGwgJiYgKCgwLCBfdHlwZU9mTWpzKS5kZWZhdWx0KGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgICAgIHJldHVybiBjYWxsO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRNanMpLmRlZmF1bHQoc2VsZik7XG59XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@swc/helpers/lib/_possible_constructor_return.js\n"));

/***/ }),

/***/ "../node_modules/@swc/helpers/lib/_set_prototype_of.js":
/*!*************************************************************!*\
  !*** ../node_modules/@swc/helpers/lib/_set_prototype_of.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = _setPrototypeOf;\nfunction _setPrototypeOf(o, p) {\n    return setPrototypeOf(o, p);\n}\nfunction setPrototypeOf(o1, p1) {\n    setPrototypeOf = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return setPrototypeOf(o1, p1);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX3NldF9wcm90b3R5cGVfb2YuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3JkZXJzLy4uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL19zZXRfcHJvdG90eXBlX29mLmpzP2Q1YmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfc2V0UHJvdG90eXBlT2Y7XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIHJldHVybiBzZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cbmZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKG8xLCBwMSkge1xuICAgIHNldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICAgICAgby5fX3Byb3RvX18gPSBwO1xuICAgICAgICByZXR1cm4gbztcbiAgICB9O1xuICAgIHJldHVybiBzZXRQcm90b3R5cGVPZihvMSwgcDEpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@swc/helpers/lib/_set_prototype_of.js\n"));

/***/ }),

/***/ "../node_modules/@swc/helpers/lib/_type_of.js":
/*!****************************************************!*\
  !*** ../node_modules/@swc/helpers/lib/_type_of.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = _typeof;\nfunction _typeof(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX3R5cGVfb2YuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcmRlcnMvLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX3R5cGVfb2YuanM/MmU5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF90eXBlb2Y7XG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgIFwiQHN3Yy9oZWxwZXJzIC0gdHlwZW9mXCI7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xufVxuO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@swc/helpers/lib/_type_of.js\n"));

/***/ }),

/***/ "./prisma/generated/client2/index-browser.js":
/*!***************************************************!*\
  !*** ./prisma/generated/client2/index-browser.js ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _swc_helpers_src_class_call_check_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/src/_class_call_check.mjs */ \"../node_modules/@swc/helpers/src/_class_call_check.mjs\");\n\nObject.defineProperty(__webpack_exports__, \"__esModule\", ({\n    value: true\n}));\nvar ref = __webpack_require__(/*! ./runtime/index-browser */ \"./prisma/generated/client2/runtime/index-browser.js\"), Decimal = ref.Decimal, objectEnumValues = ref.objectEnumValues, makeStrictEnum = ref.makeStrictEnum;\nvar Prisma = {};\nexports.Prisma = Prisma;\n/**\n * Prisma Client JS version: 4.3.1\n * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b\n */ Prisma.prismaVersion = {\n    client: \"4.3.1\",\n    engine: \"c875e43600dfe042452e0b868f7a48b817b9640b\"\n};\nPrisma.PrismaClientKnownRequestError = function() {\n    throw new Error(\"PrismaClientKnownRequestError is unable to be run in the browser.\\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\");\n};\nPrisma.PrismaClientUnknownRequestError = function() {\n    throw new Error(\"PrismaClientUnknownRequestError is unable to be run in the browser.\\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\");\n};\nPrisma.PrismaClientRustPanicError = function() {\n    throw new Error(\"PrismaClientRustPanicError is unable to be run in the browser.\\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\");\n};\nPrisma.PrismaClientInitializationError = function() {\n    throw new Error(\"PrismaClientInitializationError is unable to be run in the browser.\\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\");\n};\nPrisma.PrismaClientValidationError = function() {\n    throw new Error(\"PrismaClientValidationError is unable to be run in the browser.\\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\");\n};\nPrisma.NotFoundError = function() {\n    throw new Error(\"NotFoundError is unable to be run in the browser.\\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\");\n};\nPrisma.Decimal = Decimal;\n/**\n * Re-export of sql-template-tag\n */ Prisma.sql = function() {\n    throw new Error(\"sqltag is unable to be run in the browser.\\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\");\n};\nPrisma.empty = function() {\n    throw new Error(\"empty is unable to be run in the browser.\\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\");\n};\nPrisma.join = function() {\n    throw new Error(\"join is unable to be run in the browser.\\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\");\n};\nPrisma.raw = function() {\n    throw new Error(\"raw is unable to be run in the browser.\\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\");\n};\nPrisma.validator = function() {\n    return function(val) {\n        return val;\n    };\n};\n/**\n * Shorthand utilities for JSON filtering\n */ Prisma.DbNull = objectEnumValues.instances.DbNull;\nPrisma.JsonNull = objectEnumValues.instances.JsonNull;\nPrisma.AnyNull = objectEnumValues.instances.AnyNull;\nPrisma.NullTypes = {\n    DbNull: objectEnumValues.classes.DbNull,\n    JsonNull: objectEnumValues.classes.JsonNull,\n    AnyNull: objectEnumValues.classes.AnyNull\n};\n/**\n * Enums\n */ // Based on\n// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275\nfunction makeEnum(x) {\n    return x;\n}\nexports.Prisma.OrderScalarFieldEnum = makeEnum({\n    id: \"id\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\",\n    products: \"products\",\n    buyerId: \"buyerId\"\n});\nexports.Prisma.QueryMode = makeEnum({\n    default: \"default\",\n    insensitive: \"insensitive\"\n});\nexports.Prisma.SortOrder = makeEnum({\n    asc: \"asc\",\n    desc: \"desc\"\n});\nexports.Prisma.TransactionIsolationLevel = makeStrictEnum({\n    ReadUncommitted: \"ReadUncommitted\",\n    ReadCommitted: \"ReadCommitted\",\n    RepeatableRead: \"RepeatableRead\",\n    Serializable: \"Serializable\"\n});\nexports.Prisma.UserScalarFieldEnum = makeEnum({\n    id: \"id\",\n    username: \"username\",\n    title: \"title\",\n    name: \"name\",\n    surname: \"surname\"\n});\nexports.Prisma.ModelName = makeEnum({\n    User: \"User\",\n    Order: \"Order\"\n});\n/**\n * Create the Client\n */ var PrismaClient = function PrismaClient() {\n    \"use strict\";\n    (0,_swc_helpers_src_class_call_check_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, PrismaClient);\n    throw new Error(\"PrismaClient is unable to be run in the browser.\\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\");\n};\nexports.PrismaClient = PrismaClient;\nObject.assign(exports, Prisma);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./prisma/generated/client2/index-browser.js\n"));

/***/ }),

/***/ "./prisma/generated/client2/runtime/index-browser.js":
/*!***********************************************************!*\
  !*** ./prisma/generated/client2/runtime/index-browser.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar _class_call_check = (__webpack_require__(/*! @swc/helpers/lib/_class_call_check.js */ \"../node_modules/@swc/helpers/lib/_class_call_check.js\")[\"default\"]);\nvar _create_class = (__webpack_require__(/*! @swc/helpers/lib/_create_class.js */ \"../node_modules/@swc/helpers/lib/_create_class.js\")[\"default\"]);\nvar _inherits = (__webpack_require__(/*! @swc/helpers/lib/_inherits.js */ \"../node_modules/@swc/helpers/lib/_inherits.js\")[\"default\"]);\nvar _instanceof = (__webpack_require__(/*! @swc/helpers/lib/_instanceof.js */ \"../node_modules/@swc/helpers/lib/_instanceof.js\")[\"default\"]);\nvar _type_of = (__webpack_require__(/*! @swc/helpers/lib/_type_of.js */ \"../node_modules/@swc/helpers/lib/_type_of.js\")[\"default\"]);\nvar _create_super = (__webpack_require__(/*! @swc/helpers/lib/_create_super.js */ \"../node_modules/@swc/helpers/lib/_create_super.js\")[\"default\"]);\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = function(target, value) {\n    return __defProp(target, \"name\", {\n        value: value,\n        configurable: true\n    });\n};\nvar __export = function(target, all) {\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = function(to, from, except, desc) {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            var _loop = function(_iterator, _step) {\n                var key = _step.value;\n                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n                    get: function() {\n                        return from[key];\n                    },\n                    enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n                });\n            };\n            for(var _iterator = __getOwnPropNames(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    }\n    return to;\n};\nvar __toCommonJS = function(mod2) {\n    return __copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod2);\n};\n// src/runtime/index-browser.ts\nvar index_browser_exports = {};\n__export(index_browser_exports, {\n    Decimal: function() {\n        return decimal_default;\n    },\n    makeStrictEnum: function() {\n        return makeStrictEnum;\n    },\n    objectEnumValues: function() {\n        return objectEnumValues;\n    }\n});\nmodule.exports = __toCommonJS(index_browser_exports);\n// src/runtime/object-enums.ts\nvar secret = Symbol();\nvar representations = /* @__PURE__ */ new WeakMap();\nvar ObjectEnumValue = /*#__PURE__*/ function() {\n    function _class(arg) {\n        _class_call_check(this, _class);\n        if (arg === secret) {\n            representations.set(this, \"Prisma.\".concat(this._getName()));\n        } else {\n            representations.set(this, \"new Prisma.\".concat(this._getNamespace(), \".\").concat(this._getName(), \"()\"));\n        }\n    }\n    _create_class(_class, [\n        {\n            key: \"_getName\",\n            value: function _getName() {\n                return this.constructor.name;\n            }\n        },\n        {\n            key: \"toString\",\n            value: function toString() {\n                return representations.get(this);\n            }\n        }\n    ]);\n    return _class;\n}();\n__name(ObjectEnumValue, \"ObjectEnumValue\");\nvar NullTypesEnumValue = /*#__PURE__*/ function(ObjectEnumValue) {\n    _inherits(_class, ObjectEnumValue);\n    var _super = _create_super(_class);\n    function _class() {\n        _class_call_check(this, _class);\n        return _super.apply(this, arguments);\n    }\n    _create_class(_class, [\n        {\n            key: \"_getNamespace\",\n            value: function _getNamespace() {\n                return \"NullTypes\";\n            }\n        }\n    ]);\n    return _class;\n}(ObjectEnumValue);\n__name(NullTypesEnumValue, \"NullTypesEnumValue\");\nvar DbNull = /*#__PURE__*/ function(NullTypesEnumValue) {\n    _inherits(_class, NullTypesEnumValue);\n    var _super = _create_super(_class);\n    function _class() {\n        _class_call_check(this, _class);\n        return _super.apply(this, arguments);\n    }\n    return _class;\n}(NullTypesEnumValue);\n__name(DbNull, \"DbNull\");\nvar JsonNull = /*#__PURE__*/ function(NullTypesEnumValue) {\n    _inherits(_class, NullTypesEnumValue);\n    var _super = _create_super(_class);\n    function _class() {\n        _class_call_check(this, _class);\n        return _super.apply(this, arguments);\n    }\n    return _class;\n}(NullTypesEnumValue);\n__name(JsonNull, \"JsonNull\");\nvar AnyNull = /*#__PURE__*/ function(NullTypesEnumValue) {\n    _inherits(_class, NullTypesEnumValue);\n    var _super = _create_super(_class);\n    function _class() {\n        _class_call_check(this, _class);\n        return _super.apply(this, arguments);\n    }\n    return _class;\n}(NullTypesEnumValue);\n__name(AnyNull, \"AnyNull\");\nvar objectEnumValues = {\n    classes: {\n        DbNull: DbNull,\n        JsonNull: JsonNull,\n        AnyNull: AnyNull\n    },\n    instances: {\n        DbNull: new DbNull(secret),\n        JsonNull: new JsonNull(secret),\n        AnyNull: new AnyNull(secret)\n    }\n};\n// src/runtime/strictEnum.ts\nvar allowList = /* @__PURE__ */ new Set([\n    \"toJSON\",\n    \"asymmetricMatch\",\n    Symbol.iterator,\n    Symbol.toStringTag,\n    Symbol.isConcatSpreadable,\n    Symbol.toPrimitive\n]);\nfunction makeStrictEnum(definition) {\n    return new Proxy(definition, {\n        get: function get(target, property) {\n            if (property in target) {\n                return target[property];\n            }\n            if (allowList.has(property)) {\n                return void 0;\n            }\n            throw new TypeError(\"Invalid enum value: \".concat(String(property)));\n        }\n    });\n}\n__name(makeStrictEnum, \"makeStrictEnum\");\n// ../../node_modules/.pnpm/decimal.js@10.4.0/node_modules/decimal.js/decimal.mjs\nvar EXP_LIMIT = 9e15;\nvar MAX_DIGITS = 1e9;\nvar NUMERALS = \"0123456789abcdef\";\nvar LN10 = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\";\nvar PI = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\";\nvar DEFAULTS = {\n    precision: 20,\n    rounding: 4,\n    modulo: 1,\n    toExpNeg: -7,\n    toExpPos: 21,\n    minE: -EXP_LIMIT,\n    maxE: EXP_LIMIT,\n    crypto: false\n};\nvar inexact;\nvar quadrant;\nvar external = true;\nvar decimalError = \"[DecimalError] \";\nvar invalidArgument = decimalError + \"Invalid argument: \";\nvar precisionLimitExceeded = decimalError + \"Precision limit exceeded\";\nvar cryptoUnavailable = decimalError + \"crypto unavailable\";\nvar tag = \"[object Decimal]\";\nvar mathfloor = Math.floor;\nvar mathpow = Math.pow;\nvar isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i;\nvar isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i;\nvar isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i;\nvar isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\nvar BASE = 1e7;\nvar LOG_BASE = 7;\nvar MAX_SAFE_INTEGER = 9007199254740991;\nvar LN10_PRECISION = LN10.length - 1;\nvar PI_PRECISION = PI.length - 1;\nvar P = {\n    toStringTag: tag\n};\nP.absoluteValue = P.abs = function() {\n    var x = new this.constructor(this);\n    if (x.s < 0) x.s = 1;\n    return finalise(x);\n};\nP.ceil = function() {\n    return finalise(new this.constructor(this), this.e + 1, 2);\n};\nP.clampedTo = P.clamp = function(min2, max2) {\n    var k, x = this, Ctor = x.constructor;\n    min2 = new Ctor(min2);\n    max2 = new Ctor(max2);\n    if (!min2.s || !max2.s) return new Ctor(NaN);\n    if (min2.gt(max2)) throw Error(invalidArgument + max2);\n    k = x.cmp(min2);\n    return k < 0 ? min2 : x.cmp(max2) > 0 ? max2 : new Ctor(x);\n};\nP.comparedTo = P.cmp = function(y) {\n    var i, j, xdL, ydL, x = this, xd = x.d, yd = (y = new x.constructor(y)).d, xs = x.s, ys = y.s;\n    if (!xd || !yd) {\n        return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\n    }\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\n    if (xs !== ys) return xs;\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\n    xdL = xd.length;\n    ydL = yd.length;\n    for(i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i){\n        if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\n    }\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\n};\nP.cosine = P.cos = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (!x.d) return new Ctor(NaN);\n    if (!x.d[0]) return new Ctor(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\n};\nP.cubeRoot = P.cbrt = function() {\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx, x = this, Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    external = false;\n    s = x.s * mathpow(x.s * x, 1 / 3);\n    if (!s || Math.abs(s) == 1 / 0) {\n        n = digitsToString(x.d);\n        e = x.e;\n        if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? \"0\" : \"00\";\n        s = mathpow(n, 1 / 3);\n        e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\n        if (s == 1 / 0) {\n            n = \"5e\" + e;\n        } else {\n            n = s.toExponential();\n            n = n.slice(0, n.indexOf(\"e\") + 1) + e;\n        }\n        r = new Ctor(n);\n        r.s = x.s;\n    } else {\n        r = new Ctor(s.toString());\n    }\n    sd = (e = Ctor.precision) + 3;\n    for(;;){\n        t = r;\n        t3 = t.times(t).times(t);\n        t3plusx = t3.plus(x);\n        r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\n        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n            n = n.slice(sd - 3, sd + 1);\n            if (n == \"9999\" || !rep && n == \"4999\") {\n                if (!rep) {\n                    finalise(t, e + 1, 0);\n                    if (t.times(t).times(t).eq(x)) {\n                        r = t;\n                        break;\n                    }\n                }\n                sd += 4;\n                rep = 1;\n            } else {\n                if (!+n || !+n.slice(1) && n.charAt(0) == \"5\") {\n                    finalise(r, e + 1, 1);\n                    m = !r.times(r).times(r).eq(x);\n                }\n                break;\n            }\n        }\n    }\n    external = true;\n    return finalise(r, e, Ctor.rounding, m);\n};\nP.decimalPlaces = P.dp = function() {\n    var w, d = this.d, n = NaN;\n    if (d) {\n        w = d.length - 1;\n        n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\n        w = d[w];\n        if (w) for(; w % 10 == 0; w /= 10)n--;\n        if (n < 0) n = 0;\n    }\n    return n;\n};\nP.dividedBy = P.div = function(y) {\n    return divide(this, new this.constructor(y));\n};\nP.dividedToIntegerBy = P.divToInt = function(y) {\n    var x = this, Ctor = x.constructor;\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\n};\nP.equals = P.eq = function(y) {\n    return this.cmp(y) === 0;\n};\nP.floor = function() {\n    return finalise(new this.constructor(this), this.e + 1, 3);\n};\nP.greaterThan = P.gt = function(y) {\n    return this.cmp(y) > 0;\n};\nP.greaterThanOrEqualTo = P.gte = function(y) {\n    var k = this.cmp(y);\n    return k == 1 || k === 0;\n};\nP.hyperbolicCosine = P.cosh = function() {\n    var k, n, pr, rm, len, x = this, Ctor = x.constructor, one = new Ctor(1);\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\n    if (x.isZero()) return one;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n    if (len < 32) {\n        k = Math.ceil(len / 3);\n        n = (1 / tinyPow(4, k)).toString();\n    } else {\n        k = 16;\n        n = \"2.3283064365386962890625e-10\";\n    }\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\n    var cosh2_x, i = k, d8 = new Ctor(8);\n    for(; i--;){\n        cosh2_x = x.times(x);\n        x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\n    }\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\n};\nP.hyperbolicSine = P.sinh = function() {\n    var k, pr, rm, len, x = this, Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n    if (len < 3) {\n        x = taylorSeries(Ctor, 2, x, x, true);\n    } else {\n        k = 1.4 * Math.sqrt(len);\n        k = k > 16 ? 16 : k | 0;\n        x = x.times(1 / tinyPow(5, k));\n        x = taylorSeries(Ctor, 2, x, x, true);\n        var sinh2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);\n        for(; k--;){\n            sinh2_x = x.times(x);\n            x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\n        }\n    }\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(x, pr, rm, true);\n};\nP.hyperbolicTangent = P.tanh = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(x.s);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 7;\n    Ctor.rounding = 1;\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\n};\nP.inverseCosine = P.acos = function() {\n    var halfPi, x = this, Ctor = x.constructor, k = x.abs().cmp(1), pr = Ctor.precision, rm = Ctor.rounding;\n    if (k !== -1) {\n        return k === 0 ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) : new Ctor(NaN);\n    }\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n    x = x.asin();\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return halfPi.minus(x);\n};\nP.inverseHyperbolicCosine = P.acosh = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\n    if (!x.isFinite()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\n    Ctor.rounding = 1;\n    external = false;\n    x = x.times(x).minus(1).sqrt().plus(x);\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.ln();\n};\nP.inverseHyperbolicSine = P.asinh = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\n    Ctor.rounding = 1;\n    external = false;\n    x = x.times(x).plus(1).sqrt().plus(x);\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.ln();\n};\nP.inverseHyperbolicTangent = P.atanh = function() {\n    var pr, rm, wpr, xsd, x = this, Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    xsd = x.sd();\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\n    Ctor.precision = wpr = xsd - x.e;\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\n    Ctor.precision = pr + 4;\n    Ctor.rounding = 1;\n    x = x.ln();\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.times(0.5);\n};\nP.inverseSine = P.asin = function() {\n    var halfPi, k, pr, rm, x = this, Ctor = x.constructor;\n    if (x.isZero()) return new Ctor(x);\n    k = x.abs().cmp(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    if (k !== -1) {\n        if (k === 0) {\n            halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n            halfPi.s = x.s;\n            return halfPi;\n        }\n        return new Ctor(NaN);\n    }\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.times(2);\n};\nP.inverseTangent = P.atan = function() {\n    var i, j, k, n, px, t, r, wpr, x2, x = this, Ctor = x.constructor, pr = Ctor.precision, rm = Ctor.rounding;\n    if (!x.isFinite()) {\n        if (!x.s) return new Ctor(NaN);\n        if (pr + 4 <= PI_PRECISION) {\n            r = getPi(Ctor, pr + 4, rm).times(0.5);\n            r.s = x.s;\n            return r;\n        }\n    } else if (x.isZero()) {\n        return new Ctor(x);\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\n        r = getPi(Ctor, pr + 4, rm).times(0.25);\n        r.s = x.s;\n        return r;\n    }\n    Ctor.precision = wpr = pr + 10;\n    Ctor.rounding = 1;\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\n    for(i = k; i; --i)x = x.div(x.times(x).plus(1).sqrt().plus(1));\n    external = false;\n    j = Math.ceil(wpr / LOG_BASE);\n    n = 1;\n    x2 = x.times(x);\n    r = new Ctor(x);\n    px = x;\n    for(; i !== -1;){\n        px = px.times(x2);\n        t = r.minus(px.div(n += 2));\n        px = px.times(x2);\n        r = t.plus(px.div(n += 2));\n        if (r.d[j] !== void 0) for(i = j; r.d[i] === t.d[i] && i--;);\n    }\n    if (k) r = r.times(2 << k - 1);\n    external = true;\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\n};\nP.isFinite = function() {\n    return !!this.d;\n};\nP.isInteger = P.isInt = function() {\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\n};\nP.isNaN = function() {\n    return !this.s;\n};\nP.isNegative = P.isNeg = function() {\n    return this.s < 0;\n};\nP.isPositive = P.isPos = function() {\n    return this.s > 0;\n};\nP.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\nP.lessThan = P.lt = function(y) {\n    return this.cmp(y) < 0;\n};\nP.lessThanOrEqualTo = P.lte = function(y) {\n    return this.cmp(y) < 1;\n};\nP.logarithm = P.log = function(base) {\n    var isBase10, d, denominator, k, inf, num, sd, r, arg = this, Ctor = arg.constructor, pr = Ctor.precision, rm = Ctor.rounding, guard = 5;\n    if (base == null) {\n        base = new Ctor(10);\n        isBase10 = true;\n    } else {\n        base = new Ctor(base);\n        d = base.d;\n        if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\n        isBase10 = base.eq(10);\n    }\n    d = arg.d;\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\n        return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\n    }\n    if (isBase10) {\n        if (d.length > 1) {\n            inf = true;\n        } else {\n            for(k = d[0]; k % 10 === 0;)k /= 10;\n            inf = k !== 1;\n        }\n    }\n    external = false;\n    sd = pr + guard;\n    num = naturalLogarithm(arg, sd);\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n    r = divide(num, denominator, sd, 1);\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\n        do {\n            sd += 10;\n            num = naturalLogarithm(arg, sd);\n            denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n            r = divide(num, denominator, sd, 1);\n            if (!inf) {\n                if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\n                    r = finalise(r, pr + 1, 0);\n                }\n                break;\n            }\n        }while (checkRoundingDigits(r.d, k += 10, rm));\n    }\n    external = true;\n    return finalise(r, pr, rm);\n};\nP.minus = P.sub = function(y) {\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd, x = this, Ctor = x.constructor;\n    y = new Ctor(y);\n    if (!x.d || !y.d) {\n        if (!x.s || !y.s) y = new Ctor(NaN);\n        else if (x.d) y.s = -y.s;\n        else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\n        return y;\n    }\n    if (x.s != y.s) {\n        y.s = -y.s;\n        return x.plus(y);\n    }\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    if (!xd[0] || !yd[0]) {\n        if (yd[0]) y.s = -y.s;\n        else if (xd[0]) y = new Ctor(x);\n        else return new Ctor(rm === 3 ? -0 : 0);\n        return external ? finalise(y, pr, rm) : y;\n    }\n    e = mathfloor(y.e / LOG_BASE);\n    xe = mathfloor(x.e / LOG_BASE);\n    xd = xd.slice();\n    k = xe - e;\n    if (k) {\n        xLTy = k < 0;\n        if (xLTy) {\n            d = xd;\n            k = -k;\n            len = yd.length;\n        } else {\n            d = yd;\n            e = xe;\n            len = xd.length;\n        }\n        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n        if (k > i) {\n            k = i;\n            d.length = 1;\n        }\n        d.reverse();\n        for(i = k; i--;)d.push(0);\n        d.reverse();\n    } else {\n        i = xd.length;\n        len = yd.length;\n        xLTy = i < len;\n        if (xLTy) len = i;\n        for(i = 0; i < len; i++){\n            if (xd[i] != yd[i]) {\n                xLTy = xd[i] < yd[i];\n                break;\n            }\n        }\n        k = 0;\n    }\n    if (xLTy) {\n        d = xd;\n        xd = yd;\n        yd = d;\n        y.s = -y.s;\n    }\n    len = xd.length;\n    for(i = yd.length - len; i > 0; --i)xd[len++] = 0;\n    for(i = yd.length; i > k;){\n        if (xd[--i] < yd[i]) {\n            for(j = i; j && xd[--j] === 0;)xd[j] = BASE - 1;\n            --xd[j];\n            xd[i] += BASE;\n        }\n        xd[i] -= yd[i];\n    }\n    for(; xd[--len] === 0;)xd.pop();\n    for(; xd[0] === 0; xd.shift())--e;\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n    return external ? finalise(y, pr, rm) : y;\n};\nP.modulo = P.mod = function(y) {\n    var q, x = this, Ctor = x.constructor;\n    y = new Ctor(y);\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\n    if (!y.d || x.d && !x.d[0]) {\n        return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\n    }\n    external = false;\n    if (Ctor.modulo == 9) {\n        q = divide(x, y.abs(), 0, 3, 1);\n        q.s *= y.s;\n    } else {\n        q = divide(x, y, 0, Ctor.modulo, 1);\n    }\n    q = q.times(y);\n    external = true;\n    return x.minus(q);\n};\nP.naturalExponential = P.exp = function() {\n    return naturalExponential(this);\n};\nP.naturalLogarithm = P.ln = function() {\n    return naturalLogarithm(this);\n};\nP.negated = P.neg = function() {\n    var x = new this.constructor(this);\n    x.s = -x.s;\n    return finalise(x);\n};\nP.plus = P.add = function(y) {\n    var carry, d, e, i, k, len, pr, rm, xd, yd, x = this, Ctor = x.constructor;\n    y = new Ctor(y);\n    if (!x.d || !y.d) {\n        if (!x.s || !y.s) y = new Ctor(NaN);\n        else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\n        return y;\n    }\n    if (x.s != y.s) {\n        y.s = -y.s;\n        return x.minus(y);\n    }\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    if (!xd[0] || !yd[0]) {\n        if (!yd[0]) y = new Ctor(x);\n        return external ? finalise(y, pr, rm) : y;\n    }\n    k = mathfloor(x.e / LOG_BASE);\n    e = mathfloor(y.e / LOG_BASE);\n    xd = xd.slice();\n    i = k - e;\n    if (i) {\n        if (i < 0) {\n            d = xd;\n            i = -i;\n            len = yd.length;\n        } else {\n            d = yd;\n            e = k;\n            len = xd.length;\n        }\n        k = Math.ceil(pr / LOG_BASE);\n        len = k > len ? k + 1 : len + 1;\n        if (i > len) {\n            i = len;\n            d.length = 1;\n        }\n        d.reverse();\n        for(; i--;)d.push(0);\n        d.reverse();\n    }\n    len = xd.length;\n    i = yd.length;\n    if (len - i < 0) {\n        i = len;\n        d = yd;\n        yd = xd;\n        xd = d;\n    }\n    for(carry = 0; i;){\n        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n        xd[i] %= BASE;\n    }\n    if (carry) {\n        xd.unshift(carry);\n        ++e;\n    }\n    for(len = xd.length; xd[--len] == 0;)xd.pop();\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n    return external ? finalise(y, pr, rm) : y;\n};\nP.precision = P.sd = function(z) {\n    var k, x = this;\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\n    if (x.d) {\n        k = getPrecision(x.d);\n        if (z && x.e + 1 > k) k = x.e + 1;\n    } else {\n        k = NaN;\n    }\n    return k;\n};\nP.round = function() {\n    var x = this, Ctor = x.constructor;\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\n};\nP.sine = P.sin = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\n};\nP.squareRoot = P.sqrt = function() {\n    var m, n, sd, r, rep, t, x = this, d = x.d, e = x.e, s = x.s, Ctor = x.constructor;\n    if (s !== 1 || !d || !d[0]) {\n        return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\n    }\n    external = false;\n    s = Math.sqrt(+x);\n    if (s == 0 || s == 1 / 0) {\n        n = digitsToString(d);\n        if ((n.length + e) % 2 == 0) n += \"0\";\n        s = Math.sqrt(n);\n        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n        if (s == 1 / 0) {\n            n = \"5e\" + e;\n        } else {\n            n = s.toExponential();\n            n = n.slice(0, n.indexOf(\"e\") + 1) + e;\n        }\n        r = new Ctor(n);\n    } else {\n        r = new Ctor(s.toString());\n    }\n    sd = (e = Ctor.precision) + 3;\n    for(;;){\n        t = r;\n        r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\n        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n            n = n.slice(sd - 3, sd + 1);\n            if (n == \"9999\" || !rep && n == \"4999\") {\n                if (!rep) {\n                    finalise(t, e + 1, 0);\n                    if (t.times(t).eq(x)) {\n                        r = t;\n                        break;\n                    }\n                }\n                sd += 4;\n                rep = 1;\n            } else {\n                if (!+n || !+n.slice(1) && n.charAt(0) == \"5\") {\n                    finalise(r, e + 1, 1);\n                    m = !r.times(r).eq(x);\n                }\n                break;\n            }\n        }\n    }\n    external = true;\n    return finalise(r, e, Ctor.rounding, m);\n};\nP.tangent = P.tan = function() {\n    var pr, rm, x = this, Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 10;\n    Ctor.rounding = 1;\n    x = x.sin();\n    x.s = 1;\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\n};\nP.times = P.mul = function(y) {\n    var carry, e, i, k, r, rL, t, xdL, ydL, x = this, Ctor = x.constructor, xd = x.d, yd = (y = new Ctor(y)).d;\n    y.s *= x.s;\n    if (!xd || !xd[0] || !yd || !yd[0]) {\n        return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd ? NaN : !xd || !yd ? y.s / 0 : y.s * 0);\n    }\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\n    xdL = xd.length;\n    ydL = yd.length;\n    if (xdL < ydL) {\n        r = xd;\n        xd = yd;\n        yd = r;\n        rL = xdL;\n        xdL = ydL;\n        ydL = rL;\n    }\n    r = [];\n    rL = xdL + ydL;\n    for(i = rL; i--;)r.push(0);\n    for(i = ydL; --i >= 0;){\n        carry = 0;\n        for(k = xdL + i; k > i;){\n            t = r[k] + yd[i] * xd[k - i - 1] + carry;\n            r[k--] = t % BASE | 0;\n            carry = t / BASE | 0;\n        }\n        r[k] = (r[k] + carry) % BASE | 0;\n    }\n    for(; !r[--rL];)r.pop();\n    if (carry) ++e;\n    else r.shift();\n    y.d = r;\n    y.e = getBase10Exponent(r, e);\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\n};\nP.toBinary = function(sd, rm) {\n    return toStringBinary(this, 2, sd, rm);\n};\nP.toDecimalPlaces = P.toDP = function(dp, rm) {\n    var x = this, Ctor = x.constructor;\n    x = new Ctor(x);\n    if (dp === void 0) return x;\n    checkInt32(dp, 0, MAX_DIGITS);\n    if (rm === void 0) rm = Ctor.rounding;\n    else checkInt32(rm, 0, 8);\n    return finalise(x, dp + x.e + 1, rm);\n};\nP.toExponential = function(dp, rm) {\n    var str, x = this, Ctor = x.constructor;\n    if (dp === void 0) {\n        str = finiteToString(x, true);\n    } else {\n        checkInt32(dp, 0, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n        x = finalise(new Ctor(x), dp + 1, rm);\n        str = finiteToString(x, true, dp + 1);\n    }\n    return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n};\nP.toFixed = function(dp, rm) {\n    var str, y, x = this, Ctor = x.constructor;\n    if (dp === void 0) {\n        str = finiteToString(x);\n    } else {\n        checkInt32(dp, 0, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n        y = finalise(new Ctor(x), dp + x.e + 1, rm);\n        str = finiteToString(y, false, dp + y.e + 1);\n    }\n    return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n};\nP.toFraction = function(maxD) {\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r, x = this, xd = x.d, Ctor = x.constructor;\n    if (!xd) return new Ctor(x);\n    n1 = d0 = new Ctor(1);\n    d1 = n0 = new Ctor(0);\n    d = new Ctor(d1);\n    e = d.e = getPrecision(xd) - x.e - 1;\n    k = e % LOG_BASE;\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\n    if (maxD == null) {\n        maxD = e > 0 ? d : n1;\n    } else {\n        n = new Ctor(maxD);\n        if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\n        maxD = n.gt(d) ? e > 0 ? d : n1 : n;\n    }\n    external = false;\n    n = new Ctor(digitsToString(xd));\n    pr = Ctor.precision;\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\n    for(;;){\n        q = divide(n, d, 0, 1, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.cmp(maxD) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        d2 = n1;\n        n1 = n0.plus(q.times(d2));\n        n0 = d2;\n        d2 = d;\n        d = n.minus(q.times(d2));\n        n = d2;\n    }\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\n    n0 = n0.plus(d2.times(n1));\n    d0 = d0.plus(d2.times(d1));\n    n0.s = n1.s = x.s;\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [\n        n1,\n        d1\n    ] : [\n        n0,\n        d0\n    ];\n    Ctor.precision = pr;\n    external = true;\n    return r;\n};\nP.toHexadecimal = P.toHex = function(sd, rm) {\n    return toStringBinary(this, 16, sd, rm);\n};\nP.toNearest = function(y, rm) {\n    var x = this, Ctor = x.constructor;\n    x = new Ctor(x);\n    if (y == null) {\n        if (!x.d) return x;\n        y = new Ctor(1);\n        rm = Ctor.rounding;\n    } else {\n        y = new Ctor(y);\n        if (rm === void 0) {\n            rm = Ctor.rounding;\n        } else {\n            checkInt32(rm, 0, 8);\n        }\n        if (!x.d) return y.s ? x : y;\n        if (!y.d) {\n            if (y.s) y.s = x.s;\n            return y;\n        }\n    }\n    if (y.d[0]) {\n        external = false;\n        x = divide(x, y, 0, rm, 1).times(y);\n        external = true;\n        finalise(x);\n    } else {\n        y.s = x.s;\n        x = y;\n    }\n    return x;\n};\nP.toNumber = function() {\n    return +this;\n};\nP.toOctal = function(sd, rm) {\n    return toStringBinary(this, 8, sd, rm);\n};\nP.toPower = P.pow = function(y) {\n    var e, k, pr, r, rm, s, x = this, Ctor = x.constructor, yn = +(y = new Ctor(y));\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\n    x = new Ctor(x);\n    if (x.eq(1)) return x;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    if (y.eq(1)) return finalise(x, pr, rm);\n    e = mathfloor(y.e / LOG_BASE);\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n        r = intPow(Ctor, x, k, pr);\n        return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\n    }\n    s = x.s;\n    if (s < 0) {\n        if (e < y.d.length - 1) return new Ctor(NaN);\n        if ((y.d[e] & 1) == 0) s = 1;\n        if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\n            x.s = s;\n            return x;\n        }\n    }\n    k = mathpow(+x, yn);\n    e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log(\"0.\" + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + \"\").e;\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\n    external = false;\n    Ctor.rounding = x.s = 1;\n    k = Math.min(12, (e + \"\").length);\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\n    if (r.d) {\n        r = finalise(r, pr + 5, 1);\n        if (checkRoundingDigits(r.d, pr, rm)) {\n            e = pr + 10;\n            r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\n            if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\n                r = finalise(r, pr + 1, 0);\n            }\n        }\n    }\n    r.s = s;\n    external = true;\n    Ctor.rounding = rm;\n    return finalise(r, pr, rm);\n};\nP.toPrecision = function(sd, rm) {\n    var str, x = this, Ctor = x.constructor;\n    if (sd === void 0) {\n        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    } else {\n        checkInt32(sd, 1, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n        x = finalise(new Ctor(x), sd, rm);\n        str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\n    }\n    return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n};\nP.toSignificantDigits = P.toSD = function(sd, rm) {\n    var x = this, Ctor = x.constructor;\n    if (sd === void 0) {\n        sd = Ctor.precision;\n        rm = Ctor.rounding;\n    } else {\n        checkInt32(sd, 1, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n    }\n    return finalise(new Ctor(x), sd, rm);\n};\nP.toString = function() {\n    var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n};\nP.truncated = P.trunc = function() {\n    return finalise(new this.constructor(this), this.e + 1, 1);\n};\nP.valueOf = P.toJSON = function() {\n    var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    return x.isNeg() ? \"-\" + str : str;\n};\nfunction digitsToString(d) {\n    var i, k, ws, indexOfLastWord = d.length - 1, str = \"\", w = d[0];\n    if (indexOfLastWord > 0) {\n        str += w;\n        for(i = 1; i < indexOfLastWord; i++){\n            ws = d[i] + \"\";\n            k = LOG_BASE - ws.length;\n            if (k) str += getZeroString(k);\n            str += ws;\n        }\n        w = d[i];\n        ws = w + \"\";\n        k = LOG_BASE - ws.length;\n        if (k) str += getZeroString(k);\n    } else if (w === 0) {\n        return \"0\";\n    }\n    for(; w % 10 === 0;)w /= 10;\n    return str + w;\n}\n__name(digitsToString, \"digitsToString\");\nfunction checkInt32(i, min2, max2) {\n    if (i !== ~~i || i < min2 || i > max2) {\n        throw Error(invalidArgument + i);\n    }\n}\n__name(checkInt32, \"checkInt32\");\nfunction checkRoundingDigits(d, i, rm, repeating) {\n    var di, k, r, rd;\n    for(k = d[0]; k >= 10; k /= 10)--i;\n    if (--i < 0) {\n        i += LOG_BASE;\n        di = 0;\n    } else {\n        di = Math.ceil((i + 1) / LOG_BASE);\n        i %= LOG_BASE;\n    }\n    k = mathpow(10, LOG_BASE - i);\n    rd = d[di] % k | 0;\n    if (repeating == null) {\n        if (i < 3) {\n            if (i == 0) rd = rd / 100 | 0;\n            else if (i == 1) rd = rd / 10 | 0;\n            r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 5e4 || rd == 0;\n        } else {\n            r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\n        }\n    } else {\n        if (i < 4) {\n            if (i == 0) rd = rd / 1e3 | 0;\n            else if (i == 1) rd = rd / 100 | 0;\n            else if (i == 2) rd = rd / 10 | 0;\n            r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\n        } else {\n            r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1e3 | 0) == mathpow(10, i - 3) - 1;\n        }\n    }\n    return r;\n}\n__name(checkRoundingDigits, \"checkRoundingDigits\");\nfunction convertBase(str, baseIn, baseOut) {\n    var j, arr = [\n        0\n    ], arrL, i = 0, strL = str.length;\n    for(; i < strL;){\n        for(arrL = arr.length; arrL--;)arr[arrL] *= baseIn;\n        arr[0] += NUMERALS.indexOf(str.charAt(i++));\n        for(j = 0; j < arr.length; j++){\n            if (arr[j] > baseOut - 1) {\n                if (arr[j + 1] === void 0) arr[j + 1] = 0;\n                arr[j + 1] += arr[j] / baseOut | 0;\n                arr[j] %= baseOut;\n            }\n        }\n    }\n    return arr.reverse();\n}\n__name(convertBase, \"convertBase\");\nfunction cosine(Ctor, x) {\n    var k, len, y;\n    if (x.isZero()) return x;\n    len = x.d.length;\n    if (len < 32) {\n        k = Math.ceil(len / 3);\n        y = (1 / tinyPow(4, k)).toString();\n    } else {\n        k = 16;\n        y = \"2.3283064365386962890625e-10\";\n    }\n    Ctor.precision += k;\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\n    for(var i = k; i--;){\n        var cos2x = x.times(x);\n        x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\n    }\n    Ctor.precision -= k;\n    return x;\n}\n__name(cosine, \"cosine\");\nvar divide = function() {\n    var multiplyInteger = function multiplyInteger(x, k, base) {\n        var temp, carry = 0, i = x.length;\n        for(x = x.slice(); i--;){\n            temp = x[i] * k + carry;\n            x[i] = temp % base | 0;\n            carry = temp / base | 0;\n        }\n        if (carry) x.unshift(carry);\n        return x;\n    };\n    var compare = function compare(a, b, aL, bL) {\n        var i, r;\n        if (aL != bL) {\n            r = aL > bL ? 1 : -1;\n        } else {\n            for(i = r = 0; i < aL; i++){\n                if (a[i] != b[i]) {\n                    r = a[i] > b[i] ? 1 : -1;\n                    break;\n                }\n            }\n        }\n        return r;\n    };\n    var subtract = function subtract(a, b, aL, base) {\n        var i = 0;\n        for(; aL--;){\n            a[aL] -= i;\n            i = a[aL] < b[aL] ? 1 : 0;\n            a[aL] = i * base + a[aL] - b[aL];\n        }\n        for(; !a[0] && a.length > 1;)a.shift();\n    };\n    __name(multiplyInteger, \"multiplyInteger\");\n    __name(compare, \"compare\");\n    __name(subtract, \"subtract\");\n    return function(x, y, pr, rm, dp, base) {\n        var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz, Ctor = x.constructor, sign2 = x.s == y.s ? 1 : -1, xd = x.d, yd = y.d;\n        if (!xd || !xd[0] || !yd || !yd[0]) {\n            return new Ctor(!x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : xd && xd[0] == 0 || !yd ? sign2 * 0 : sign2 / 0);\n        }\n        if (base) {\n            logBase = 1;\n            e = x.e - y.e;\n        } else {\n            base = BASE;\n            logBase = LOG_BASE;\n            e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\n        }\n        yL = yd.length;\n        xL = xd.length;\n        q = new Ctor(sign2);\n        qd = q.d = [];\n        for(i = 0; yd[i] == (xd[i] || 0); i++);\n        if (yd[i] > (xd[i] || 0)) e--;\n        if (pr == null) {\n            sd = pr = Ctor.precision;\n            rm = Ctor.rounding;\n        } else if (dp) {\n            sd = pr + (x.e - y.e) + 1;\n        } else {\n            sd = pr;\n        }\n        if (sd < 0) {\n            qd.push(1);\n            more = true;\n        } else {\n            sd = sd / logBase + 2 | 0;\n            i = 0;\n            if (yL == 1) {\n                k = 0;\n                yd = yd[0];\n                sd++;\n                for(; (i < xL || k) && sd--; i++){\n                    t = k * base + (xd[i] || 0);\n                    qd[i] = t / yd | 0;\n                    k = t % yd | 0;\n                }\n                more = k || i < xL;\n            } else {\n                k = base / (yd[0] + 1) | 0;\n                if (k > 1) {\n                    yd = multiplyInteger(yd, k, base);\n                    xd = multiplyInteger(xd, k, base);\n                    yL = yd.length;\n                    xL = xd.length;\n                }\n                xi = yL;\n                rem = xd.slice(0, yL);\n                remL = rem.length;\n                for(; remL < yL;)rem[remL++] = 0;\n                yz = yd.slice();\n                yz.unshift(0);\n                yd0 = yd[0];\n                if (yd[1] >= base / 2) ++yd0;\n                do {\n                    k = 0;\n                    cmp = compare(yd, rem, yL, remL);\n                    if (cmp < 0) {\n                        rem0 = rem[0];\n                        if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n                        k = rem0 / yd0 | 0;\n                        if (k > 1) {\n                            if (k >= base) k = base - 1;\n                            prod = multiplyInteger(yd, k, base);\n                            prodL = prod.length;\n                            remL = rem.length;\n                            cmp = compare(prod, rem, prodL, remL);\n                            if (cmp == 1) {\n                                k--;\n                                subtract(prod, yL < prodL ? yz : yd, prodL, base);\n                            }\n                        } else {\n                            if (k == 0) cmp = k = 1;\n                            prod = yd.slice();\n                        }\n                        prodL = prod.length;\n                        if (prodL < remL) prod.unshift(0);\n                        subtract(rem, prod, remL, base);\n                        if (cmp == -1) {\n                            remL = rem.length;\n                            cmp = compare(yd, rem, yL, remL);\n                            if (cmp < 1) {\n                                k++;\n                                subtract(rem, yL < remL ? yz : yd, remL, base);\n                            }\n                        }\n                        remL = rem.length;\n                    } else if (cmp === 0) {\n                        k++;\n                        rem = [\n                            0\n                        ];\n                    }\n                    qd[i++] = k;\n                    if (cmp && rem[0]) {\n                        rem[remL++] = xd[xi] || 0;\n                    } else {\n                        rem = [\n                            xd[xi]\n                        ];\n                        remL = 1;\n                    }\n                }while (((xi++) < xL || rem[0] !== void 0) && sd--);\n                more = rem[0] !== void 0;\n            }\n            if (!qd[0]) qd.shift();\n        }\n        if (logBase == 1) {\n            q.e = e;\n            inexact = more;\n        } else {\n            for(i = 1, k = qd[0]; k >= 10; k /= 10)i++;\n            q.e = i + e * logBase - 1;\n            finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\n        }\n        return q;\n    };\n}();\nfunction finalise(x, sd, rm, isTruncated) {\n    var digits, i, j, k, rd, roundUp, w, xd, xdi, Ctor = x.constructor;\n    out: if (sd != null) {\n        xd = x.d;\n        if (!xd) return x;\n        for(digits = 1, k = xd[0]; k >= 10; k /= 10)digits++;\n        i = sd - digits;\n        if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            w = xd[xdi = 0];\n            rd = w / mathpow(10, digits - j - 1) % 10 | 0;\n        } else {\n            xdi = Math.ceil((i + 1) / LOG_BASE);\n            k = xd.length;\n            if (xdi >= k) {\n                if (isTruncated) {\n                    for(; (k++) <= xdi;)xd.push(0);\n                    w = rd = 0;\n                    digits = 1;\n                    i %= LOG_BASE;\n                    j = i - LOG_BASE + 1;\n                } else {\n                    break out;\n                }\n            } else {\n                w = k = xd[xdi];\n                for(digits = 1; k >= 10; k /= 10)digits++;\n                i %= LOG_BASE;\n                j = i - LOG_BASE + digits;\n                rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\n            }\n        }\n        isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\n        roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n        if (sd < 1 || !xd[0]) {\n            xd.length = 0;\n            if (roundUp) {\n                sd -= x.e + 1;\n                xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n                x.e = -sd || 0;\n            } else {\n                xd[0] = x.e = 0;\n            }\n            return x;\n        }\n        if (i == 0) {\n            xd.length = xdi;\n            k = 1;\n            xdi--;\n        } else {\n            xd.length = xdi + 1;\n            k = mathpow(10, LOG_BASE - i);\n            xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\n        }\n        if (roundUp) {\n            for(;;){\n                if (xdi == 0) {\n                    for(i = 1, j = xd[0]; j >= 10; j /= 10)i++;\n                    j = xd[0] += k;\n                    for(k = 1; j >= 10; j /= 10)k++;\n                    if (i != k) {\n                        x.e++;\n                        if (xd[0] == BASE) xd[0] = 1;\n                    }\n                    break;\n                } else {\n                    xd[xdi] += k;\n                    if (xd[xdi] != BASE) break;\n                    xd[xdi--] = 0;\n                    k = 1;\n                }\n            }\n        }\n        for(i = xd.length; xd[--i] === 0;)xd.pop();\n    }\n    if (external) {\n        if (x.e > Ctor.maxE) {\n            x.d = null;\n            x.e = NaN;\n        } else if (x.e < Ctor.minE) {\n            x.e = 0;\n            x.d = [\n                0\n            ];\n        }\n    }\n    return x;\n}\n__name(finalise, \"finalise\");\nfunction finiteToString(x, isExp, sd) {\n    if (!x.isFinite()) return nonFiniteToString(x);\n    var k, e = x.e, str = digitsToString(x.d), len = str.length;\n    if (isExp) {\n        if (sd && (k = sd - len) > 0) {\n            str = str.charAt(0) + \".\" + str.slice(1) + getZeroString(k);\n        } else if (len > 1) {\n            str = str.charAt(0) + \".\" + str.slice(1);\n        }\n        str = str + (x.e < 0 ? \"e\" : \"e+\") + x.e;\n    } else if (e < 0) {\n        str = \"0.\" + getZeroString(-e - 1) + str;\n        if (sd && (k = sd - len) > 0) str += getZeroString(k);\n    } else if (e >= len) {\n        str += getZeroString(e + 1 - len);\n        if (sd && (k = sd - e - 1) > 0) str = str + \".\" + getZeroString(k);\n    } else {\n        if ((k = e + 1) < len) str = str.slice(0, k) + \".\" + str.slice(k);\n        if (sd && (k = sd - len) > 0) {\n            if (e + 1 === len) str += \".\";\n            str += getZeroString(k);\n        }\n    }\n    return str;\n}\n__name(finiteToString, \"finiteToString\");\nfunction getBase10Exponent(digits, e) {\n    var w = digits[0];\n    for(e *= LOG_BASE; w >= 10; w /= 10)e++;\n    return e;\n}\n__name(getBase10Exponent, \"getBase10Exponent\");\nfunction getLn10(Ctor, sd, pr) {\n    if (sd > LN10_PRECISION) {\n        external = true;\n        if (pr) Ctor.precision = pr;\n        throw Error(precisionLimitExceeded);\n    }\n    return finalise(new Ctor(LN10), sd, 1, true);\n}\n__name(getLn10, \"getLn10\");\nfunction getPi(Ctor, sd, rm) {\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\n    return finalise(new Ctor(PI), sd, rm, true);\n}\n__name(getPi, \"getPi\");\nfunction getPrecision(digits) {\n    var w = digits.length - 1, len = w * LOG_BASE + 1;\n    w = digits[w];\n    if (w) {\n        for(; w % 10 == 0; w /= 10)len--;\n        for(w = digits[0]; w >= 10; w /= 10)len++;\n    }\n    return len;\n}\n__name(getPrecision, \"getPrecision\");\nfunction getZeroString(k) {\n    var zs = \"\";\n    for(; k--;)zs += \"0\";\n    return zs;\n}\n__name(getZeroString, \"getZeroString\");\nfunction intPow(Ctor, x, n, pr) {\n    var isTruncated, r = new Ctor(1), k = Math.ceil(pr / LOG_BASE + 4);\n    external = false;\n    for(;;){\n        if (n % 2) {\n            r = r.times(x);\n            if (truncate(r.d, k)) isTruncated = true;\n        }\n        n = mathfloor(n / 2);\n        if (n === 0) {\n            n = r.d.length - 1;\n            if (isTruncated && r.d[n] === 0) ++r.d[n];\n            break;\n        }\n        x = x.times(x);\n        truncate(x.d, k);\n    }\n    external = true;\n    return r;\n}\n__name(intPow, \"intPow\");\nfunction isOdd(n) {\n    return n.d[n.d.length - 1] & 1;\n}\n__name(isOdd, \"isOdd\");\nfunction maxOrMin(Ctor, args, ltgt) {\n    var y, x = new Ctor(args[0]), i = 0;\n    for(; ++i < args.length;){\n        y = new Ctor(args[i]);\n        if (!y.s) {\n            x = y;\n            break;\n        } else if (x[ltgt](y)) {\n            x = y;\n        }\n    }\n    return x;\n}\n__name(maxOrMin, \"maxOrMin\");\nfunction naturalExponential(x, sd) {\n    var denominator, guard, j, pow2, sum2, t, wpr, rep = 0, i = 0, k = 0, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;\n    if (!x.d || !x.d[0] || x.e > 17) {\n        return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);\n    }\n    if (sd == null) {\n        external = false;\n        wpr = pr;\n    } else {\n        wpr = sd;\n    }\n    t = new Ctor(0.03125);\n    while(x.e > -2){\n        x = x.times(t);\n        k += 5;\n    }\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n    wpr += guard;\n    denominator = pow2 = sum2 = new Ctor(1);\n    Ctor.precision = wpr;\n    for(;;){\n        pow2 = finalise(pow2.times(x), wpr, 1);\n        denominator = denominator.times(++i);\n        t = sum2.plus(divide(pow2, denominator, wpr, 1));\n        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum2.d).slice(0, wpr)) {\n            j = k;\n            while(j--)sum2 = finalise(sum2.times(sum2), wpr, 1);\n            if (sd == null) {\n                if (rep < 3 && checkRoundingDigits(sum2.d, wpr - guard, rm, rep)) {\n                    Ctor.precision = wpr += 10;\n                    denominator = pow2 = t = new Ctor(1);\n                    i = 0;\n                    rep++;\n                } else {\n                    return finalise(sum2, Ctor.precision = pr, rm, external = true);\n                }\n            } else {\n                Ctor.precision = pr;\n                return sum2;\n            }\n        }\n        sum2 = t;\n    }\n}\n__name(naturalExponential, \"naturalExponential\");\nfunction naturalLogarithm(y, sd) {\n    var c, c0, denominator, e, numerator, rep, sum2, t, wpr, x1, x2, n = 1, guard = 10, x = y, xd = x.d, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\n        return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\n    }\n    if (sd == null) {\n        external = false;\n        wpr = pr;\n    } else {\n        wpr = sd;\n    }\n    Ctor.precision = wpr += guard;\n    c = digitsToString(xd);\n    c0 = c.charAt(0);\n    if (Math.abs(e = x.e) < 15e14) {\n        while(c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3){\n            x = x.times(y);\n            c = digitsToString(x.d);\n            c0 = c.charAt(0);\n            n++;\n        }\n        e = x.e;\n        if (c0 > 1) {\n            x = new Ctor(\"0.\" + c);\n            e++;\n        } else {\n            x = new Ctor(c0 + \".\" + c.slice(1));\n        }\n    } else {\n        t = getLn10(Ctor, wpr + 2, pr).times(e + \"\");\n        x = naturalLogarithm(new Ctor(c0 + \".\" + c.slice(1)), wpr - guard).plus(t);\n        Ctor.precision = pr;\n        return sd == null ? finalise(x, pr, rm, external = true) : x;\n    }\n    x1 = x;\n    sum2 = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\n    x2 = finalise(x.times(x), wpr, 1);\n    denominator = 3;\n    for(;;){\n        numerator = finalise(numerator.times(x2), wpr, 1);\n        t = sum2.plus(divide(numerator, new Ctor(denominator), wpr, 1));\n        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum2.d).slice(0, wpr)) {\n            sum2 = sum2.times(2);\n            if (e !== 0) sum2 = sum2.plus(getLn10(Ctor, wpr + 2, pr).times(e + \"\"));\n            sum2 = divide(sum2, new Ctor(n), wpr, 1);\n            if (sd == null) {\n                if (checkRoundingDigits(sum2.d, wpr - guard, rm, rep)) {\n                    Ctor.precision = wpr += guard;\n                    t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\n                    x2 = finalise(x.times(x), wpr, 1);\n                    denominator = rep = 1;\n                } else {\n                    return finalise(sum2, Ctor.precision = pr, rm, external = true);\n                }\n            } else {\n                Ctor.precision = pr;\n                return sum2;\n            }\n        }\n        sum2 = t;\n        denominator += 2;\n    }\n}\n__name(naturalLogarithm, \"naturalLogarithm\");\nfunction nonFiniteToString(x) {\n    return String(x.s * x.s / 0);\n}\n__name(nonFiniteToString, \"nonFiniteToString\");\nfunction parseDecimal(x, str) {\n    var e, i, len;\n    if ((e = str.indexOf(\".\")) > -1) str = str.replace(\".\", \"\");\n    if ((i = str.search(/e/i)) > 0) {\n        if (e < 0) e = i;\n        e += +str.slice(i + 1);\n        str = str.substring(0, i);\n    } else if (e < 0) {\n        e = str.length;\n    }\n    for(i = 0; str.charCodeAt(i) === 48; i++);\n    for(len = str.length; str.charCodeAt(len - 1) === 48; --len);\n    str = str.slice(i, len);\n    if (str) {\n        len -= i;\n        x.e = e = e - i - 1;\n        x.d = [];\n        i = (e + 1) % LOG_BASE;\n        if (e < 0) i += LOG_BASE;\n        if (i < len) {\n            if (i) x.d.push(+str.slice(0, i));\n            for(len -= LOG_BASE; i < len;)x.d.push(+str.slice(i, i += LOG_BASE));\n            str = str.slice(i);\n            i = LOG_BASE - str.length;\n        } else {\n            i -= len;\n        }\n        for(; i--;)str += \"0\";\n        x.d.push(+str);\n        if (external) {\n            if (x.e > x.constructor.maxE) {\n                x.d = null;\n                x.e = NaN;\n            } else if (x.e < x.constructor.minE) {\n                x.e = 0;\n                x.d = [\n                    0\n                ];\n            }\n        }\n    } else {\n        x.e = 0;\n        x.d = [\n            0\n        ];\n    }\n    return x;\n}\n__name(parseDecimal, \"parseDecimal\");\nfunction parseOther(x, str) {\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\n    if (str.indexOf(\"_\") > -1) {\n        str = str.replace(/(\\d)_(?=\\d)/g, \"$1\");\n        if (isDecimal.test(str)) return parseDecimal(x, str);\n    } else if (str === \"Infinity\" || str === \"NaN\") {\n        if (!+str) x.s = NaN;\n        x.e = NaN;\n        x.d = null;\n        return x;\n    }\n    if (isHex.test(str)) {\n        base = 16;\n        str = str.toLowerCase();\n    } else if (isBinary.test(str)) {\n        base = 2;\n    } else if (isOctal.test(str)) {\n        base = 8;\n    } else {\n        throw Error(invalidArgument + str);\n    }\n    i = str.search(/p/i);\n    if (i > 0) {\n        p = +str.slice(i + 1);\n        str = str.substring(2, i);\n    } else {\n        str = str.slice(2);\n    }\n    i = str.indexOf(\".\");\n    isFloat = i >= 0;\n    Ctor = x.constructor;\n    if (isFloat) {\n        str = str.replace(\".\", \"\");\n        len = str.length;\n        i = len - i;\n        divisor = intPow(Ctor, new Ctor(base), i, i * 2);\n    }\n    xd = convertBase(str, base, BASE);\n    xe = xd.length - 1;\n    for(i = xe; xd[i] === 0; --i)xd.pop();\n    if (i < 0) return new Ctor(x.s * 0);\n    x.e = getBase10Exponent(xd, xe);\n    x.d = xd;\n    external = false;\n    if (isFloat) x = divide(x, divisor, len * 4);\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\n    external = true;\n    return x;\n}\n__name(parseOther, \"parseOther\");\nfunction sine(Ctor, x) {\n    var k, len = x.d.length;\n    if (len < 3) {\n        return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\n    }\n    k = 1.4 * Math.sqrt(len);\n    k = k > 16 ? 16 : k | 0;\n    x = x.times(1 / tinyPow(5, k));\n    x = taylorSeries(Ctor, 2, x, x);\n    var sin2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);\n    for(; k--;){\n        sin2_x = x.times(x);\n        x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\n    }\n    return x;\n}\n__name(sine, \"sine\");\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\n    var j, t, u, x2, i = 1, pr = Ctor.precision, k = Math.ceil(pr / LOG_BASE);\n    external = false;\n    x2 = x.times(x);\n    u = new Ctor(y);\n    for(;;){\n        t = divide(u.times(x2), new Ctor((n++) * n++), pr, 1);\n        u = isHyperbolic ? y.plus(t) : y.minus(t);\n        y = divide(t.times(x2), new Ctor((n++) * n++), pr, 1);\n        t = u.plus(y);\n        if (t.d[k] !== void 0) {\n            for(j = k; t.d[j] === u.d[j] && j--;);\n            if (j == -1) break;\n        }\n        j = u;\n        u = y;\n        y = t;\n        t = j;\n        i++;\n    }\n    external = true;\n    t.d.length = k + 1;\n    return t;\n}\n__name(taylorSeries, \"taylorSeries\");\nfunction tinyPow(b, e) {\n    var n = b;\n    while(--e)n *= b;\n    return n;\n}\n__name(tinyPow, \"tinyPow\");\nfunction toLessThanHalfPi(Ctor, x) {\n    var t, isNeg = x.s < 0, pi = getPi(Ctor, Ctor.precision, 1), halfPi = pi.times(0.5);\n    x = x.abs();\n    if (x.lte(halfPi)) {\n        quadrant = isNeg ? 4 : 1;\n        return x;\n    }\n    t = x.divToInt(pi);\n    if (t.isZero()) {\n        quadrant = isNeg ? 3 : 2;\n    } else {\n        x = x.minus(t.times(pi));\n        if (x.lte(halfPi)) {\n            quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;\n            return x;\n        }\n        quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;\n    }\n    return x.minus(pi).abs();\n}\n__name(toLessThanHalfPi, \"toLessThanHalfPi\");\nfunction toStringBinary(x, baseOut, sd, rm) {\n    var base, e, i, k, len, roundUp, str, xd, y, Ctor = x.constructor, isExp = sd !== void 0;\n    if (isExp) {\n        checkInt32(sd, 1, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n    } else {\n        sd = Ctor.precision;\n        rm = Ctor.rounding;\n    }\n    if (!x.isFinite()) {\n        str = nonFiniteToString(x);\n    } else {\n        str = finiteToString(x);\n        i = str.indexOf(\".\");\n        if (isExp) {\n            base = 2;\n            if (baseOut == 16) {\n                sd = sd * 4 - 3;\n            } else if (baseOut == 8) {\n                sd = sd * 3 - 2;\n            }\n        } else {\n            base = baseOut;\n        }\n        if (i >= 0) {\n            str = str.replace(\".\", \"\");\n            y = new Ctor(1);\n            y.e = str.length - i;\n            y.d = convertBase(finiteToString(y), 10, base);\n            y.e = y.d.length;\n        }\n        xd = convertBase(str, 10, base);\n        e = len = xd.length;\n        for(; xd[--len] == 0;)xd.pop();\n        if (!xd[0]) {\n            str = isExp ? \"0p+0\" : \"0\";\n        } else {\n            if (i < 0) {\n                e--;\n            } else {\n                x = new Ctor(x);\n                x.d = xd;\n                x.e = e;\n                x = divide(x, y, sd, rm, 0, base);\n                xd = x.d;\n                e = x.e;\n                roundUp = inexact;\n            }\n            i = xd[sd];\n            k = base / 2;\n            roundUp = roundUp || xd[sd + 1] !== void 0;\n            roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));\n            xd.length = sd;\n            if (roundUp) {\n                for(; ++xd[--sd] > base - 1;){\n                    xd[sd] = 0;\n                    if (!sd) {\n                        ++e;\n                        xd.unshift(1);\n                    }\n                }\n            }\n            for(len = xd.length; !xd[len - 1]; --len);\n            for(i = 0, str = \"\"; i < len; i++)str += NUMERALS.charAt(xd[i]);\n            if (isExp) {\n                if (len > 1) {\n                    if (baseOut == 16 || baseOut == 8) {\n                        i = baseOut == 16 ? 4 : 3;\n                        for(--len; len % i; len++)str += \"0\";\n                        xd = convertBase(str, base, baseOut);\n                        for(len = xd.length; !xd[len - 1]; --len);\n                        for(i = 1, str = \"1.\"; i < len; i++)str += NUMERALS.charAt(xd[i]);\n                    } else {\n                        str = str.charAt(0) + \".\" + str.slice(1);\n                    }\n                }\n                str = str + (e < 0 ? \"p\" : \"p+\") + e;\n            } else if (e < 0) {\n                for(; ++e;)str = \"0\" + str;\n                str = \"0.\" + str;\n            } else {\n                if (++e > len) for(e -= len; e--;)str += \"0\";\n                else if (e < len) str = str.slice(0, e) + \".\" + str.slice(e);\n            }\n        }\n        str = (baseOut == 16 ? \"0x\" : baseOut == 2 ? \"0b\" : baseOut == 8 ? \"0o\" : \"\") + str;\n    }\n    return x.s < 0 ? \"-\" + str : str;\n}\n__name(toStringBinary, \"toStringBinary\");\nfunction truncate(arr, len) {\n    if (arr.length > len) {\n        arr.length = len;\n        return true;\n    }\n}\n__name(truncate, \"truncate\");\nfunction abs(x) {\n    return new this(x).abs();\n}\n__name(abs, \"abs\");\nfunction acos(x) {\n    return new this(x).acos();\n}\n__name(acos, \"acos\");\nfunction acosh(x) {\n    return new this(x).acosh();\n}\n__name(acosh, \"acosh\");\nfunction add(x, y) {\n    return new this(x).plus(y);\n}\n__name(add, \"add\");\nfunction asin(x) {\n    return new this(x).asin();\n}\n__name(asin, \"asin\");\nfunction asinh(x) {\n    return new this(x).asinh();\n}\n__name(asinh, \"asinh\");\nfunction atan(x) {\n    return new this(x).atan();\n}\n__name(atan, \"atan\");\nfunction atanh(x) {\n    return new this(x).atanh();\n}\n__name(atanh, \"atanh\");\nfunction atan2(y, x) {\n    y = new this(y);\n    x = new this(x);\n    var r, pr = this.precision, rm = this.rounding, wpr = pr + 4;\n    if (!y.s || !x.s) {\n        r = new this(NaN);\n    } else if (!y.d && !x.d) {\n        r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\n        r.s = y.s;\n    } else if (!x.d || y.isZero()) {\n        r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\n        r.s = y.s;\n    } else if (!y.d || x.isZero()) {\n        r = getPi(this, wpr, 1).times(0.5);\n        r.s = y.s;\n    } else if (x.s < 0) {\n        this.precision = wpr;\n        this.rounding = 1;\n        r = this.atan(divide(y, x, wpr, 1));\n        x = getPi(this, wpr, 1);\n        this.precision = pr;\n        this.rounding = rm;\n        r = y.s < 0 ? r.minus(x) : r.plus(x);\n    } else {\n        r = this.atan(divide(y, x, wpr, 1));\n    }\n    return r;\n}\n__name(atan2, \"atan2\");\nfunction cbrt(x) {\n    return new this(x).cbrt();\n}\n__name(cbrt, \"cbrt\");\nfunction ceil(x) {\n    return finalise(x = new this(x), x.e + 1, 2);\n}\n__name(ceil, \"ceil\");\nfunction clamp(x, min2, max2) {\n    return new this(x).clamp(min2, max2);\n}\n__name(clamp, \"clamp\");\nfunction config(obj) {\n    if (!obj || typeof obj !== \"object\") throw Error(decimalError + \"Object expected\");\n    var i, p, v, useDefaults = obj.defaults === true, ps = [\n        \"precision\",\n        1,\n        MAX_DIGITS,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -EXP_LIMIT,\n        0,\n        \"toExpPos\",\n        0,\n        EXP_LIMIT,\n        \"maxE\",\n        0,\n        EXP_LIMIT,\n        \"minE\",\n        -EXP_LIMIT,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(i = 0; i < ps.length; i += 3){\n        if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\n        if ((v = obj[p]) !== void 0) {\n            if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\n            else throw Error(invalidArgument + p + \": \" + v);\n        }\n    }\n    if (p = \"crypto\", useDefaults) this[p] = DEFAULTS[p];\n    if ((v = obj[p]) !== void 0) {\n        if (v === true || v === false || v === 0 || v === 1) {\n            if (v) {\n                if (typeof crypto != \"undefined\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                    this[p] = true;\n                } else {\n                    throw Error(cryptoUnavailable);\n                }\n            } else {\n                this[p] = false;\n            }\n        } else {\n            throw Error(invalidArgument + p + \": \" + v);\n        }\n    }\n    return this;\n}\n__name(config, \"config\");\nfunction cos(x) {\n    return new this(x).cos();\n}\n__name(cos, \"cos\");\nfunction cosh(x) {\n    return new this(x).cosh();\n}\n__name(cosh, \"cosh\");\nfunction clone(obj) {\n    var i, p, ps;\n    function Decimal2(v) {\n        var e, i2, t, x = this;\n        if (!_instanceof(x, Decimal2)) return new Decimal2(v);\n        x.constructor = Decimal2;\n        if (isDecimalInstance(v)) {\n            x.s = v.s;\n            if (external) {\n                if (!v.d || v.e > Decimal2.maxE) {\n                    x.e = NaN;\n                    x.d = null;\n                } else if (v.e < Decimal2.minE) {\n                    x.e = 0;\n                    x.d = [\n                        0\n                    ];\n                } else {\n                    x.e = v.e;\n                    x.d = v.d.slice();\n                }\n            } else {\n                x.e = v.e;\n                x.d = v.d ? v.d.slice() : v.d;\n            }\n            return;\n        }\n        t = typeof v === \"undefined\" ? \"undefined\" : _type_of(v);\n        if (t === \"number\") {\n            if (v === 0) {\n                x.s = 1 / v < 0 ? -1 : 1;\n                x.e = 0;\n                x.d = [\n                    0\n                ];\n                return;\n            }\n            if (v < 0) {\n                v = -v;\n                x.s = -1;\n            } else {\n                x.s = 1;\n            }\n            if (v === ~~v && v < 1e7) {\n                for(e = 0, i2 = v; i2 >= 10; i2 /= 10)e++;\n                if (external) {\n                    if (e > Decimal2.maxE) {\n                        x.e = NaN;\n                        x.d = null;\n                    } else if (e < Decimal2.minE) {\n                        x.e = 0;\n                        x.d = [\n                            0\n                        ];\n                    } else {\n                        x.e = e;\n                        x.d = [\n                            v\n                        ];\n                    }\n                } else {\n                    x.e = e;\n                    x.d = [\n                        v\n                    ];\n                }\n                return;\n            } else if (v * 0 !== 0) {\n                if (!v) x.s = NaN;\n                x.e = NaN;\n                x.d = null;\n                return;\n            }\n            return parseDecimal(x, v.toString());\n        } else if (t !== \"string\") {\n            throw Error(invalidArgument + v);\n        }\n        if ((i2 = v.charCodeAt(0)) === 45) {\n            v = v.slice(1);\n            x.s = -1;\n        } else {\n            if (i2 === 43) v = v.slice(1);\n            x.s = 1;\n        }\n        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\n    }\n    __name(Decimal2, \"Decimal\");\n    Decimal2.prototype = P;\n    Decimal2.ROUND_UP = 0;\n    Decimal2.ROUND_DOWN = 1;\n    Decimal2.ROUND_CEIL = 2;\n    Decimal2.ROUND_FLOOR = 3;\n    Decimal2.ROUND_HALF_UP = 4;\n    Decimal2.ROUND_HALF_DOWN = 5;\n    Decimal2.ROUND_HALF_EVEN = 6;\n    Decimal2.ROUND_HALF_CEIL = 7;\n    Decimal2.ROUND_HALF_FLOOR = 8;\n    Decimal2.EUCLID = 9;\n    Decimal2.config = Decimal2.set = config;\n    Decimal2.clone = clone;\n    Decimal2.isDecimal = isDecimalInstance;\n    Decimal2.abs = abs;\n    Decimal2.acos = acos;\n    Decimal2.acosh = acosh;\n    Decimal2.add = add;\n    Decimal2.asin = asin;\n    Decimal2.asinh = asinh;\n    Decimal2.atan = atan;\n    Decimal2.atanh = atanh;\n    Decimal2.atan2 = atan2;\n    Decimal2.cbrt = cbrt;\n    Decimal2.ceil = ceil;\n    Decimal2.clamp = clamp;\n    Decimal2.cos = cos;\n    Decimal2.cosh = cosh;\n    Decimal2.div = div;\n    Decimal2.exp = exp;\n    Decimal2.floor = floor;\n    Decimal2.hypot = hypot;\n    Decimal2.ln = ln;\n    Decimal2.log = log;\n    Decimal2.log10 = log10;\n    Decimal2.log2 = log2;\n    Decimal2.max = max;\n    Decimal2.min = min;\n    Decimal2.mod = mod;\n    Decimal2.mul = mul;\n    Decimal2.pow = pow;\n    Decimal2.random = random;\n    Decimal2.round = round;\n    Decimal2.sign = sign;\n    Decimal2.sin = sin;\n    Decimal2.sinh = sinh;\n    Decimal2.sqrt = sqrt;\n    Decimal2.sub = sub;\n    Decimal2.sum = sum;\n    Decimal2.tan = tan;\n    Decimal2.tanh = tanh;\n    Decimal2.trunc = trunc;\n    if (obj === void 0) obj = {};\n    if (obj) {\n        if (obj.defaults !== true) {\n            ps = [\n                \"precision\",\n                \"rounding\",\n                \"toExpNeg\",\n                \"toExpPos\",\n                \"maxE\",\n                \"minE\",\n                \"modulo\",\n                \"crypto\"\n            ];\n            for(i = 0; i < ps.length;)if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\n        }\n    }\n    Decimal2.config(obj);\n    return Decimal2;\n}\n__name(clone, \"clone\");\nfunction div(x, y) {\n    return new this(x).div(y);\n}\n__name(div, \"div\");\nfunction exp(x) {\n    return new this(x).exp();\n}\n__name(exp, \"exp\");\nfunction floor(x) {\n    return finalise(x = new this(x), x.e + 1, 3);\n}\n__name(floor, \"floor\");\nfunction hypot() {\n    var i, n, t = new this(0);\n    external = false;\n    for(i = 0; i < arguments.length;){\n        n = new this(arguments[i++]);\n        if (!n.d) {\n            if (n.s) {\n                external = true;\n                return new this(1 / 0);\n            }\n            t = n;\n        } else if (t.d) {\n            t = t.plus(n.times(n));\n        }\n    }\n    external = true;\n    return t.sqrt();\n}\n__name(hypot, \"hypot\");\nfunction isDecimalInstance(obj) {\n    return _instanceof(obj, Decimal) || obj && obj.toStringTag === tag || false;\n}\n__name(isDecimalInstance, \"isDecimalInstance\");\nfunction ln(x) {\n    return new this(x).ln();\n}\n__name(ln, \"ln\");\nfunction log(x, y) {\n    return new this(x).log(y);\n}\n__name(log, \"log\");\nfunction log2(x) {\n    return new this(x).log(2);\n}\n__name(log2, \"log2\");\nfunction log10(x) {\n    return new this(x).log(10);\n}\n__name(log10, \"log10\");\nfunction max() {\n    return maxOrMin(this, arguments, \"lt\");\n}\n__name(max, \"max\");\nfunction min() {\n    return maxOrMin(this, arguments, \"gt\");\n}\n__name(min, \"min\");\nfunction mod(x, y) {\n    return new this(x).mod(y);\n}\n__name(mod, \"mod\");\nfunction mul(x, y) {\n    return new this(x).mul(y);\n}\n__name(mul, \"mul\");\nfunction pow(x, y) {\n    return new this(x).pow(y);\n}\n__name(pow, \"pow\");\nfunction random(sd) {\n    var d, e, k, n, i = 0, r = new this(1), rd = [];\n    if (sd === void 0) sd = this.precision;\n    else checkInt32(sd, 1, MAX_DIGITS);\n    k = Math.ceil(sd / LOG_BASE);\n    if (!this.crypto) {\n        for(; i < k;)rd[i++] = Math.random() * 1e7 | 0;\n    } else if (crypto.getRandomValues) {\n        d = crypto.getRandomValues(new Uint32Array(k));\n        for(; i < k;){\n            n = d[i];\n            if (n >= 429e7) {\n                d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\n            } else {\n                rd[i++] = n % 1e7;\n            }\n        }\n    } else if (crypto.randomBytes) {\n        d = crypto.randomBytes(k *= 4);\n        for(; i < k;){\n            n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 127) << 24);\n            if (n >= 214e7) {\n                crypto.randomBytes(4).copy(d, i);\n            } else {\n                rd.push(n % 1e7);\n                i += 4;\n            }\n        }\n        i = k / 4;\n    } else {\n        throw Error(cryptoUnavailable);\n    }\n    k = rd[--i];\n    sd %= LOG_BASE;\n    if (k && sd) {\n        n = mathpow(10, LOG_BASE - sd);\n        rd[i] = (k / n | 0) * n;\n    }\n    for(; rd[i] === 0; i--)rd.pop();\n    if (i < 0) {\n        e = 0;\n        rd = [\n            0\n        ];\n    } else {\n        e = -1;\n        for(; rd[0] === 0; e -= LOG_BASE)rd.shift();\n        for(k = 1, n = rd[0]; n >= 10; n /= 10)k++;\n        if (k < LOG_BASE) e -= LOG_BASE - k;\n    }\n    r.e = e;\n    r.d = rd;\n    return r;\n}\n__name(random, \"random\");\nfunction round(x) {\n    return finalise(x = new this(x), x.e + 1, this.rounding);\n}\n__name(round, \"round\");\nfunction sign(x) {\n    x = new this(x);\n    return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;\n}\n__name(sign, \"sign\");\nfunction sin(x) {\n    return new this(x).sin();\n}\n__name(sin, \"sin\");\nfunction sinh(x) {\n    return new this(x).sinh();\n}\n__name(sinh, \"sinh\");\nfunction sqrt(x) {\n    return new this(x).sqrt();\n}\n__name(sqrt, \"sqrt\");\nfunction sub(x, y) {\n    return new this(x).sub(y);\n}\n__name(sub, \"sub\");\nfunction sum() {\n    var i = 0, args = arguments, x = new this(args[i]);\n    external = false;\n    for(; x.s && ++i < args.length;)x = x.plus(args[i]);\n    external = true;\n    return finalise(x, this.precision, this.rounding);\n}\n__name(sum, \"sum\");\nfunction tan(x) {\n    return new this(x).tan();\n}\n__name(tan, \"tan\");\nfunction tanh(x) {\n    return new this(x).tanh();\n}\n__name(tanh, \"tanh\");\nfunction trunc(x) {\n    return finalise(x = new this(x), x.e + 1, 1);\n}\n__name(trunc, \"trunc\");\nP[Symbol.for(\"nodejs.util.inspect.custom\")] = P.toString;\nP[Symbol.toStringTag] = \"Decimal\";\nvar Decimal = P.constructor = clone(DEFAULTS);\nLN10 = new Decimal(LN10);\nPI = new Decimal(PI);\nvar decimal_default = Decimal;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0); /*!\n *  decimal.js v10.4.0\n *  An arbitrary-precision Decimal type for JavaScript.\n *  https://github.com/MikeMcl/decimal.js\n *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\n *  MIT Licence\n */ \n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wcmlzbWEvZ2VuZXJhdGVkL2NsaWVudDIvcnVudGltZS9pbmRleC1icm93c2VyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOzs7Ozs7O0FBQ2IsSUFBSUEsU0FBUyxHQUFHQyxNQUFNLENBQUNDLGNBQWM7QUFDckMsSUFBSUMsZ0JBQWdCLEdBQUdGLE1BQU0sQ0FBQ0csd0JBQXdCO0FBQ3RELElBQUlDLGlCQUFpQixHQUFHSixNQUFNLENBQUNLLG1CQUFtQjtBQUNsRCxJQUFJQyxZQUFZLEdBQUdOLE1BQU0sQ0FBQ08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLE1BQU0sR0FBRyxTQUFDQyxNQUFNLEVBQUVDLEtBQUs7V0FBS1osU0FBUyxDQUFDVyxNQUFNLEVBQUUsTUFBTSxFQUFFO1FBQUVDLEtBQUssRUFBTEEsS0FBSztRQUFFQyxZQUFZLEVBQUUsSUFBSTtLQUFFLENBQUM7Q0FBQTtBQUN4RixJQUFJQyxRQUFRLEdBQUcsU0FBQ0gsTUFBTSxFQUFFSSxHQUFHLEVBQUs7SUFDOUIsSUFBSyxJQUFJQyxJQUFJLElBQUlELEdBQUcsQ0FDbEJmLFNBQVMsQ0FBQ1csTUFBTSxFQUFFSyxJQUFJLEVBQUU7UUFBRUMsR0FBRyxFQUFFRixHQUFHLENBQUNDLElBQUksQ0FBQztRQUFFRSxVQUFVLEVBQUUsSUFBSTtLQUFFLENBQUMsQ0FBQztDQUNqRTtBQUNELElBQUlDLFdBQVcsR0FBRyxTQUFDQyxFQUFFLEVBQUVDLElBQUksRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUs7SUFDNUMsSUFBSUYsSUFBSSxJQUFJLE9BQU9BLElBQUksS0FBSyxRQUFRLElBQUksT0FBT0EsSUFBSSxLQUFLLFVBQVUsRUFBRTtZQUM3RCx5QkFBTyxTQUFQLGlCQUFPLFVBQVAsY0FBTzs7O2dCQUFQLElBQUlHLEdBQUcsR0FBUCxLQUFPO2dCQUNWLElBQUksQ0FBQ2pCLFlBQVksQ0FBQ2tCLElBQUksQ0FBQ0wsRUFBRSxFQUFFSSxHQUFHLENBQUMsSUFBSUEsR0FBRyxLQUFLRixN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QUFFO0lBQ2YsT0FBTyxJQUFJLElBQUksQ0FBQ0EsQ0FBQyxDQUFDLENBQUNrRixJQUFJLEVBQUUsQ0FBQztDQUMzQjtBQUNEaEwsTUFBTSxDQUFDZ0wsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3JCLFNBQVNnRyxLQUFLLENBQUNsTCxDQUFDLEVBQUU7SUFDaEIsT0FBT0UsUUFBUSxDQUFDRixDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUNBLENBQUMsQ0FBQyxFQUFFQSxDQUFDLENBQUNJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDOUM7QUFDRGxHLE1BQU0sQ0FBQ2dSLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN2QnJMLENBQUMsQ0FBQ2pFLE1BQU0sQ0FBQzhWLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLEdBQUc3UixDQUFDLENBQUN4RCxRQUFRLENBQUM7QUFDekR3RCxDQUFDLENBQUNqRSxNQUFNLENBQUNtQixXQUFXLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDbEMsSUFBSTFCLE9BQU8sR0FBR3dFLENBQUMsQ0FBQ3pELFdBQVcsR0FBRytULEtBQUssQ0FBQ3RTLFFBQVEsQ0FBQztBQUM3Q0YsSUFBSSxHQUFHLElBQUl0QyxPQUFPLENBQUNzQyxJQUFJLENBQUMsQ0FBQztBQUN6QkMsRUFBRSxHQUFHLElBQUl2QyxPQUFPLENBQUN1QyxFQUFFLENBQUMsQ0FBQztBQUNyQixJQUFJdEMsZUFBZSxHQUFHRCxPQUFPO0FBQzdCLDZEQUE2RDtBQUM3RCxDQUFDLElBQUksQ0FBQ0ksQ0FJTCxDQUFDLENBQUMsQ0FDSDs7Ozs7O0dBTUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcmRlcnMvLi9wcmlzbWEvZ2VuZXJhdGVkL2NsaWVudDIvcnVudGltZS9pbmRleC1icm93c2VyLmpzP2ViZmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kMikgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kMik7XG5cbi8vIHNyYy9ydW50aW1lL2luZGV4LWJyb3dzZXIudHNcbnZhciBpbmRleF9icm93c2VyX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGluZGV4X2Jyb3dzZXJfZXhwb3J0cywge1xuICBEZWNpbWFsOiAoKSA9PiBkZWNpbWFsX2RlZmF1bHQsXG4gIG1ha2VTdHJpY3RFbnVtOiAoKSA9PiBtYWtlU3RyaWN0RW51bSxcbiAgb2JqZWN0RW51bVZhbHVlczogKCkgPT4gb2JqZWN0RW51bVZhbHVlc1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhpbmRleF9icm93c2VyX2V4cG9ydHMpO1xuXG4vLyBzcmMvcnVudGltZS9vYmplY3QtZW51bXMudHNcbnZhciBzZWNyZXQgPSBTeW1ib2woKTtcbnZhciByZXByZXNlbnRhdGlvbnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbnZhciBPYmplY3RFbnVtVmFsdWUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGFyZykge1xuICAgIGlmIChhcmcgPT09IHNlY3JldCkge1xuICAgICAgcmVwcmVzZW50YXRpb25zLnNldCh0aGlzLCBgUHJpc21hLiR7dGhpcy5fZ2V0TmFtZSgpfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXByZXNlbnRhdGlvbnMuc2V0KHRoaXMsIGBuZXcgUHJpc21hLiR7dGhpcy5fZ2V0TmFtZXNwYWNlKCl9LiR7dGhpcy5fZ2V0TmFtZSgpfSgpYCk7XG4gICAgfVxuICB9XG4gIF9nZXROYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHJlcHJlc2VudGF0aW9ucy5nZXQodGhpcyk7XG4gIH1cbn07XG5fX25hbWUoT2JqZWN0RW51bVZhbHVlLCBcIk9iamVjdEVudW1WYWx1ZVwiKTtcbnZhciBOdWxsVHlwZXNFbnVtVmFsdWUgPSBjbGFzcyBleHRlbmRzIE9iamVjdEVudW1WYWx1ZSB7XG4gIF9nZXROYW1lc3BhY2UoKSB7XG4gICAgcmV0dXJuIFwiTnVsbFR5cGVzXCI7XG4gIH1cbn07XG5fX25hbWUoTnVsbFR5cGVzRW51bVZhbHVlLCBcIk51bGxUeXBlc0VudW1WYWx1ZVwiKTtcbnZhciBEYk51bGwgPSBjbGFzcyBleHRlbmRzIE51bGxUeXBlc0VudW1WYWx1ZSB7XG59O1xuX19uYW1lKERiTnVsbCwgXCJEYk51bGxcIik7XG52YXIgSnNvbk51bGwgPSBjbGFzcyBleHRlbmRzIE51bGxUeXBlc0VudW1WYWx1ZSB7XG59O1xuX19uYW1lKEpzb25OdWxsLCBcIkpzb25OdWxsXCIpO1xudmFyIEFueU51bGwgPSBjbGFzcyBleHRlbmRzIE51bGxUeXBlc0VudW1WYWx1ZSB7XG59O1xuX19uYW1lKEFueU51bGwsIFwiQW55TnVsbFwiKTtcbnZhciBvYmplY3RFbnVtVmFsdWVzID0ge1xuICBjbGFzc2VzOiB7XG4gICAgRGJOdWxsLFxuICAgIEpzb25OdWxsLFxuICAgIEFueU51bGxcbiAgfSxcbiAgaW5zdGFuY2VzOiB7XG4gICAgRGJOdWxsOiBuZXcgRGJOdWxsKHNlY3JldCksXG4gICAgSnNvbk51bGw6IG5ldyBKc29uTnVsbChzZWNyZXQpLFxuICAgIEFueU51bGw6IG5ldyBBbnlOdWxsKHNlY3JldClcbiAgfVxufTtcblxuLy8gc3JjL3J1bnRpbWUvc3RyaWN0RW51bS50c1xudmFyIGFsbG93TGlzdCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcbiAgXCJ0b0pTT05cIixcbiAgXCJhc3ltbWV0cmljTWF0Y2hcIixcbiAgU3ltYm9sLml0ZXJhdG9yLFxuICBTeW1ib2wudG9TdHJpbmdUYWcsXG4gIFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUsXG4gIFN5bWJvbC50b1ByaW1pdGl2ZVxuXSk7XG5mdW5jdGlvbiBtYWtlU3RyaWN0RW51bShkZWZpbml0aW9uKSB7XG4gIHJldHVybiBuZXcgUHJveHkoZGVmaW5pdGlvbiwge1xuICAgIGdldCh0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgICBpZiAocHJvcGVydHkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRbcHJvcGVydHldO1xuICAgICAgfVxuICAgICAgaWYgKGFsbG93TGlzdC5oYXMocHJvcGVydHkpKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGVudW0gdmFsdWU6ICR7U3RyaW5nKHByb3BlcnR5KX1gKTtcbiAgICB9XG4gIH0pO1xufVxuX19uYW1lKG1ha2VTdHJpY3RFbnVtLCBcIm1ha2VTdHJpY3RFbnVtXCIpO1xuXG4vLyAuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZGVjaW1hbC5qc0AxMC40LjAvbm9kZV9tb2R1bGVzL2RlY2ltYWwuanMvZGVjaW1hbC5tanNcbnZhciBFWFBfTElNSVQgPSA5ZTE1O1xudmFyIE1BWF9ESUdJVFMgPSAxZTk7XG52YXIgTlVNRVJBTFMgPSBcIjAxMjM0NTY3ODlhYmNkZWZcIjtcbnZhciBMTjEwID0gXCIyLjMwMjU4NTA5Mjk5NDA0NTY4NDAxNzk5MTQ1NDY4NDM2NDIwNzYwMTEwMTQ4ODYyODc3Mjk3NjAzMzMyNzkwMDk2NzU3MjYwOTY3NzM1MjQ4MDIzNTk5NzIwNTA4OTU5ODI5ODM0MTk2Nzc4NDA0MjI4NjI0ODYzMzQwOTUyNTQ2NTA4MjgwNjc1NjY2NjI4NzM2OTA5ODc4MTY4OTQ4MjkwNzIwODMyNTU1NDY4MDg0Mzc5OTg5NDgyNjIzMzE5ODUyODM5MzUwNTMwODk2NTM3NzczMjYyODg0NjE2MzM2NjIyMjI4NzY5ODIxOTg4Njc0NjU0MzY2NzQ3NDQwNDI0MzI3NDM2NTE1NTA0ODkzNDMxNDkzOTM5MTQ3OTYxOTQwNDQwMDIyMjEwNTEwMTcxNDE3NDgwMDM2ODgwODQwMTI2NDcwODA2ODU1Njc3NDMyMTYyMjgzNTUyMjAxMTQ4MDQ2NjM3MTU2NTkxMjEzNzM0NTA3NDc4NTY5NDc2ODM0NjM2MTY3OTIxMDE4MDY0NDUwNzA2NDgwMDAyNzc1MDI2ODQ5MTY3NDY1NTA1ODY4NTY5MzU2NzM0MjA2NzA1ODExMzY0MjkyMjQ1NTQ0MDU3NTg5MjU3MjQyMDgyNDEzMTQ2OTU2ODkwMTY3NTg5NDAyNTY3NzYzMTEzNTY5MTkyOTIwMzMzNzY1ODcxNDE2NjAyMzAxMDU3MDMwODk2MzQ1NzIwNzU0NDAzNzA4NDc0Njk5NDAxNjgyNjkyODI4MDg0ODExODQyODkzMTQ4NDg1MjQ5NDg2NDQ4NzE5Mjc4MDk2NzYyNzEyNzU3NzUzOTcwMjc2Njg2MDU5NTI0OTY3MTY2NzQxODM0ODU3MDQ0MjI1MDcxOTc5NjUwMDQ3MTQ5NTEwNTA0OTIyMTQ3NzY1Njc2MzY5Mzg2NjI5NzY5Nzk1MjIxMTA3MTgyNjQ1NDk3MzQ3NzI2NjI0MjU3MDk0MjkzMjI1ODI3OTg1MDI1ODU1MDk3ODUyNjUzODMyMDc2MDY3MjYzMTcxNjQzMDk1MDU5OTUwODc4MDc1MjM3MTAzMzMxMDExOTc4NTc1NDczMzE1NDE0MjE4MDg0Mjc1NDM4NjM1OTE3NzgxMTcwNTQzMDk4Mjc0ODIzODUwNDU2NDgwMTkwOTU2MTAyOTkyOTE4MjQzMTgyMzc1MjUzNTc3MDk3NTA1Mzk1NjUxODc2OTc1MTAzNzQ5NzA4ODg2OTIxODAyMDUxODkzMzk1MDcyMzg1MzkyMDUxNDQ2MzQxOTcyNjUyODcyODY5NjUxMTA4NjI1NzE0OTIxOTg4NDk5Nzg3NDg4NzM3NzEzNDU2ODYyMDkxNjcwNThcIjtcbnZhciBQSSA9IFwiMy4xNDE1OTI2NTM1ODk3OTMyMzg0NjI2NDMzODMyNzk1MDI4ODQxOTcxNjkzOTkzNzUxMDU4MjA5NzQ5NDQ1OTIzMDc4MTY0MDYyODYyMDg5OTg2MjgwMzQ4MjUzNDIxMTcwNjc5ODIxNDgwODY1MTMyODIzMDY2NDcwOTM4NDQ2MDk1NTA1ODIyMzE3MjUzNTk0MDgxMjg0ODExMTc0NTAyODQxMDI3MDE5Mzg1MjExMDU1NTk2NDQ2MjI5NDg5NTQ5MzAzODE5NjQ0Mjg4MTA5NzU2NjU5MzM0NDYxMjg0NzU2NDgyMzM3ODY3ODMxNjUyNzEyMDE5MDkxNDU2NDg1NjY5MjM0NjAzNDg2MTA0NTQzMjY2NDgyMTMzOTM2MDcyNjAyNDkxNDEyNzM3MjQ1ODcwMDY2MDYzMTU1ODgxNzQ4ODE1MjA5MjA5NjI4MjkyNTQwOTE3MTUzNjQzNjc4OTI1OTAzNjAwMTEzMzA1MzA1NDg4MjA0NjY1MjEzODQxNDY5NTE5NDE1MTE2MDk0MzMwNTcyNzAzNjU3NTk1OTE5NTMwOTIxODYxMTczODE5MzI2MTE3OTMxMDUxMTg1NDgwNzQ0NjIzNzk5NjI3NDk1NjczNTE4ODU3NTI3MjQ4OTEyMjc5MzgxODMwMTE5NDkxMjk4MzM2NzMzNjI0NDA2NTY2NDMwODYwMjEzOTQ5NDYzOTUyMjQ3MzcxOTA3MDIxNzk4NjA5NDM3MDI3NzA1MzkyMTcxNzYyOTMxNzY3NTIzODQ2NzQ4MTg0Njc2Njk0MDUxMzIwMDA1NjgxMjcxNDUyNjM1NjA4Mjc3ODU3NzEzNDI3NTc3ODk2MDkxNzM2MzcxNzg3MjE0Njg0NDA5MDEyMjQ5NTM0MzAxNDY1NDk1ODUzNzEwNTA3OTIyNzk2ODkyNTg5MjM1NDIwMTk5NTYxMTIxMjkwMjE5NjA4NjQwMzQ0MTgxNTk4MTM2Mjk3NzQ3NzEzMDk5NjA1MTg3MDcyMTEzNDk5OTk5OTgzNzI5NzgwNDk5NTEwNTk3MzE3MzI4MTYwOTYzMTg1OTUwMjQ0NTk0NTUzNDY5MDgzMDI2NDI1MjIzMDgyNTMzNDQ2ODUwMzUyNjE5MzExODgxNzEwMTAwMDMxMzc4Mzg3NTI4ODY1ODc1MzMyMDgzODE0MjA2MTcxNzc2NjkxNDczMDM1OTgyNTM0OTA0Mjg3NTU0Njg3MzExNTk1NjI4NjM4ODIzNTM3ODc1OTM3NTE5NTc3ODE4NTc3ODA1MzIxNzEyMjY4MDY2MTMwMDE5Mjc4NzY2MTExOTU5MDkyMTY0MjAxOTg5MzgwOTUyNTcyMDEwNjU0ODU4NjMyNzg5XCI7XG52YXIgREVGQVVMVFMgPSB7XG4gIHByZWNpc2lvbjogMjAsXG4gIHJvdW5kaW5nOiA0LFxuICBtb2R1bG86IDEsXG4gIHRvRXhwTmVnOiAtNyxcbiAgdG9FeHBQb3M6IDIxLFxuICBtaW5FOiAtRVhQX0xJTUlULFxuICBtYXhFOiBFWFBfTElNSVQsXG4gIGNyeXB0bzogZmFsc2Vcbn07XG52YXIgaW5leGFjdDtcbnZhciBxdWFkcmFudDtcbnZhciBleHRlcm5hbCA9IHRydWU7XG52YXIgZGVjaW1hbEVycm9yID0gXCJbRGVjaW1hbEVycm9yXSBcIjtcbnZhciBpbnZhbGlkQXJndW1lbnQgPSBkZWNpbWFsRXJyb3IgKyBcIkludmFsaWQgYXJndW1lbnQ6IFwiO1xudmFyIHByZWNpc2lvbkxpbWl0RXhjZWVkZWQgPSBkZWNpbWFsRXJyb3IgKyBcIlByZWNpc2lvbiBsaW1pdCBleGNlZWRlZFwiO1xudmFyIGNyeXB0b1VuYXZhaWxhYmxlID0gZGVjaW1hbEVycm9yICsgXCJjcnlwdG8gdW5hdmFpbGFibGVcIjtcbnZhciB0YWcgPSBcIltvYmplY3QgRGVjaW1hbF1cIjtcbnZhciBtYXRoZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIG1hdGhwb3cgPSBNYXRoLnBvdztcbnZhciBpc0JpbmFyeSA9IC9eMGIoWzAxXSsoXFwuWzAxXSopP3xcXC5bMDFdKykocFsrLV0/XFxkKyk/JC9pO1xudmFyIGlzSGV4ID0gL14weChbMC05YS1mXSsoXFwuWzAtOWEtZl0qKT98XFwuWzAtOWEtZl0rKShwWystXT9cXGQrKT8kL2k7XG52YXIgaXNPY3RhbCA9IC9eMG8oWzAtN10rKFxcLlswLTddKik/fFxcLlswLTddKykocFsrLV0/XFxkKyk/JC9pO1xudmFyIGlzRGVjaW1hbCA9IC9eKFxcZCsoXFwuXFxkKik/fFxcLlxcZCspKGVbKy1dP1xcZCspPyQvaTtcbnZhciBCQVNFID0gMWU3O1xudmFyIExPR19CQVNFID0gNztcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcbnZhciBMTjEwX1BSRUNJU0lPTiA9IExOMTAubGVuZ3RoIC0gMTtcbnZhciBQSV9QUkVDSVNJT04gPSBQSS5sZW5ndGggLSAxO1xudmFyIFAgPSB7IHRvU3RyaW5nVGFnOiB0YWcgfTtcblAuYWJzb2x1dGVWYWx1ZSA9IFAuYWJzID0gZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7XG4gIGlmICh4LnMgPCAwKVxuICAgIHgucyA9IDE7XG4gIHJldHVybiBmaW5hbGlzZSh4KTtcbn07XG5QLmNlaWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGZpbmFsaXNlKG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpLCB0aGlzLmUgKyAxLCAyKTtcbn07XG5QLmNsYW1wZWRUbyA9IFAuY2xhbXAgPSBmdW5jdGlvbihtaW4yLCBtYXgyKSB7XG4gIHZhciBrLCB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3I7XG4gIG1pbjIgPSBuZXcgQ3RvcihtaW4yKTtcbiAgbWF4MiA9IG5ldyBDdG9yKG1heDIpO1xuICBpZiAoIW1pbjIucyB8fCAhbWF4Mi5zKVxuICAgIHJldHVybiBuZXcgQ3RvcihOYU4pO1xuICBpZiAobWluMi5ndChtYXgyKSlcbiAgICB0aHJvdyBFcnJvcihpbnZhbGlkQXJndW1lbnQgKyBtYXgyKTtcbiAgayA9IHguY21wKG1pbjIpO1xuICByZXR1cm4gayA8IDAgPyBtaW4yIDogeC5jbXAobWF4MikgPiAwID8gbWF4MiA6IG5ldyBDdG9yKHgpO1xufTtcblAuY29tcGFyZWRUbyA9IFAuY21wID0gZnVuY3Rpb24oeSkge1xuICB2YXIgaSwgaiwgeGRMLCB5ZEwsIHggPSB0aGlzLCB4ZCA9IHguZCwgeWQgPSAoeSA9IG5ldyB4LmNvbnN0cnVjdG9yKHkpKS5kLCB4cyA9IHgucywgeXMgPSB5LnM7XG4gIGlmICgheGQgfHwgIXlkKSB7XG4gICAgcmV0dXJuICF4cyB8fCAheXMgPyBOYU4gOiB4cyAhPT0geXMgPyB4cyA6IHhkID09PSB5ZCA/IDAgOiAheGQgXiB4cyA8IDAgPyAxIDogLTE7XG4gIH1cbiAgaWYgKCF4ZFswXSB8fCAheWRbMF0pXG4gICAgcmV0dXJuIHhkWzBdID8geHMgOiB5ZFswXSA/IC15cyA6IDA7XG4gIGlmICh4cyAhPT0geXMpXG4gICAgcmV0dXJuIHhzO1xuICBpZiAoeC5lICE9PSB5LmUpXG4gICAgcmV0dXJuIHguZSA+IHkuZSBeIHhzIDwgMCA/IDEgOiAtMTtcbiAgeGRMID0geGQubGVuZ3RoO1xuICB5ZEwgPSB5ZC5sZW5ndGg7XG4gIGZvciAoaSA9IDAsIGogPSB4ZEwgPCB5ZEwgPyB4ZEwgOiB5ZEw7IGkgPCBqOyArK2kpIHtcbiAgICBpZiAoeGRbaV0gIT09IHlkW2ldKVxuICAgICAgcmV0dXJuIHhkW2ldID4geWRbaV0gXiB4cyA8IDAgPyAxIDogLTE7XG4gIH1cbiAgcmV0dXJuIHhkTCA9PT0geWRMID8gMCA6IHhkTCA+IHlkTCBeIHhzIDwgMCA/IDEgOiAtMTtcbn07XG5QLmNvc2luZSA9IFAuY29zID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwciwgcm0sIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgaWYgKCF4LmQpXG4gICAgcmV0dXJuIG5ldyBDdG9yKE5hTik7XG4gIGlmICgheC5kWzBdKVxuICAgIHJldHVybiBuZXcgQ3RvcigxKTtcbiAgcHIgPSBDdG9yLnByZWNpc2lvbjtcbiAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICBDdG9yLnByZWNpc2lvbiA9IHByICsgTWF0aC5tYXgoeC5lLCB4LnNkKCkpICsgTE9HX0JBU0U7XG4gIEN0b3Iucm91bmRpbmcgPSAxO1xuICB4ID0gY29zaW5lKEN0b3IsIHRvTGVzc1RoYW5IYWxmUGkoQ3RvciwgeCkpO1xuICBDdG9yLnByZWNpc2lvbiA9IHByO1xuICBDdG9yLnJvdW5kaW5nID0gcm07XG4gIHJldHVybiBmaW5hbGlzZShxdWFkcmFudCA9PSAyIHx8IHF1YWRyYW50ID09IDMgPyB4Lm5lZygpIDogeCwgcHIsIHJtLCB0cnVlKTtcbn07XG5QLmN1YmVSb290ID0gUC5jYnJ0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBlLCBtLCBuLCByLCByZXAsIHMsIHNkLCB0LCB0MywgdDNwbHVzeCwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBpZiAoIXguaXNGaW5pdGUoKSB8fCB4LmlzWmVybygpKVxuICAgIHJldHVybiBuZXcgQ3Rvcih4KTtcbiAgZXh0ZXJuYWwgPSBmYWxzZTtcbiAgcyA9IHgucyAqIG1hdGhwb3coeC5zICogeCwgMSAvIDMpO1xuICBpZiAoIXMgfHwgTWF0aC5hYnMocykgPT0gMSAvIDApIHtcbiAgICBuID0gZGlnaXRzVG9TdHJpbmcoeC5kKTtcbiAgICBlID0geC5lO1xuICAgIGlmIChzID0gKGUgLSBuLmxlbmd0aCArIDEpICUgMylcbiAgICAgIG4gKz0gcyA9PSAxIHx8IHMgPT0gLTIgPyBcIjBcIiA6IFwiMDBcIjtcbiAgICBzID0gbWF0aHBvdyhuLCAxIC8gMyk7XG4gICAgZSA9IG1hdGhmbG9vcigoZSArIDEpIC8gMykgLSAoZSAlIDMgPT0gKGUgPCAwID8gLTEgOiAyKSk7XG4gICAgaWYgKHMgPT0gMSAvIDApIHtcbiAgICAgIG4gPSBcIjVlXCIgKyBlO1xuICAgIH0gZWxzZSB7XG4gICAgICBuID0gcy50b0V4cG9uZW50aWFsKCk7XG4gICAgICBuID0gbi5zbGljZSgwLCBuLmluZGV4T2YoXCJlXCIpICsgMSkgKyBlO1xuICAgIH1cbiAgICByID0gbmV3IEN0b3Iobik7XG4gICAgci5zID0geC5zO1xuICB9IGVsc2Uge1xuICAgIHIgPSBuZXcgQ3RvcihzLnRvU3RyaW5nKCkpO1xuICB9XG4gIHNkID0gKGUgPSBDdG9yLnByZWNpc2lvbikgKyAzO1xuICBmb3IgKDsgOyApIHtcbiAgICB0ID0gcjtcbiAgICB0MyA9IHQudGltZXModCkudGltZXModCk7XG4gICAgdDNwbHVzeCA9IHQzLnBsdXMoeCk7XG4gICAgciA9IGRpdmlkZSh0M3BsdXN4LnBsdXMoeCkudGltZXModCksIHQzcGx1c3gucGx1cyh0MyksIHNkICsgMiwgMSk7XG4gICAgaWYgKGRpZ2l0c1RvU3RyaW5nKHQuZCkuc2xpY2UoMCwgc2QpID09PSAobiA9IGRpZ2l0c1RvU3RyaW5nKHIuZCkpLnNsaWNlKDAsIHNkKSkge1xuICAgICAgbiA9IG4uc2xpY2Uoc2QgLSAzLCBzZCArIDEpO1xuICAgICAgaWYgKG4gPT0gXCI5OTk5XCIgfHwgIXJlcCAmJiBuID09IFwiNDk5OVwiKSB7XG4gICAgICAgIGlmICghcmVwKSB7XG4gICAgICAgICAgZmluYWxpc2UodCwgZSArIDEsIDApO1xuICAgICAgICAgIGlmICh0LnRpbWVzKHQpLnRpbWVzKHQpLmVxKHgpKSB7XG4gICAgICAgICAgICByID0gdDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZCArPSA0O1xuICAgICAgICByZXAgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCErbiB8fCAhK24uc2xpY2UoMSkgJiYgbi5jaGFyQXQoMCkgPT0gXCI1XCIpIHtcbiAgICAgICAgICBmaW5hbGlzZShyLCBlICsgMSwgMSk7XG4gICAgICAgICAgbSA9ICFyLnRpbWVzKHIpLnRpbWVzKHIpLmVxKHgpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBleHRlcm5hbCA9IHRydWU7XG4gIHJldHVybiBmaW5hbGlzZShyLCBlLCBDdG9yLnJvdW5kaW5nLCBtKTtcbn07XG5QLmRlY2ltYWxQbGFjZXMgPSBQLmRwID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3LCBkID0gdGhpcy5kLCBuID0gTmFOO1xuICBpZiAoZCkge1xuICAgIHcgPSBkLmxlbmd0aCAtIDE7XG4gICAgbiA9ICh3IC0gbWF0aGZsb29yKHRoaXMuZSAvIExPR19CQVNFKSkgKiBMT0dfQkFTRTtcbiAgICB3ID0gZFt3XTtcbiAgICBpZiAodylcbiAgICAgIGZvciAoOyB3ICUgMTAgPT0gMDsgdyAvPSAxMClcbiAgICAgICAgbi0tO1xuICAgIGlmIChuIDwgMClcbiAgICAgIG4gPSAwO1xuICB9XG4gIHJldHVybiBuO1xufTtcblAuZGl2aWRlZEJ5ID0gUC5kaXYgPSBmdW5jdGlvbih5KSB7XG4gIHJldHVybiBkaXZpZGUodGhpcywgbmV3IHRoaXMuY29uc3RydWN0b3IoeSkpO1xufTtcblAuZGl2aWRlZFRvSW50ZWdlckJ5ID0gUC5kaXZUb0ludCA9IGZ1bmN0aW9uKHkpIHtcbiAgdmFyIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIGZpbmFsaXNlKGRpdmlkZSh4LCBuZXcgQ3Rvcih5KSwgMCwgMSwgMSksIEN0b3IucHJlY2lzaW9uLCBDdG9yLnJvdW5kaW5nKTtcbn07XG5QLmVxdWFscyA9IFAuZXEgPSBmdW5jdGlvbih5KSB7XG4gIHJldHVybiB0aGlzLmNtcCh5KSA9PT0gMDtcbn07XG5QLmZsb29yID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBmaW5hbGlzZShuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKSwgdGhpcy5lICsgMSwgMyk7XG59O1xuUC5ncmVhdGVyVGhhbiA9IFAuZ3QgPSBmdW5jdGlvbih5KSB7XG4gIHJldHVybiB0aGlzLmNtcCh5KSA+IDA7XG59O1xuUC5ncmVhdGVyVGhhbk9yRXF1YWxUbyA9IFAuZ3RlID0gZnVuY3Rpb24oeSkge1xuICB2YXIgayA9IHRoaXMuY21wKHkpO1xuICByZXR1cm4gayA9PSAxIHx8IGsgPT09IDA7XG59O1xuUC5oeXBlcmJvbGljQ29zaW5lID0gUC5jb3NoID0gZnVuY3Rpb24oKSB7XG4gIHZhciBrLCBuLCBwciwgcm0sIGxlbiwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yLCBvbmUgPSBuZXcgQ3RvcigxKTtcbiAgaWYgKCF4LmlzRmluaXRlKCkpXG4gICAgcmV0dXJuIG5ldyBDdG9yKHgucyA/IDEgLyAwIDogTmFOKTtcbiAgaWYgKHguaXNaZXJvKCkpXG4gICAgcmV0dXJuIG9uZTtcbiAgcHIgPSBDdG9yLnByZWNpc2lvbjtcbiAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICBDdG9yLnByZWNpc2lvbiA9IHByICsgTWF0aC5tYXgoeC5lLCB4LnNkKCkpICsgNDtcbiAgQ3Rvci5yb3VuZGluZyA9IDE7XG4gIGxlbiA9IHguZC5sZW5ndGg7XG4gIGlmIChsZW4gPCAzMikge1xuICAgIGsgPSBNYXRoLmNlaWwobGVuIC8gMyk7XG4gICAgbiA9ICgxIC8gdGlueVBvdyg0LCBrKSkudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICBrID0gMTY7XG4gICAgbiA9IFwiMi4zMjgzMDY0MzY1Mzg2OTYyODkwNjI1ZS0xMFwiO1xuICB9XG4gIHggPSB0YXlsb3JTZXJpZXMoQ3RvciwgMSwgeC50aW1lcyhuKSwgbmV3IEN0b3IoMSksIHRydWUpO1xuICB2YXIgY29zaDJfeCwgaSA9IGssIGQ4ID0gbmV3IEN0b3IoOCk7XG4gIGZvciAoOyBpLS07ICkge1xuICAgIGNvc2gyX3ggPSB4LnRpbWVzKHgpO1xuICAgIHggPSBvbmUubWludXMoY29zaDJfeC50aW1lcyhkOC5taW51cyhjb3NoMl94LnRpbWVzKGQ4KSkpKTtcbiAgfVxuICByZXR1cm4gZmluYWxpc2UoeCwgQ3Rvci5wcmVjaXNpb24gPSBwciwgQ3Rvci5yb3VuZGluZyA9IHJtLCB0cnVlKTtcbn07XG5QLmh5cGVyYm9saWNTaW5lID0gUC5zaW5oID0gZnVuY3Rpb24oKSB7XG4gIHZhciBrLCBwciwgcm0sIGxlbiwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBpZiAoIXguaXNGaW5pdGUoKSB8fCB4LmlzWmVybygpKVxuICAgIHJldHVybiBuZXcgQ3Rvcih4KTtcbiAgcHIgPSBDdG9yLnByZWNpc2lvbjtcbiAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICBDdG9yLnByZWNpc2lvbiA9IHByICsgTWF0aC5tYXgoeC5lLCB4LnNkKCkpICsgNDtcbiAgQ3Rvci5yb3VuZGluZyA9IDE7XG4gIGxlbiA9IHguZC5sZW5ndGg7XG4gIGlmIChsZW4gPCAzKSB7XG4gICAgeCA9IHRheWxvclNlcmllcyhDdG9yLCAyLCB4LCB4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBrID0gMS40ICogTWF0aC5zcXJ0KGxlbik7XG4gICAgayA9IGsgPiAxNiA/IDE2IDogayB8IDA7XG4gICAgeCA9IHgudGltZXMoMSAvIHRpbnlQb3coNSwgaykpO1xuICAgIHggPSB0YXlsb3JTZXJpZXMoQ3RvciwgMiwgeCwgeCwgdHJ1ZSk7XG4gICAgdmFyIHNpbmgyX3gsIGQ1ID0gbmV3IEN0b3IoNSksIGQxNiA9IG5ldyBDdG9yKDE2KSwgZDIwID0gbmV3IEN0b3IoMjApO1xuICAgIGZvciAoOyBrLS07ICkge1xuICAgICAgc2luaDJfeCA9IHgudGltZXMoeCk7XG4gICAgICB4ID0geC50aW1lcyhkNS5wbHVzKHNpbmgyX3gudGltZXMoZDE2LnRpbWVzKHNpbmgyX3gpLnBsdXMoZDIwKSkpKTtcbiAgICB9XG4gIH1cbiAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcbiAgQ3Rvci5yb3VuZGluZyA9IHJtO1xuICByZXR1cm4gZmluYWxpc2UoeCwgcHIsIHJtLCB0cnVlKTtcbn07XG5QLmh5cGVyYm9saWNUYW5nZW50ID0gUC50YW5oID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwciwgcm0sIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgaWYgKCF4LmlzRmluaXRlKCkpXG4gICAgcmV0dXJuIG5ldyBDdG9yKHgucyk7XG4gIGlmICh4LmlzWmVybygpKVxuICAgIHJldHVybiBuZXcgQ3Rvcih4KTtcbiAgcHIgPSBDdG9yLnByZWNpc2lvbjtcbiAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICBDdG9yLnByZWNpc2lvbiA9IHByICsgNztcbiAgQ3Rvci5yb3VuZGluZyA9IDE7XG4gIHJldHVybiBkaXZpZGUoeC5zaW5oKCksIHguY29zaCgpLCBDdG9yLnByZWNpc2lvbiA9IHByLCBDdG9yLnJvdW5kaW5nID0gcm0pO1xufTtcblAuaW52ZXJzZUNvc2luZSA9IFAuYWNvcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaGFsZlBpLCB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3IsIGsgPSB4LmFicygpLmNtcCgxKSwgcHIgPSBDdG9yLnByZWNpc2lvbiwgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICBpZiAoayAhPT0gLTEpIHtcbiAgICByZXR1cm4gayA9PT0gMCA/IHguaXNOZWcoKSA/IGdldFBpKEN0b3IsIHByLCBybSkgOiBuZXcgQ3RvcigwKSA6IG5ldyBDdG9yKE5hTik7XG4gIH1cbiAgaWYgKHguaXNaZXJvKCkpXG4gICAgcmV0dXJuIGdldFBpKEN0b3IsIHByICsgNCwgcm0pLnRpbWVzKDAuNSk7XG4gIEN0b3IucHJlY2lzaW9uID0gcHIgKyA2O1xuICBDdG9yLnJvdW5kaW5nID0gMTtcbiAgeCA9IHguYXNpbigpO1xuICBoYWxmUGkgPSBnZXRQaShDdG9yLCBwciArIDQsIHJtKS50aW1lcygwLjUpO1xuICBDdG9yLnByZWNpc2lvbiA9IHByO1xuICBDdG9yLnJvdW5kaW5nID0gcm07XG4gIHJldHVybiBoYWxmUGkubWludXMoeCk7XG59O1xuUC5pbnZlcnNlSHlwZXJib2xpY0Nvc2luZSA9IFAuYWNvc2ggPSBmdW5jdGlvbigpIHtcbiAgdmFyIHByLCBybSwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBpZiAoeC5sdGUoMSkpXG4gICAgcmV0dXJuIG5ldyBDdG9yKHguZXEoMSkgPyAwIDogTmFOKTtcbiAgaWYgKCF4LmlzRmluaXRlKCkpXG4gICAgcmV0dXJuIG5ldyBDdG9yKHgpO1xuICBwciA9IEN0b3IucHJlY2lzaW9uO1xuICBybSA9IEN0b3Iucm91bmRpbmc7XG4gIEN0b3IucHJlY2lzaW9uID0gcHIgKyBNYXRoLm1heChNYXRoLmFicyh4LmUpLCB4LnNkKCkpICsgNDtcbiAgQ3Rvci5yb3VuZGluZyA9IDE7XG4gIGV4dGVybmFsID0gZmFsc2U7XG4gIHggPSB4LnRpbWVzKHgpLm1pbnVzKDEpLnNxcnQoKS5wbHVzKHgpO1xuICBleHRlcm5hbCA9IHRydWU7XG4gIEN0b3IucHJlY2lzaW9uID0gcHI7XG4gIEN0b3Iucm91bmRpbmcgPSBybTtcbiAgcmV0dXJuIHgubG4oKTtcbn07XG5QLmludmVyc2VIeXBlcmJvbGljU2luZSA9IFAuYXNpbmggPSBmdW5jdGlvbigpIHtcbiAgdmFyIHByLCBybSwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBpZiAoIXguaXNGaW5pdGUoKSB8fCB4LmlzWmVybygpKVxuICAgIHJldHVybiBuZXcgQ3Rvcih4KTtcbiAgcHIgPSBDdG9yLnByZWNpc2lvbjtcbiAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICBDdG9yLnByZWNpc2lvbiA9IHByICsgMiAqIE1hdGgubWF4KE1hdGguYWJzKHguZSksIHguc2QoKSkgKyA2O1xuICBDdG9yLnJvdW5kaW5nID0gMTtcbiAgZXh0ZXJuYWwgPSBmYWxzZTtcbiAgeCA9IHgudGltZXMoeCkucGx1cygxKS5zcXJ0KCkucGx1cyh4KTtcbiAgZXh0ZXJuYWwgPSB0cnVlO1xuICBDdG9yLnByZWNpc2lvbiA9IHByO1xuICBDdG9yLnJvdW5kaW5nID0gcm07XG4gIHJldHVybiB4LmxuKCk7XG59O1xuUC5pbnZlcnNlSHlwZXJib2xpY1RhbmdlbnQgPSBQLmF0YW5oID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwciwgcm0sIHdwciwgeHNkLCB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3I7XG4gIGlmICgheC5pc0Zpbml0ZSgpKVxuICAgIHJldHVybiBuZXcgQ3RvcihOYU4pO1xuICBpZiAoeC5lID49IDApXG4gICAgcmV0dXJuIG5ldyBDdG9yKHguYWJzKCkuZXEoMSkgPyB4LnMgLyAwIDogeC5pc1plcm8oKSA/IHggOiBOYU4pO1xuICBwciA9IEN0b3IucHJlY2lzaW9uO1xuICBybSA9IEN0b3Iucm91bmRpbmc7XG4gIHhzZCA9IHguc2QoKTtcbiAgaWYgKE1hdGgubWF4KHhzZCwgcHIpIDwgMiAqIC14LmUgLSAxKVxuICAgIHJldHVybiBmaW5hbGlzZShuZXcgQ3Rvcih4KSwgcHIsIHJtLCB0cnVlKTtcbiAgQ3Rvci5wcmVjaXNpb24gPSB3cHIgPSB4c2QgLSB4LmU7XG4gIHggPSBkaXZpZGUoeC5wbHVzKDEpLCBuZXcgQ3RvcigxKS5taW51cyh4KSwgd3ByICsgcHIsIDEpO1xuICBDdG9yLnByZWNpc2lvbiA9IHByICsgNDtcbiAgQ3Rvci5yb3VuZGluZyA9IDE7XG4gIHggPSB4LmxuKCk7XG4gIEN0b3IucHJlY2lzaW9uID0gcHI7XG4gIEN0b3Iucm91bmRpbmcgPSBybTtcbiAgcmV0dXJuIHgudGltZXMoMC41KTtcbn07XG5QLmludmVyc2VTaW5lID0gUC5hc2luID0gZnVuY3Rpb24oKSB7XG4gIHZhciBoYWxmUGksIGssIHByLCBybSwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBpZiAoeC5pc1plcm8oKSlcbiAgICByZXR1cm4gbmV3IEN0b3IoeCk7XG4gIGsgPSB4LmFicygpLmNtcCgxKTtcbiAgcHIgPSBDdG9yLnByZWNpc2lvbjtcbiAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICBpZiAoayAhPT0gLTEpIHtcbiAgICBpZiAoayA9PT0gMCkge1xuICAgICAgaGFsZlBpID0gZ2V0UGkoQ3RvciwgcHIgKyA0LCBybSkudGltZXMoMC41KTtcbiAgICAgIGhhbGZQaS5zID0geC5zO1xuICAgICAgcmV0dXJuIGhhbGZQaTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDdG9yKE5hTik7XG4gIH1cbiAgQ3Rvci5wcmVjaXNpb24gPSBwciArIDY7XG4gIEN0b3Iucm91bmRpbmcgPSAxO1xuICB4ID0geC5kaXYobmV3IEN0b3IoMSkubWludXMoeC50aW1lcyh4KSkuc3FydCgpLnBsdXMoMSkpLmF0YW4oKTtcbiAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcbiAgQ3Rvci5yb3VuZGluZyA9IHJtO1xuICByZXR1cm4geC50aW1lcygyKTtcbn07XG5QLmludmVyc2VUYW5nZW50ID0gUC5hdGFuID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpLCBqLCBrLCBuLCBweCwgdCwgciwgd3ByLCB4MiwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yLCBwciA9IEN0b3IucHJlY2lzaW9uLCBybSA9IEN0b3Iucm91bmRpbmc7XG4gIGlmICgheC5pc0Zpbml0ZSgpKSB7XG4gICAgaWYgKCF4LnMpXG4gICAgICByZXR1cm4gbmV3IEN0b3IoTmFOKTtcbiAgICBpZiAocHIgKyA0IDw9IFBJX1BSRUNJU0lPTikge1xuICAgICAgciA9IGdldFBpKEN0b3IsIHByICsgNCwgcm0pLnRpbWVzKDAuNSk7XG4gICAgICByLnMgPSB4LnM7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoeC5pc1plcm8oKSkge1xuICAgIHJldHVybiBuZXcgQ3Rvcih4KTtcbiAgfSBlbHNlIGlmICh4LmFicygpLmVxKDEpICYmIHByICsgNCA8PSBQSV9QUkVDSVNJT04pIHtcbiAgICByID0gZ2V0UGkoQ3RvciwgcHIgKyA0LCBybSkudGltZXMoMC4yNSk7XG4gICAgci5zID0geC5zO1xuICAgIHJldHVybiByO1xuICB9XG4gIEN0b3IucHJlY2lzaW9uID0gd3ByID0gcHIgKyAxMDtcbiAgQ3Rvci5yb3VuZGluZyA9IDE7XG4gIGsgPSBNYXRoLm1pbigyOCwgd3ByIC8gTE9HX0JBU0UgKyAyIHwgMCk7XG4gIGZvciAoaSA9IGs7IGk7IC0taSlcbiAgICB4ID0geC5kaXYoeC50aW1lcyh4KS5wbHVzKDEpLnNxcnQoKS5wbHVzKDEpKTtcbiAgZXh0ZXJuYWwgPSBmYWxzZTtcbiAgaiA9IE1hdGguY2VpbCh3cHIgLyBMT0dfQkFTRSk7XG4gIG4gPSAxO1xuICB4MiA9IHgudGltZXMoeCk7XG4gIHIgPSBuZXcgQ3Rvcih4KTtcbiAgcHggPSB4O1xuICBmb3IgKDsgaSAhPT0gLTE7ICkge1xuICAgIHB4ID0gcHgudGltZXMoeDIpO1xuICAgIHQgPSByLm1pbnVzKHB4LmRpdihuICs9IDIpKTtcbiAgICBweCA9IHB4LnRpbWVzKHgyKTtcbiAgICByID0gdC5wbHVzKHB4LmRpdihuICs9IDIpKTtcbiAgICBpZiAoci5kW2pdICE9PSB2b2lkIDApXG4gICAgICBmb3IgKGkgPSBqOyByLmRbaV0gPT09IHQuZFtpXSAmJiBpLS07IClcbiAgICAgICAgO1xuICB9XG4gIGlmIChrKVxuICAgIHIgPSByLnRpbWVzKDIgPDwgayAtIDEpO1xuICBleHRlcm5hbCA9IHRydWU7XG4gIHJldHVybiBmaW5hbGlzZShyLCBDdG9yLnByZWNpc2lvbiA9IHByLCBDdG9yLnJvdW5kaW5nID0gcm0sIHRydWUpO1xufTtcblAuaXNGaW5pdGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICEhdGhpcy5kO1xufTtcblAuaXNJbnRlZ2VyID0gUC5pc0ludCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gISF0aGlzLmQgJiYgbWF0aGZsb29yKHRoaXMuZSAvIExPR19CQVNFKSA+IHRoaXMuZC5sZW5ndGggLSAyO1xufTtcblAuaXNOYU4gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLnM7XG59O1xuUC5pc05lZ2F0aXZlID0gUC5pc05lZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zIDwgMDtcbn07XG5QLmlzUG9zaXRpdmUgPSBQLmlzUG9zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnMgPiAwO1xufTtcblAuaXNaZXJvID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhIXRoaXMuZCAmJiB0aGlzLmRbMF0gPT09IDA7XG59O1xuUC5sZXNzVGhhbiA9IFAubHQgPSBmdW5jdGlvbih5KSB7XG4gIHJldHVybiB0aGlzLmNtcCh5KSA8IDA7XG59O1xuUC5sZXNzVGhhbk9yRXF1YWxUbyA9IFAubHRlID0gZnVuY3Rpb24oeSkge1xuICByZXR1cm4gdGhpcy5jbXAoeSkgPCAxO1xufTtcblAubG9nYXJpdGhtID0gUC5sb2cgPSBmdW5jdGlvbihiYXNlKSB7XG4gIHZhciBpc0Jhc2UxMCwgZCwgZGVub21pbmF0b3IsIGssIGluZiwgbnVtLCBzZCwgciwgYXJnID0gdGhpcywgQ3RvciA9IGFyZy5jb25zdHJ1Y3RvciwgcHIgPSBDdG9yLnByZWNpc2lvbiwgcm0gPSBDdG9yLnJvdW5kaW5nLCBndWFyZCA9IDU7XG4gIGlmIChiYXNlID09IG51bGwpIHtcbiAgICBiYXNlID0gbmV3IEN0b3IoMTApO1xuICAgIGlzQmFzZTEwID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBiYXNlID0gbmV3IEN0b3IoYmFzZSk7XG4gICAgZCA9IGJhc2UuZDtcbiAgICBpZiAoYmFzZS5zIDwgMCB8fCAhZCB8fCAhZFswXSB8fCBiYXNlLmVxKDEpKVxuICAgICAgcmV0dXJuIG5ldyBDdG9yKE5hTik7XG4gICAgaXNCYXNlMTAgPSBiYXNlLmVxKDEwKTtcbiAgfVxuICBkID0gYXJnLmQ7XG4gIGlmIChhcmcucyA8IDAgfHwgIWQgfHwgIWRbMF0gfHwgYXJnLmVxKDEpKSB7XG4gICAgcmV0dXJuIG5ldyBDdG9yKGQgJiYgIWRbMF0gPyAtMSAvIDAgOiBhcmcucyAhPSAxID8gTmFOIDogZCA/IDAgOiAxIC8gMCk7XG4gIH1cbiAgaWYgKGlzQmFzZTEwKSB7XG4gICAgaWYgKGQubGVuZ3RoID4gMSkge1xuICAgICAgaW5mID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChrID0gZFswXTsgayAlIDEwID09PSAwOyApXG4gICAgICAgIGsgLz0gMTA7XG4gICAgICBpbmYgPSBrICE9PSAxO1xuICAgIH1cbiAgfVxuICBleHRlcm5hbCA9IGZhbHNlO1xuICBzZCA9IHByICsgZ3VhcmQ7XG4gIG51bSA9IG5hdHVyYWxMb2dhcml0aG0oYXJnLCBzZCk7XG4gIGRlbm9taW5hdG9yID0gaXNCYXNlMTAgPyBnZXRMbjEwKEN0b3IsIHNkICsgMTApIDogbmF0dXJhbExvZ2FyaXRobShiYXNlLCBzZCk7XG4gIHIgPSBkaXZpZGUobnVtLCBkZW5vbWluYXRvciwgc2QsIDEpO1xuICBpZiAoY2hlY2tSb3VuZGluZ0RpZ2l0cyhyLmQsIGsgPSBwciwgcm0pKSB7XG4gICAgZG8ge1xuICAgICAgc2QgKz0gMTA7XG4gICAgICBudW0gPSBuYXR1cmFsTG9nYXJpdGhtKGFyZywgc2QpO1xuICAgICAgZGVub21pbmF0b3IgPSBpc0Jhc2UxMCA/IGdldExuMTAoQ3Rvciwgc2QgKyAxMCkgOiBuYXR1cmFsTG9nYXJpdGhtKGJhc2UsIHNkKTtcbiAgICAgIHIgPSBkaXZpZGUobnVtLCBkZW5vbWluYXRvciwgc2QsIDEpO1xuICAgICAgaWYgKCFpbmYpIHtcbiAgICAgICAgaWYgKCtkaWdpdHNUb1N0cmluZyhyLmQpLnNsaWNlKGsgKyAxLCBrICsgMTUpICsgMSA9PSAxZTE0KSB7XG4gICAgICAgICAgciA9IGZpbmFsaXNlKHIsIHByICsgMSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSB3aGlsZSAoY2hlY2tSb3VuZGluZ0RpZ2l0cyhyLmQsIGsgKz0gMTAsIHJtKSk7XG4gIH1cbiAgZXh0ZXJuYWwgPSB0cnVlO1xuICByZXR1cm4gZmluYWxpc2UociwgcHIsIHJtKTtcbn07XG5QLm1pbnVzID0gUC5zdWIgPSBmdW5jdGlvbih5KSB7XG4gIHZhciBkLCBlLCBpLCBqLCBrLCBsZW4sIHByLCBybSwgeGQsIHhlLCB4TFR5LCB5ZCwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICB5ID0gbmV3IEN0b3IoeSk7XG4gIGlmICgheC5kIHx8ICF5LmQpIHtcbiAgICBpZiAoIXgucyB8fCAheS5zKVxuICAgICAgeSA9IG5ldyBDdG9yKE5hTik7XG4gICAgZWxzZSBpZiAoeC5kKVxuICAgICAgeS5zID0gLXkucztcbiAgICBlbHNlXG4gICAgICB5ID0gbmV3IEN0b3IoeS5kIHx8IHgucyAhPT0geS5zID8geCA6IE5hTik7XG4gICAgcmV0dXJuIHk7XG4gIH1cbiAgaWYgKHgucyAhPSB5LnMpIHtcbiAgICB5LnMgPSAteS5zO1xuICAgIHJldHVybiB4LnBsdXMoeSk7XG4gIH1cbiAgeGQgPSB4LmQ7XG4gIHlkID0geS5kO1xuICBwciA9IEN0b3IucHJlY2lzaW9uO1xuICBybSA9IEN0b3Iucm91bmRpbmc7XG4gIGlmICgheGRbMF0gfHwgIXlkWzBdKSB7XG4gICAgaWYgKHlkWzBdKVxuICAgICAgeS5zID0gLXkucztcbiAgICBlbHNlIGlmICh4ZFswXSlcbiAgICAgIHkgPSBuZXcgQ3Rvcih4KTtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gbmV3IEN0b3Iocm0gPT09IDMgPyAtMCA6IDApO1xuICAgIHJldHVybiBleHRlcm5hbCA/IGZpbmFsaXNlKHksIHByLCBybSkgOiB5O1xuICB9XG4gIGUgPSBtYXRoZmxvb3IoeS5lIC8gTE9HX0JBU0UpO1xuICB4ZSA9IG1hdGhmbG9vcih4LmUgLyBMT0dfQkFTRSk7XG4gIHhkID0geGQuc2xpY2UoKTtcbiAgayA9IHhlIC0gZTtcbiAgaWYgKGspIHtcbiAgICB4TFR5ID0gayA8IDA7XG4gICAgaWYgKHhMVHkpIHtcbiAgICAgIGQgPSB4ZDtcbiAgICAgIGsgPSAtaztcbiAgICAgIGxlbiA9IHlkLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgZCA9IHlkO1xuICAgICAgZSA9IHhlO1xuICAgICAgbGVuID0geGQubGVuZ3RoO1xuICAgIH1cbiAgICBpID0gTWF0aC5tYXgoTWF0aC5jZWlsKHByIC8gTE9HX0JBU0UpLCBsZW4pICsgMjtcbiAgICBpZiAoayA+IGkpIHtcbiAgICAgIGsgPSBpO1xuICAgICAgZC5sZW5ndGggPSAxO1xuICAgIH1cbiAgICBkLnJldmVyc2UoKTtcbiAgICBmb3IgKGkgPSBrOyBpLS07IClcbiAgICAgIGQucHVzaCgwKTtcbiAgICBkLnJldmVyc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBpID0geGQubGVuZ3RoO1xuICAgIGxlbiA9IHlkLmxlbmd0aDtcbiAgICB4TFR5ID0gaSA8IGxlbjtcbiAgICBpZiAoeExUeSlcbiAgICAgIGxlbiA9IGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoeGRbaV0gIT0geWRbaV0pIHtcbiAgICAgICAgeExUeSA9IHhkW2ldIDwgeWRbaV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBrID0gMDtcbiAgfVxuICBpZiAoeExUeSkge1xuICAgIGQgPSB4ZDtcbiAgICB4ZCA9IHlkO1xuICAgIHlkID0gZDtcbiAgICB5LnMgPSAteS5zO1xuICB9XG4gIGxlbiA9IHhkLmxlbmd0aDtcbiAgZm9yIChpID0geWQubGVuZ3RoIC0gbGVuOyBpID4gMDsgLS1pKVxuICAgIHhkW2xlbisrXSA9IDA7XG4gIGZvciAoaSA9IHlkLmxlbmd0aDsgaSA+IGs7ICkge1xuICAgIGlmICh4ZFstLWldIDwgeWRbaV0pIHtcbiAgICAgIGZvciAoaiA9IGk7IGogJiYgeGRbLS1qXSA9PT0gMDsgKVxuICAgICAgICB4ZFtqXSA9IEJBU0UgLSAxO1xuICAgICAgLS14ZFtqXTtcbiAgICAgIHhkW2ldICs9IEJBU0U7XG4gICAgfVxuICAgIHhkW2ldIC09IHlkW2ldO1xuICB9XG4gIGZvciAoOyB4ZFstLWxlbl0gPT09IDA7IClcbiAgICB4ZC5wb3AoKTtcbiAgZm9yICg7IHhkWzBdID09PSAwOyB4ZC5zaGlmdCgpKVxuICAgIC0tZTtcbiAgaWYgKCF4ZFswXSlcbiAgICByZXR1cm4gbmV3IEN0b3Iocm0gPT09IDMgPyAtMCA6IDApO1xuICB5LmQgPSB4ZDtcbiAgeS5lID0gZ2V0QmFzZTEwRXhwb25lbnQoeGQsIGUpO1xuICByZXR1cm4gZXh0ZXJuYWwgPyBmaW5hbGlzZSh5LCBwciwgcm0pIDogeTtcbn07XG5QLm1vZHVsbyA9IFAubW9kID0gZnVuY3Rpb24oeSkge1xuICB2YXIgcSwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICB5ID0gbmV3IEN0b3IoeSk7XG4gIGlmICgheC5kIHx8ICF5LnMgfHwgeS5kICYmICF5LmRbMF0pXG4gICAgcmV0dXJuIG5ldyBDdG9yKE5hTik7XG4gIGlmICgheS5kIHx8IHguZCAmJiAheC5kWzBdKSB7XG4gICAgcmV0dXJuIGZpbmFsaXNlKG5ldyBDdG9yKHgpLCBDdG9yLnByZWNpc2lvbiwgQ3Rvci5yb3VuZGluZyk7XG4gIH1cbiAgZXh0ZXJuYWwgPSBmYWxzZTtcbiAgaWYgKEN0b3IubW9kdWxvID09IDkpIHtcbiAgICBxID0gZGl2aWRlKHgsIHkuYWJzKCksIDAsIDMsIDEpO1xuICAgIHEucyAqPSB5LnM7XG4gIH0gZWxzZSB7XG4gICAgcSA9IGRpdmlkZSh4LCB5LCAwLCBDdG9yLm1vZHVsbywgMSk7XG4gIH1cbiAgcSA9IHEudGltZXMoeSk7XG4gIGV4dGVybmFsID0gdHJ1ZTtcbiAgcmV0dXJuIHgubWludXMocSk7XG59O1xuUC5uYXR1cmFsRXhwb25lbnRpYWwgPSBQLmV4cCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmF0dXJhbEV4cG9uZW50aWFsKHRoaXMpO1xufTtcblAubmF0dXJhbExvZ2FyaXRobSA9IFAubG4gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5hdHVyYWxMb2dhcml0aG0odGhpcyk7XG59O1xuUC5uZWdhdGVkID0gUC5uZWcgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKTtcbiAgeC5zID0gLXgucztcbiAgcmV0dXJuIGZpbmFsaXNlKHgpO1xufTtcblAucGx1cyA9IFAuYWRkID0gZnVuY3Rpb24oeSkge1xuICB2YXIgY2FycnksIGQsIGUsIGksIGssIGxlbiwgcHIsIHJtLCB4ZCwgeWQsIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgeSA9IG5ldyBDdG9yKHkpO1xuICBpZiAoIXguZCB8fCAheS5kKSB7XG4gICAgaWYgKCF4LnMgfHwgIXkucylcbiAgICAgIHkgPSBuZXcgQ3RvcihOYU4pO1xuICAgIGVsc2UgaWYgKCF4LmQpXG4gICAgICB5ID0gbmV3IEN0b3IoeS5kIHx8IHgucyA9PT0geS5zID8geCA6IE5hTik7XG4gICAgcmV0dXJuIHk7XG4gIH1cbiAgaWYgKHgucyAhPSB5LnMpIHtcbiAgICB5LnMgPSAteS5zO1xuICAgIHJldHVybiB4Lm1pbnVzKHkpO1xuICB9XG4gIHhkID0geC5kO1xuICB5ZCA9IHkuZDtcbiAgcHIgPSBDdG9yLnByZWNpc2lvbjtcbiAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICBpZiAoIXhkWzBdIHx8ICF5ZFswXSkge1xuICAgIGlmICgheWRbMF0pXG4gICAgICB5ID0gbmV3IEN0b3IoeCk7XG4gICAgcmV0dXJuIGV4dGVybmFsID8gZmluYWxpc2UoeSwgcHIsIHJtKSA6IHk7XG4gIH1cbiAgayA9IG1hdGhmbG9vcih4LmUgLyBMT0dfQkFTRSk7XG4gIGUgPSBtYXRoZmxvb3IoeS5lIC8gTE9HX0JBU0UpO1xuICB4ZCA9IHhkLnNsaWNlKCk7XG4gIGkgPSBrIC0gZTtcbiAgaWYgKGkpIHtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIGQgPSB4ZDtcbiAgICAgIGkgPSAtaTtcbiAgICAgIGxlbiA9IHlkLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgZCA9IHlkO1xuICAgICAgZSA9IGs7XG4gICAgICBsZW4gPSB4ZC5sZW5ndGg7XG4gICAgfVxuICAgIGsgPSBNYXRoLmNlaWwocHIgLyBMT0dfQkFTRSk7XG4gICAgbGVuID0gayA+IGxlbiA/IGsgKyAxIDogbGVuICsgMTtcbiAgICBpZiAoaSA+IGxlbikge1xuICAgICAgaSA9IGxlbjtcbiAgICAgIGQubGVuZ3RoID0gMTtcbiAgICB9XG4gICAgZC5yZXZlcnNlKCk7XG4gICAgZm9yICg7IGktLTsgKVxuICAgICAgZC5wdXNoKDApO1xuICAgIGQucmV2ZXJzZSgpO1xuICB9XG4gIGxlbiA9IHhkLmxlbmd0aDtcbiAgaSA9IHlkLmxlbmd0aDtcbiAgaWYgKGxlbiAtIGkgPCAwKSB7XG4gICAgaSA9IGxlbjtcbiAgICBkID0geWQ7XG4gICAgeWQgPSB4ZDtcbiAgICB4ZCA9IGQ7XG4gIH1cbiAgZm9yIChjYXJyeSA9IDA7IGk7ICkge1xuICAgIGNhcnJ5ID0gKHhkWy0taV0gPSB4ZFtpXSArIHlkW2ldICsgY2FycnkpIC8gQkFTRSB8IDA7XG4gICAgeGRbaV0gJT0gQkFTRTtcbiAgfVxuICBpZiAoY2FycnkpIHtcbiAgICB4ZC51bnNoaWZ0KGNhcnJ5KTtcbiAgICArK2U7XG4gIH1cbiAgZm9yIChsZW4gPSB4ZC5sZW5ndGg7IHhkWy0tbGVuXSA9PSAwOyApXG4gICAgeGQucG9wKCk7XG4gIHkuZCA9IHhkO1xuICB5LmUgPSBnZXRCYXNlMTBFeHBvbmVudCh4ZCwgZSk7XG4gIHJldHVybiBleHRlcm5hbCA/IGZpbmFsaXNlKHksIHByLCBybSkgOiB5O1xufTtcblAucHJlY2lzaW9uID0gUC5zZCA9IGZ1bmN0aW9uKHopIHtcbiAgdmFyIGssIHggPSB0aGlzO1xuICBpZiAoeiAhPT0gdm9pZCAwICYmIHogIT09ICEheiAmJiB6ICE9PSAxICYmIHogIT09IDApXG4gICAgdGhyb3cgRXJyb3IoaW52YWxpZEFyZ3VtZW50ICsgeik7XG4gIGlmICh4LmQpIHtcbiAgICBrID0gZ2V0UHJlY2lzaW9uKHguZCk7XG4gICAgaWYgKHogJiYgeC5lICsgMSA+IGspXG4gICAgICBrID0geC5lICsgMTtcbiAgfSBlbHNlIHtcbiAgICBrID0gTmFOO1xuICB9XG4gIHJldHVybiBrO1xufTtcblAucm91bmQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIGZpbmFsaXNlKG5ldyBDdG9yKHgpLCB4LmUgKyAxLCBDdG9yLnJvdW5kaW5nKTtcbn07XG5QLnNpbmUgPSBQLnNpbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcHIsIHJtLCB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3I7XG4gIGlmICgheC5pc0Zpbml0ZSgpKVxuICAgIHJldHVybiBuZXcgQ3RvcihOYU4pO1xuICBpZiAoeC5pc1plcm8oKSlcbiAgICByZXR1cm4gbmV3IEN0b3IoeCk7XG4gIHByID0gQ3Rvci5wcmVjaXNpb247XG4gIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgQ3Rvci5wcmVjaXNpb24gPSBwciArIE1hdGgubWF4KHguZSwgeC5zZCgpKSArIExPR19CQVNFO1xuICBDdG9yLnJvdW5kaW5nID0gMTtcbiAgeCA9IHNpbmUoQ3RvciwgdG9MZXNzVGhhbkhhbGZQaShDdG9yLCB4KSk7XG4gIEN0b3IucHJlY2lzaW9uID0gcHI7XG4gIEN0b3Iucm91bmRpbmcgPSBybTtcbiAgcmV0dXJuIGZpbmFsaXNlKHF1YWRyYW50ID4gMiA/IHgubmVnKCkgOiB4LCBwciwgcm0sIHRydWUpO1xufTtcblAuc3F1YXJlUm9vdCA9IFAuc3FydCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbSwgbiwgc2QsIHIsIHJlcCwgdCwgeCA9IHRoaXMsIGQgPSB4LmQsIGUgPSB4LmUsIHMgPSB4LnMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBpZiAocyAhPT0gMSB8fCAhZCB8fCAhZFswXSkge1xuICAgIHJldHVybiBuZXcgQ3RvcighcyB8fCBzIDwgMCAmJiAoIWQgfHwgZFswXSkgPyBOYU4gOiBkID8geCA6IDEgLyAwKTtcbiAgfVxuICBleHRlcm5hbCA9IGZhbHNlO1xuICBzID0gTWF0aC5zcXJ0KCt4KTtcbiAgaWYgKHMgPT0gMCB8fCBzID09IDEgLyAwKSB7XG4gICAgbiA9IGRpZ2l0c1RvU3RyaW5nKGQpO1xuICAgIGlmICgobi5sZW5ndGggKyBlKSAlIDIgPT0gMClcbiAgICAgIG4gKz0gXCIwXCI7XG4gICAgcyA9IE1hdGguc3FydChuKTtcbiAgICBlID0gbWF0aGZsb29yKChlICsgMSkgLyAyKSAtIChlIDwgMCB8fCBlICUgMik7XG4gICAgaWYgKHMgPT0gMSAvIDApIHtcbiAgICAgIG4gPSBcIjVlXCIgKyBlO1xuICAgIH0gZWxzZSB7XG4gICAgICBuID0gcy50b0V4cG9uZW50aWFsKCk7XG4gICAgICBuID0gbi5zbGljZSgwLCBuLmluZGV4T2YoXCJlXCIpICsgMSkgKyBlO1xuICAgIH1cbiAgICByID0gbmV3IEN0b3Iobik7XG4gIH0gZWxzZSB7XG4gICAgciA9IG5ldyBDdG9yKHMudG9TdHJpbmcoKSk7XG4gIH1cbiAgc2QgPSAoZSA9IEN0b3IucHJlY2lzaW9uKSArIDM7XG4gIGZvciAoOyA7ICkge1xuICAgIHQgPSByO1xuICAgIHIgPSB0LnBsdXMoZGl2aWRlKHgsIHQsIHNkICsgMiwgMSkpLnRpbWVzKDAuNSk7XG4gICAgaWYgKGRpZ2l0c1RvU3RyaW5nKHQuZCkuc2xpY2UoMCwgc2QpID09PSAobiA9IGRpZ2l0c1RvU3RyaW5nKHIuZCkpLnNsaWNlKDAsIHNkKSkge1xuICAgICAgbiA9IG4uc2xpY2Uoc2QgLSAzLCBzZCArIDEpO1xuICAgICAgaWYgKG4gPT0gXCI5OTk5XCIgfHwgIXJlcCAmJiBuID09IFwiNDk5OVwiKSB7XG4gICAgICAgIGlmICghcmVwKSB7XG4gICAgICAgICAgZmluYWxpc2UodCwgZSArIDEsIDApO1xuICAgICAgICAgIGlmICh0LnRpbWVzKHQpLmVxKHgpKSB7XG4gICAgICAgICAgICByID0gdDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZCArPSA0O1xuICAgICAgICByZXAgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCErbiB8fCAhK24uc2xpY2UoMSkgJiYgbi5jaGFyQXQoMCkgPT0gXCI1XCIpIHtcbiAgICAgICAgICBmaW5hbGlzZShyLCBlICsgMSwgMSk7XG4gICAgICAgICAgbSA9ICFyLnRpbWVzKHIpLmVxKHgpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBleHRlcm5hbCA9IHRydWU7XG4gIHJldHVybiBmaW5hbGlzZShyLCBlLCBDdG9yLnJvdW5kaW5nLCBtKTtcbn07XG5QLnRhbmdlbnQgPSBQLnRhbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcHIsIHJtLCB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3I7XG4gIGlmICgheC5pc0Zpbml0ZSgpKVxuICAgIHJldHVybiBuZXcgQ3RvcihOYU4pO1xuICBpZiAoeC5pc1plcm8oKSlcbiAgICByZXR1cm4gbmV3IEN0b3IoeCk7XG4gIHByID0gQ3Rvci5wcmVjaXNpb247XG4gIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgQ3Rvci5wcmVjaXNpb24gPSBwciArIDEwO1xuICBDdG9yLnJvdW5kaW5nID0gMTtcbiAgeCA9IHguc2luKCk7XG4gIHgucyA9IDE7XG4gIHggPSBkaXZpZGUoeCwgbmV3IEN0b3IoMSkubWludXMoeC50aW1lcyh4KSkuc3FydCgpLCBwciArIDEwLCAwKTtcbiAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcbiAgQ3Rvci5yb3VuZGluZyA9IHJtO1xuICByZXR1cm4gZmluYWxpc2UocXVhZHJhbnQgPT0gMiB8fCBxdWFkcmFudCA9PSA0ID8geC5uZWcoKSA6IHgsIHByLCBybSwgdHJ1ZSk7XG59O1xuUC50aW1lcyA9IFAubXVsID0gZnVuY3Rpb24oeSkge1xuICB2YXIgY2FycnksIGUsIGksIGssIHIsIHJMLCB0LCB4ZEwsIHlkTCwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yLCB4ZCA9IHguZCwgeWQgPSAoeSA9IG5ldyBDdG9yKHkpKS5kO1xuICB5LnMgKj0geC5zO1xuICBpZiAoIXhkIHx8ICF4ZFswXSB8fCAheWQgfHwgIXlkWzBdKSB7XG4gICAgcmV0dXJuIG5ldyBDdG9yKCF5LnMgfHwgeGQgJiYgIXhkWzBdICYmICF5ZCB8fCB5ZCAmJiAheWRbMF0gJiYgIXhkID8gTmFOIDogIXhkIHx8ICF5ZCA/IHkucyAvIDAgOiB5LnMgKiAwKTtcbiAgfVxuICBlID0gbWF0aGZsb29yKHguZSAvIExPR19CQVNFKSArIG1hdGhmbG9vcih5LmUgLyBMT0dfQkFTRSk7XG4gIHhkTCA9IHhkLmxlbmd0aDtcbiAgeWRMID0geWQubGVuZ3RoO1xuICBpZiAoeGRMIDwgeWRMKSB7XG4gICAgciA9IHhkO1xuICAgIHhkID0geWQ7XG4gICAgeWQgPSByO1xuICAgIHJMID0geGRMO1xuICAgIHhkTCA9IHlkTDtcbiAgICB5ZEwgPSByTDtcbiAgfVxuICByID0gW107XG4gIHJMID0geGRMICsgeWRMO1xuICBmb3IgKGkgPSByTDsgaS0tOyApXG4gICAgci5wdXNoKDApO1xuICBmb3IgKGkgPSB5ZEw7IC0taSA+PSAwOyApIHtcbiAgICBjYXJyeSA9IDA7XG4gICAgZm9yIChrID0geGRMICsgaTsgayA+IGk7ICkge1xuICAgICAgdCA9IHJba10gKyB5ZFtpXSAqIHhkW2sgLSBpIC0gMV0gKyBjYXJyeTtcbiAgICAgIHJbay0tXSA9IHQgJSBCQVNFIHwgMDtcbiAgICAgIGNhcnJ5ID0gdCAvIEJBU0UgfCAwO1xuICAgIH1cbiAgICByW2tdID0gKHJba10gKyBjYXJyeSkgJSBCQVNFIHwgMDtcbiAgfVxuICBmb3IgKDsgIXJbLS1yTF07IClcbiAgICByLnBvcCgpO1xuICBpZiAoY2FycnkpXG4gICAgKytlO1xuICBlbHNlXG4gICAgci5zaGlmdCgpO1xuICB5LmQgPSByO1xuICB5LmUgPSBnZXRCYXNlMTBFeHBvbmVudChyLCBlKTtcbiAgcmV0dXJuIGV4dGVybmFsID8gZmluYWxpc2UoeSwgQ3Rvci5wcmVjaXNpb24sIEN0b3Iucm91bmRpbmcpIDogeTtcbn07XG5QLnRvQmluYXJ5ID0gZnVuY3Rpb24oc2QsIHJtKSB7XG4gIHJldHVybiB0b1N0cmluZ0JpbmFyeSh0aGlzLCAyLCBzZCwgcm0pO1xufTtcblAudG9EZWNpbWFsUGxhY2VzID0gUC50b0RQID0gZnVuY3Rpb24oZHAsIHJtKSB7XG4gIHZhciB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3I7XG4gIHggPSBuZXcgQ3Rvcih4KTtcbiAgaWYgKGRwID09PSB2b2lkIDApXG4gICAgcmV0dXJuIHg7XG4gIGNoZWNrSW50MzIoZHAsIDAsIE1BWF9ESUdJVFMpO1xuICBpZiAocm0gPT09IHZvaWQgMClcbiAgICBybSA9IEN0b3Iucm91bmRpbmc7XG4gIGVsc2VcbiAgICBjaGVja0ludDMyKHJtLCAwLCA4KTtcbiAgcmV0dXJuIGZpbmFsaXNlKHgsIGRwICsgeC5lICsgMSwgcm0pO1xufTtcblAudG9FeHBvbmVudGlhbCA9IGZ1bmN0aW9uKGRwLCBybSkge1xuICB2YXIgc3RyLCB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3I7XG4gIGlmIChkcCA9PT0gdm9pZCAwKSB7XG4gICAgc3RyID0gZmluaXRlVG9TdHJpbmcoeCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgY2hlY2tJbnQzMihkcCwgMCwgTUFYX0RJR0lUUyk7XG4gICAgaWYgKHJtID09PSB2b2lkIDApXG4gICAgICBybSA9IEN0b3Iucm91bmRpbmc7XG4gICAgZWxzZVxuICAgICAgY2hlY2tJbnQzMihybSwgMCwgOCk7XG4gICAgeCA9IGZpbmFsaXNlKG5ldyBDdG9yKHgpLCBkcCArIDEsIHJtKTtcbiAgICBzdHIgPSBmaW5pdGVUb1N0cmluZyh4LCB0cnVlLCBkcCArIDEpO1xuICB9XG4gIHJldHVybiB4LmlzTmVnKCkgJiYgIXguaXNaZXJvKCkgPyBcIi1cIiArIHN0ciA6IHN0cjtcbn07XG5QLnRvRml4ZWQgPSBmdW5jdGlvbihkcCwgcm0pIHtcbiAgdmFyIHN0ciwgeSwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBpZiAoZHAgPT09IHZvaWQgMCkge1xuICAgIHN0ciA9IGZpbml0ZVRvU3RyaW5nKHgpO1xuICB9IGVsc2Uge1xuICAgIGNoZWNrSW50MzIoZHAsIDAsIE1BWF9ESUdJVFMpO1xuICAgIGlmIChybSA9PT0gdm9pZCAwKVxuICAgICAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICAgIGVsc2VcbiAgICAgIGNoZWNrSW50MzIocm0sIDAsIDgpO1xuICAgIHkgPSBmaW5hbGlzZShuZXcgQ3Rvcih4KSwgZHAgKyB4LmUgKyAxLCBybSk7XG4gICAgc3RyID0gZmluaXRlVG9TdHJpbmcoeSwgZmFsc2UsIGRwICsgeS5lICsgMSk7XG4gIH1cbiAgcmV0dXJuIHguaXNOZWcoKSAmJiAheC5pc1plcm8oKSA/IFwiLVwiICsgc3RyIDogc3RyO1xufTtcblAudG9GcmFjdGlvbiA9IGZ1bmN0aW9uKG1heEQpIHtcbiAgdmFyIGQsIGQwLCBkMSwgZDIsIGUsIGssIG4sIG4wLCBuMSwgcHIsIHEsIHIsIHggPSB0aGlzLCB4ZCA9IHguZCwgQ3RvciA9IHguY29uc3RydWN0b3I7XG4gIGlmICgheGQpXG4gICAgcmV0dXJuIG5ldyBDdG9yKHgpO1xuICBuMSA9IGQwID0gbmV3IEN0b3IoMSk7XG4gIGQxID0gbjAgPSBuZXcgQ3RvcigwKTtcbiAgZCA9IG5ldyBDdG9yKGQxKTtcbiAgZSA9IGQuZSA9IGdldFByZWNpc2lvbih4ZCkgLSB4LmUgLSAxO1xuICBrID0gZSAlIExPR19CQVNFO1xuICBkLmRbMF0gPSBtYXRocG93KDEwLCBrIDwgMCA/IExPR19CQVNFICsgayA6IGspO1xuICBpZiAobWF4RCA9PSBudWxsKSB7XG4gICAgbWF4RCA9IGUgPiAwID8gZCA6IG4xO1xuICB9IGVsc2Uge1xuICAgIG4gPSBuZXcgQ3RvcihtYXhEKTtcbiAgICBpZiAoIW4uaXNJbnQoKSB8fCBuLmx0KG4xKSlcbiAgICAgIHRocm93IEVycm9yKGludmFsaWRBcmd1bWVudCArIG4pO1xuICAgIG1heEQgPSBuLmd0KGQpID8gZSA+IDAgPyBkIDogbjEgOiBuO1xuICB9XG4gIGV4dGVybmFsID0gZmFsc2U7XG4gIG4gPSBuZXcgQ3RvcihkaWdpdHNUb1N0cmluZyh4ZCkpO1xuICBwciA9IEN0b3IucHJlY2lzaW9uO1xuICBDdG9yLnByZWNpc2lvbiA9IGUgPSB4ZC5sZW5ndGggKiBMT0dfQkFTRSAqIDI7XG4gIGZvciAoOyA7ICkge1xuICAgIHEgPSBkaXZpZGUobiwgZCwgMCwgMSwgMSk7XG4gICAgZDIgPSBkMC5wbHVzKHEudGltZXMoZDEpKTtcbiAgICBpZiAoZDIuY21wKG1heEQpID09IDEpXG4gICAgICBicmVhaztcbiAgICBkMCA9IGQxO1xuICAgIGQxID0gZDI7XG4gICAgZDIgPSBuMTtcbiAgICBuMSA9IG4wLnBsdXMocS50aW1lcyhkMikpO1xuICAgIG4wID0gZDI7XG4gICAgZDIgPSBkO1xuICAgIGQgPSBuLm1pbnVzKHEudGltZXMoZDIpKTtcbiAgICBuID0gZDI7XG4gIH1cbiAgZDIgPSBkaXZpZGUobWF4RC5taW51cyhkMCksIGQxLCAwLCAxLCAxKTtcbiAgbjAgPSBuMC5wbHVzKGQyLnRpbWVzKG4xKSk7XG4gIGQwID0gZDAucGx1cyhkMi50aW1lcyhkMSkpO1xuICBuMC5zID0gbjEucyA9IHgucztcbiAgciA9IGRpdmlkZShuMSwgZDEsIGUsIDEpLm1pbnVzKHgpLmFicygpLmNtcChkaXZpZGUobjAsIGQwLCBlLCAxKS5taW51cyh4KS5hYnMoKSkgPCAxID8gW24xLCBkMV0gOiBbbjAsIGQwXTtcbiAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcbiAgZXh0ZXJuYWwgPSB0cnVlO1xuICByZXR1cm4gcjtcbn07XG5QLnRvSGV4YWRlY2ltYWwgPSBQLnRvSGV4ID0gZnVuY3Rpb24oc2QsIHJtKSB7XG4gIHJldHVybiB0b1N0cmluZ0JpbmFyeSh0aGlzLCAxNiwgc2QsIHJtKTtcbn07XG5QLnRvTmVhcmVzdCA9IGZ1bmN0aW9uKHksIHJtKSB7XG4gIHZhciB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3I7XG4gIHggPSBuZXcgQ3Rvcih4KTtcbiAgaWYgKHkgPT0gbnVsbCkge1xuICAgIGlmICgheC5kKVxuICAgICAgcmV0dXJuIHg7XG4gICAgeSA9IG5ldyBDdG9yKDEpO1xuICAgIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgfSBlbHNlIHtcbiAgICB5ID0gbmV3IEN0b3IoeSk7XG4gICAgaWYgKHJtID09PSB2b2lkIDApIHtcbiAgICAgIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tJbnQzMihybSwgMCwgOCk7XG4gICAgfVxuICAgIGlmICgheC5kKVxuICAgICAgcmV0dXJuIHkucyA/IHggOiB5O1xuICAgIGlmICgheS5kKSB7XG4gICAgICBpZiAoeS5zKVxuICAgICAgICB5LnMgPSB4LnM7XG4gICAgICByZXR1cm4geTtcbiAgICB9XG4gIH1cbiAgaWYgKHkuZFswXSkge1xuICAgIGV4dGVybmFsID0gZmFsc2U7XG4gICAgeCA9IGRpdmlkZSh4LCB5LCAwLCBybSwgMSkudGltZXMoeSk7XG4gICAgZXh0ZXJuYWwgPSB0cnVlO1xuICAgIGZpbmFsaXNlKHgpO1xuICB9IGVsc2Uge1xuICAgIHkucyA9IHgucztcbiAgICB4ID0geTtcbiAgfVxuICByZXR1cm4geDtcbn07XG5QLnRvTnVtYmVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiArdGhpcztcbn07XG5QLnRvT2N0YWwgPSBmdW5jdGlvbihzZCwgcm0pIHtcbiAgcmV0dXJuIHRvU3RyaW5nQmluYXJ5KHRoaXMsIDgsIHNkLCBybSk7XG59O1xuUC50b1Bvd2VyID0gUC5wb3cgPSBmdW5jdGlvbih5KSB7XG4gIHZhciBlLCBrLCBwciwgciwgcm0sIHMsIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvciwgeW4gPSArKHkgPSBuZXcgQ3Rvcih5KSk7XG4gIGlmICgheC5kIHx8ICF5LmQgfHwgIXguZFswXSB8fCAheS5kWzBdKVxuICAgIHJldHVybiBuZXcgQ3RvcihtYXRocG93KCt4LCB5bikpO1xuICB4ID0gbmV3IEN0b3IoeCk7XG4gIGlmICh4LmVxKDEpKVxuICAgIHJldHVybiB4O1xuICBwciA9IEN0b3IucHJlY2lzaW9uO1xuICBybSA9IEN0b3Iucm91bmRpbmc7XG4gIGlmICh5LmVxKDEpKVxuICAgIHJldHVybiBmaW5hbGlzZSh4LCBwciwgcm0pO1xuICBlID0gbWF0aGZsb29yKHkuZSAvIExPR19CQVNFKTtcbiAgaWYgKGUgPj0geS5kLmxlbmd0aCAtIDEgJiYgKGsgPSB5biA8IDAgPyAteW4gOiB5bikgPD0gTUFYX1NBRkVfSU5URUdFUikge1xuICAgIHIgPSBpbnRQb3coQ3RvciwgeCwgaywgcHIpO1xuICAgIHJldHVybiB5LnMgPCAwID8gbmV3IEN0b3IoMSkuZGl2KHIpIDogZmluYWxpc2UociwgcHIsIHJtKTtcbiAgfVxuICBzID0geC5zO1xuICBpZiAocyA8IDApIHtcbiAgICBpZiAoZSA8IHkuZC5sZW5ndGggLSAxKVxuICAgICAgcmV0dXJuIG5ldyBDdG9yKE5hTik7XG4gICAgaWYgKCh5LmRbZV0gJiAxKSA9PSAwKVxuICAgICAgcyA9IDE7XG4gICAgaWYgKHguZSA9PSAwICYmIHguZFswXSA9PSAxICYmIHguZC5sZW5ndGggPT0gMSkge1xuICAgICAgeC5zID0gcztcbiAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfVxuICBrID0gbWF0aHBvdygreCwgeW4pO1xuICBlID0gayA9PSAwIHx8ICFpc0Zpbml0ZShrKSA/IG1hdGhmbG9vcih5biAqIChNYXRoLmxvZyhcIjAuXCIgKyBkaWdpdHNUb1N0cmluZyh4LmQpKSAvIE1hdGguTE4xMCArIHguZSArIDEpKSA6IG5ldyBDdG9yKGsgKyBcIlwiKS5lO1xuICBpZiAoZSA+IEN0b3IubWF4RSArIDEgfHwgZSA8IEN0b3IubWluRSAtIDEpXG4gICAgcmV0dXJuIG5ldyBDdG9yKGUgPiAwID8gcyAvIDAgOiAwKTtcbiAgZXh0ZXJuYWwgPSBmYWxzZTtcbiAgQ3Rvci5yb3VuZGluZyA9IHgucyA9IDE7XG4gIGsgPSBNYXRoLm1pbigxMiwgKGUgKyBcIlwiKS5sZW5ndGgpO1xuICByID0gbmF0dXJhbEV4cG9uZW50aWFsKHkudGltZXMobmF0dXJhbExvZ2FyaXRobSh4LCBwciArIGspKSwgcHIpO1xuICBpZiAoci5kKSB7XG4gICAgciA9IGZpbmFsaXNlKHIsIHByICsgNSwgMSk7XG4gICAgaWYgKGNoZWNrUm91bmRpbmdEaWdpdHMoci5kLCBwciwgcm0pKSB7XG4gICAgICBlID0gcHIgKyAxMDtcbiAgICAgIHIgPSBmaW5hbGlzZShuYXR1cmFsRXhwb25lbnRpYWwoeS50aW1lcyhuYXR1cmFsTG9nYXJpdGhtKHgsIGUgKyBrKSksIGUpLCBlICsgNSwgMSk7XG4gICAgICBpZiAoK2RpZ2l0c1RvU3RyaW5nKHIuZCkuc2xpY2UocHIgKyAxLCBwciArIDE1KSArIDEgPT0gMWUxNCkge1xuICAgICAgICByID0gZmluYWxpc2UociwgcHIgKyAxLCAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgci5zID0gcztcbiAgZXh0ZXJuYWwgPSB0cnVlO1xuICBDdG9yLnJvdW5kaW5nID0gcm07XG4gIHJldHVybiBmaW5hbGlzZShyLCBwciwgcm0pO1xufTtcblAudG9QcmVjaXNpb24gPSBmdW5jdGlvbihzZCwgcm0pIHtcbiAgdmFyIHN0ciwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBpZiAoc2QgPT09IHZvaWQgMCkge1xuICAgIHN0ciA9IGZpbml0ZVRvU3RyaW5nKHgsIHguZSA8PSBDdG9yLnRvRXhwTmVnIHx8IHguZSA+PSBDdG9yLnRvRXhwUG9zKTtcbiAgfSBlbHNlIHtcbiAgICBjaGVja0ludDMyKHNkLCAxLCBNQVhfRElHSVRTKTtcbiAgICBpZiAocm0gPT09IHZvaWQgMClcbiAgICAgIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgICBlbHNlXG4gICAgICBjaGVja0ludDMyKHJtLCAwLCA4KTtcbiAgICB4ID0gZmluYWxpc2UobmV3IEN0b3IoeCksIHNkLCBybSk7XG4gICAgc3RyID0gZmluaXRlVG9TdHJpbmcoeCwgc2QgPD0geC5lIHx8IHguZSA8PSBDdG9yLnRvRXhwTmVnLCBzZCk7XG4gIH1cbiAgcmV0dXJuIHguaXNOZWcoKSAmJiAheC5pc1plcm8oKSA/IFwiLVwiICsgc3RyIDogc3RyO1xufTtcblAudG9TaWduaWZpY2FudERpZ2l0cyA9IFAudG9TRCA9IGZ1bmN0aW9uKHNkLCBybSkge1xuICB2YXIgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBpZiAoc2QgPT09IHZvaWQgMCkge1xuICAgIHNkID0gQ3Rvci5wcmVjaXNpb247XG4gICAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICB9IGVsc2Uge1xuICAgIGNoZWNrSW50MzIoc2QsIDEsIE1BWF9ESUdJVFMpO1xuICAgIGlmIChybSA9PT0gdm9pZCAwKVxuICAgICAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICAgIGVsc2VcbiAgICAgIGNoZWNrSW50MzIocm0sIDAsIDgpO1xuICB9XG4gIHJldHVybiBmaW5hbGlzZShuZXcgQ3Rvcih4KSwgc2QsIHJtKTtcbn07XG5QLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3IsIHN0ciA9IGZpbml0ZVRvU3RyaW5nKHgsIHguZSA8PSBDdG9yLnRvRXhwTmVnIHx8IHguZSA+PSBDdG9yLnRvRXhwUG9zKTtcbiAgcmV0dXJuIHguaXNOZWcoKSAmJiAheC5pc1plcm8oKSA/IFwiLVwiICsgc3RyIDogc3RyO1xufTtcblAudHJ1bmNhdGVkID0gUC50cnVuYyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZmluYWxpc2UobmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyksIHRoaXMuZSArIDEsIDEpO1xufTtcblAudmFsdWVPZiA9IFAudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3IsIHN0ciA9IGZpbml0ZVRvU3RyaW5nKHgsIHguZSA8PSBDdG9yLnRvRXhwTmVnIHx8IHguZSA+PSBDdG9yLnRvRXhwUG9zKTtcbiAgcmV0dXJuIHguaXNOZWcoKSA/IFwiLVwiICsgc3RyIDogc3RyO1xufTtcbmZ1bmN0aW9uIGRpZ2l0c1RvU3RyaW5nKGQpIHtcbiAgdmFyIGksIGssIHdzLCBpbmRleE9mTGFzdFdvcmQgPSBkLmxlbmd0aCAtIDEsIHN0ciA9IFwiXCIsIHcgPSBkWzBdO1xuICBpZiAoaW5kZXhPZkxhc3RXb3JkID4gMCkge1xuICAgIHN0ciArPSB3O1xuICAgIGZvciAoaSA9IDE7IGkgPCBpbmRleE9mTGFzdFdvcmQ7IGkrKykge1xuICAgICAgd3MgPSBkW2ldICsgXCJcIjtcbiAgICAgIGsgPSBMT0dfQkFTRSAtIHdzLmxlbmd0aDtcbiAgICAgIGlmIChrKVxuICAgICAgICBzdHIgKz0gZ2V0WmVyb1N0cmluZyhrKTtcbiAgICAgIHN0ciArPSB3cztcbiAgICB9XG4gICAgdyA9IGRbaV07XG4gICAgd3MgPSB3ICsgXCJcIjtcbiAgICBrID0gTE9HX0JBU0UgLSB3cy5sZW5ndGg7XG4gICAgaWYgKGspXG4gICAgICBzdHIgKz0gZ2V0WmVyb1N0cmluZyhrKTtcbiAgfSBlbHNlIGlmICh3ID09PSAwKSB7XG4gICAgcmV0dXJuIFwiMFwiO1xuICB9XG4gIGZvciAoOyB3ICUgMTAgPT09IDA7IClcbiAgICB3IC89IDEwO1xuICByZXR1cm4gc3RyICsgdztcbn1cbl9fbmFtZShkaWdpdHNUb1N0cmluZywgXCJkaWdpdHNUb1N0cmluZ1wiKTtcbmZ1bmN0aW9uIGNoZWNrSW50MzIoaSwgbWluMiwgbWF4Mikge1xuICBpZiAoaSAhPT0gfn5pIHx8IGkgPCBtaW4yIHx8IGkgPiBtYXgyKSB7XG4gICAgdGhyb3cgRXJyb3IoaW52YWxpZEFyZ3VtZW50ICsgaSk7XG4gIH1cbn1cbl9fbmFtZShjaGVja0ludDMyLCBcImNoZWNrSW50MzJcIik7XG5mdW5jdGlvbiBjaGVja1JvdW5kaW5nRGlnaXRzKGQsIGksIHJtLCByZXBlYXRpbmcpIHtcbiAgdmFyIGRpLCBrLCByLCByZDtcbiAgZm9yIChrID0gZFswXTsgayA+PSAxMDsgayAvPSAxMClcbiAgICAtLWk7XG4gIGlmICgtLWkgPCAwKSB7XG4gICAgaSArPSBMT0dfQkFTRTtcbiAgICBkaSA9IDA7XG4gIH0gZWxzZSB7XG4gICAgZGkgPSBNYXRoLmNlaWwoKGkgKyAxKSAvIExPR19CQVNFKTtcbiAgICBpICU9IExPR19CQVNFO1xuICB9XG4gIGsgPSBtYXRocG93KDEwLCBMT0dfQkFTRSAtIGkpO1xuICByZCA9IGRbZGldICUgayB8IDA7XG4gIGlmIChyZXBlYXRpbmcgPT0gbnVsbCkge1xuICAgIGlmIChpIDwgMykge1xuICAgICAgaWYgKGkgPT0gMClcbiAgICAgICAgcmQgPSByZCAvIDEwMCB8IDA7XG4gICAgICBlbHNlIGlmIChpID09IDEpXG4gICAgICAgIHJkID0gcmQgLyAxMCB8IDA7XG4gICAgICByID0gcm0gPCA0ICYmIHJkID09IDk5OTk5IHx8IHJtID4gMyAmJiByZCA9PSA0OTk5OSB8fCByZCA9PSA1ZTQgfHwgcmQgPT0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgciA9IChybSA8IDQgJiYgcmQgKyAxID09IGsgfHwgcm0gPiAzICYmIHJkICsgMSA9PSBrIC8gMikgJiYgKGRbZGkgKyAxXSAvIGsgLyAxMDAgfCAwKSA9PSBtYXRocG93KDEwLCBpIC0gMikgLSAxIHx8IChyZCA9PSBrIC8gMiB8fCByZCA9PSAwKSAmJiAoZFtkaSArIDFdIC8gayAvIDEwMCB8IDApID09IDA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpIDwgNCkge1xuICAgICAgaWYgKGkgPT0gMClcbiAgICAgICAgcmQgPSByZCAvIDFlMyB8IDA7XG4gICAgICBlbHNlIGlmIChpID09IDEpXG4gICAgICAgIHJkID0gcmQgLyAxMDAgfCAwO1xuICAgICAgZWxzZSBpZiAoaSA9PSAyKVxuICAgICAgICByZCA9IHJkIC8gMTAgfCAwO1xuICAgICAgciA9IChyZXBlYXRpbmcgfHwgcm0gPCA0KSAmJiByZCA9PSA5OTk5IHx8ICFyZXBlYXRpbmcgJiYgcm0gPiAzICYmIHJkID09IDQ5OTk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIgPSAoKHJlcGVhdGluZyB8fCBybSA8IDQpICYmIHJkICsgMSA9PSBrIHx8ICFyZXBlYXRpbmcgJiYgcm0gPiAzICYmIHJkICsgMSA9PSBrIC8gMikgJiYgKGRbZGkgKyAxXSAvIGsgLyAxZTMgfCAwKSA9PSBtYXRocG93KDEwLCBpIC0gMykgLSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcjtcbn1cbl9fbmFtZShjaGVja1JvdW5kaW5nRGlnaXRzLCBcImNoZWNrUm91bmRpbmdEaWdpdHNcIik7XG5mdW5jdGlvbiBjb252ZXJ0QmFzZShzdHIsIGJhc2VJbiwgYmFzZU91dCkge1xuICB2YXIgaiwgYXJyID0gWzBdLCBhcnJMLCBpID0gMCwgc3RyTCA9IHN0ci5sZW5ndGg7XG4gIGZvciAoOyBpIDwgc3RyTDsgKSB7XG4gICAgZm9yIChhcnJMID0gYXJyLmxlbmd0aDsgYXJyTC0tOyApXG4gICAgICBhcnJbYXJyTF0gKj0gYmFzZUluO1xuICAgIGFyclswXSArPSBOVU1FUkFMUy5pbmRleE9mKHN0ci5jaGFyQXQoaSsrKSk7XG4gICAgZm9yIChqID0gMDsgaiA8IGFyci5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKGFycltqXSA+IGJhc2VPdXQgLSAxKSB7XG4gICAgICAgIGlmIChhcnJbaiArIDFdID09PSB2b2lkIDApXG4gICAgICAgICAgYXJyW2ogKyAxXSA9IDA7XG4gICAgICAgIGFycltqICsgMV0gKz0gYXJyW2pdIC8gYmFzZU91dCB8IDA7XG4gICAgICAgIGFycltqXSAlPSBiYXNlT3V0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyLnJldmVyc2UoKTtcbn1cbl9fbmFtZShjb252ZXJ0QmFzZSwgXCJjb252ZXJ0QmFzZVwiKTtcbmZ1bmN0aW9uIGNvc2luZShDdG9yLCB4KSB7XG4gIHZhciBrLCBsZW4sIHk7XG4gIGlmICh4LmlzWmVybygpKVxuICAgIHJldHVybiB4O1xuICBsZW4gPSB4LmQubGVuZ3RoO1xuICBpZiAobGVuIDwgMzIpIHtcbiAgICBrID0gTWF0aC5jZWlsKGxlbiAvIDMpO1xuICAgIHkgPSAoMSAvIHRpbnlQb3coNCwgaykpLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgayA9IDE2O1xuICAgIHkgPSBcIjIuMzI4MzA2NDM2NTM4Njk2Mjg5MDYyNWUtMTBcIjtcbiAgfVxuICBDdG9yLnByZWNpc2lvbiArPSBrO1xuICB4ID0gdGF5bG9yU2VyaWVzKEN0b3IsIDEsIHgudGltZXMoeSksIG5ldyBDdG9yKDEpKTtcbiAgZm9yICh2YXIgaSA9IGs7IGktLTsgKSB7XG4gICAgdmFyIGNvczJ4ID0geC50aW1lcyh4KTtcbiAgICB4ID0gY29zMngudGltZXMoY29zMngpLm1pbnVzKGNvczJ4KS50aW1lcyg4KS5wbHVzKDEpO1xuICB9XG4gIEN0b3IucHJlY2lzaW9uIC09IGs7XG4gIHJldHVybiB4O1xufVxuX19uYW1lKGNvc2luZSwgXCJjb3NpbmVcIik7XG52YXIgZGl2aWRlID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG11bHRpcGx5SW50ZWdlcih4LCBrLCBiYXNlKSB7XG4gICAgdmFyIHRlbXAsIGNhcnJ5ID0gMCwgaSA9IHgubGVuZ3RoO1xuICAgIGZvciAoeCA9IHguc2xpY2UoKTsgaS0tOyApIHtcbiAgICAgIHRlbXAgPSB4W2ldICogayArIGNhcnJ5O1xuICAgICAgeFtpXSA9IHRlbXAgJSBiYXNlIHwgMDtcbiAgICAgIGNhcnJ5ID0gdGVtcCAvIGJhc2UgfCAwO1xuICAgIH1cbiAgICBpZiAoY2FycnkpXG4gICAgICB4LnVuc2hpZnQoY2FycnkpO1xuICAgIHJldHVybiB4O1xuICB9XG4gIF9fbmFtZShtdWx0aXBseUludGVnZXIsIFwibXVsdGlwbHlJbnRlZ2VyXCIpO1xuICBmdW5jdGlvbiBjb21wYXJlKGEsIGIsIGFMLCBiTCkge1xuICAgIHZhciBpLCByO1xuICAgIGlmIChhTCAhPSBiTCkge1xuICAgICAgciA9IGFMID4gYkwgPyAxIDogLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IHIgPSAwOyBpIDwgYUw7IGkrKykge1xuICAgICAgICBpZiAoYVtpXSAhPSBiW2ldKSB7XG4gICAgICAgICAgciA9IGFbaV0gPiBiW2ldID8gMSA6IC0xO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG4gIF9fbmFtZShjb21wYXJlLCBcImNvbXBhcmVcIik7XG4gIGZ1bmN0aW9uIHN1YnRyYWN0KGEsIGIsIGFMLCBiYXNlKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBhTC0tOyApIHtcbiAgICAgIGFbYUxdIC09IGk7XG4gICAgICBpID0gYVthTF0gPCBiW2FMXSA/IDEgOiAwO1xuICAgICAgYVthTF0gPSBpICogYmFzZSArIGFbYUxdIC0gYlthTF07XG4gICAgfVxuICAgIGZvciAoOyAhYVswXSAmJiBhLmxlbmd0aCA+IDE7IClcbiAgICAgIGEuc2hpZnQoKTtcbiAgfVxuICBfX25hbWUoc3VidHJhY3QsIFwic3VidHJhY3RcIik7XG4gIHJldHVybiBmdW5jdGlvbih4LCB5LCBwciwgcm0sIGRwLCBiYXNlKSB7XG4gICAgdmFyIGNtcCwgZSwgaSwgaywgbG9nQmFzZSwgbW9yZSwgcHJvZCwgcHJvZEwsIHEsIHFkLCByZW0sIHJlbUwsIHJlbTAsIHNkLCB0LCB4aSwgeEwsIHlkMCwgeUwsIHl6LCBDdG9yID0geC5jb25zdHJ1Y3Rvciwgc2lnbjIgPSB4LnMgPT0geS5zID8gMSA6IC0xLCB4ZCA9IHguZCwgeWQgPSB5LmQ7XG4gICAgaWYgKCF4ZCB8fCAheGRbMF0gfHwgIXlkIHx8ICF5ZFswXSkge1xuICAgICAgcmV0dXJuIG5ldyBDdG9yKFxuICAgICAgICAheC5zIHx8ICF5LnMgfHwgKHhkID8geWQgJiYgeGRbMF0gPT0geWRbMF0gOiAheWQpID8gTmFOIDogeGQgJiYgeGRbMF0gPT0gMCB8fCAheWQgPyBzaWduMiAqIDAgOiBzaWduMiAvIDBcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChiYXNlKSB7XG4gICAgICBsb2dCYXNlID0gMTtcbiAgICAgIGUgPSB4LmUgLSB5LmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJhc2UgPSBCQVNFO1xuICAgICAgbG9nQmFzZSA9IExPR19CQVNFO1xuICAgICAgZSA9IG1hdGhmbG9vcih4LmUgLyBsb2dCYXNlKSAtIG1hdGhmbG9vcih5LmUgLyBsb2dCYXNlKTtcbiAgICB9XG4gICAgeUwgPSB5ZC5sZW5ndGg7XG4gICAgeEwgPSB4ZC5sZW5ndGg7XG4gICAgcSA9IG5ldyBDdG9yKHNpZ24yKTtcbiAgICBxZCA9IHEuZCA9IFtdO1xuICAgIGZvciAoaSA9IDA7IHlkW2ldID09ICh4ZFtpXSB8fCAwKTsgaSsrKVxuICAgICAgO1xuICAgIGlmICh5ZFtpXSA+ICh4ZFtpXSB8fCAwKSlcbiAgICAgIGUtLTtcbiAgICBpZiAocHIgPT0gbnVsbCkge1xuICAgICAgc2QgPSBwciA9IEN0b3IucHJlY2lzaW9uO1xuICAgICAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICAgIH0gZWxzZSBpZiAoZHApIHtcbiAgICAgIHNkID0gcHIgKyAoeC5lIC0geS5lKSArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNkID0gcHI7XG4gICAgfVxuICAgIGlmIChzZCA8IDApIHtcbiAgICAgIHFkLnB1c2goMSk7XG4gICAgICBtb3JlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2QgPSBzZCAvIGxvZ0Jhc2UgKyAyIHwgMDtcbiAgICAgIGkgPSAwO1xuICAgICAgaWYgKHlMID09IDEpIHtcbiAgICAgICAgayA9IDA7XG4gICAgICAgIHlkID0geWRbMF07XG4gICAgICAgIHNkKys7XG4gICAgICAgIGZvciAoOyAoaSA8IHhMIHx8IGspICYmIHNkLS07IGkrKykge1xuICAgICAgICAgIHQgPSBrICogYmFzZSArICh4ZFtpXSB8fCAwKTtcbiAgICAgICAgICBxZFtpXSA9IHQgLyB5ZCB8IDA7XG4gICAgICAgICAgayA9IHQgJSB5ZCB8IDA7XG4gICAgICAgIH1cbiAgICAgICAgbW9yZSA9IGsgfHwgaSA8IHhMO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgayA9IGJhc2UgLyAoeWRbMF0gKyAxKSB8IDA7XG4gICAgICAgIGlmIChrID4gMSkge1xuICAgICAgICAgIHlkID0gbXVsdGlwbHlJbnRlZ2VyKHlkLCBrLCBiYXNlKTtcbiAgICAgICAgICB4ZCA9IG11bHRpcGx5SW50ZWdlcih4ZCwgaywgYmFzZSk7XG4gICAgICAgICAgeUwgPSB5ZC5sZW5ndGg7XG4gICAgICAgICAgeEwgPSB4ZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgeGkgPSB5TDtcbiAgICAgICAgcmVtID0geGQuc2xpY2UoMCwgeUwpO1xuICAgICAgICByZW1MID0gcmVtLmxlbmd0aDtcbiAgICAgICAgZm9yICg7IHJlbUwgPCB5TDsgKVxuICAgICAgICAgIHJlbVtyZW1MKytdID0gMDtcbiAgICAgICAgeXogPSB5ZC5zbGljZSgpO1xuICAgICAgICB5ei51bnNoaWZ0KDApO1xuICAgICAgICB5ZDAgPSB5ZFswXTtcbiAgICAgICAgaWYgKHlkWzFdID49IGJhc2UgLyAyKVxuICAgICAgICAgICsreWQwO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgayA9IDA7XG4gICAgICAgICAgY21wID0gY29tcGFyZSh5ZCwgcmVtLCB5TCwgcmVtTCk7XG4gICAgICAgICAgaWYgKGNtcCA8IDApIHtcbiAgICAgICAgICAgIHJlbTAgPSByZW1bMF07XG4gICAgICAgICAgICBpZiAoeUwgIT0gcmVtTClcbiAgICAgICAgICAgICAgcmVtMCA9IHJlbTAgKiBiYXNlICsgKHJlbVsxXSB8fCAwKTtcbiAgICAgICAgICAgIGsgPSByZW0wIC8geWQwIHwgMDtcbiAgICAgICAgICAgIGlmIChrID4gMSkge1xuICAgICAgICAgICAgICBpZiAoayA+PSBiYXNlKVxuICAgICAgICAgICAgICAgIGsgPSBiYXNlIC0gMTtcbiAgICAgICAgICAgICAgcHJvZCA9IG11bHRpcGx5SW50ZWdlcih5ZCwgaywgYmFzZSk7XG4gICAgICAgICAgICAgIHByb2RMID0gcHJvZC5sZW5ndGg7XG4gICAgICAgICAgICAgIHJlbUwgPSByZW0ubGVuZ3RoO1xuICAgICAgICAgICAgICBjbXAgPSBjb21wYXJlKHByb2QsIHJlbSwgcHJvZEwsIHJlbUwpO1xuICAgICAgICAgICAgICBpZiAoY21wID09IDEpIHtcbiAgICAgICAgICAgICAgICBrLS07XG4gICAgICAgICAgICAgICAgc3VidHJhY3QocHJvZCwgeUwgPCBwcm9kTCA/IHl6IDogeWQsIHByb2RMLCBiYXNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGsgPT0gMClcbiAgICAgICAgICAgICAgICBjbXAgPSBrID0gMTtcbiAgICAgICAgICAgICAgcHJvZCA9IHlkLnNsaWNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9kTCA9IHByb2QubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHByb2RMIDwgcmVtTClcbiAgICAgICAgICAgICAgcHJvZC51bnNoaWZ0KDApO1xuICAgICAgICAgICAgc3VidHJhY3QocmVtLCBwcm9kLCByZW1MLCBiYXNlKTtcbiAgICAgICAgICAgIGlmIChjbXAgPT0gLTEpIHtcbiAgICAgICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XG4gICAgICAgICAgICAgIGNtcCA9IGNvbXBhcmUoeWQsIHJlbSwgeUwsIHJlbUwpO1xuICAgICAgICAgICAgICBpZiAoY21wIDwgMSkge1xuICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgICAgICBzdWJ0cmFjdChyZW0sIHlMIDwgcmVtTCA/IHl6IDogeWQsIHJlbUwsIGJhc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1MID0gcmVtLmxlbmd0aDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgcmVtID0gWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxZFtpKytdID0gaztcbiAgICAgICAgICBpZiAoY21wICYmIHJlbVswXSkge1xuICAgICAgICAgICAgcmVtW3JlbUwrK10gPSB4ZFt4aV0gfHwgMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVtID0gW3hkW3hpXV07XG4gICAgICAgICAgICByZW1MID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKCh4aSsrIDwgeEwgfHwgcmVtWzBdICE9PSB2b2lkIDApICYmIHNkLS0pO1xuICAgICAgICBtb3JlID0gcmVtWzBdICE9PSB2b2lkIDA7XG4gICAgICB9XG4gICAgICBpZiAoIXFkWzBdKVxuICAgICAgICBxZC5zaGlmdCgpO1xuICAgIH1cbiAgICBpZiAobG9nQmFzZSA9PSAxKSB7XG4gICAgICBxLmUgPSBlO1xuICAgICAgaW5leGFjdCA9IG1vcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDEsIGsgPSBxZFswXTsgayA+PSAxMDsgayAvPSAxMClcbiAgICAgICAgaSsrO1xuICAgICAgcS5lID0gaSArIGUgKiBsb2dCYXNlIC0gMTtcbiAgICAgIGZpbmFsaXNlKHEsIGRwID8gcHIgKyBxLmUgKyAxIDogcHIsIHJtLCBtb3JlKTtcbiAgICB9XG4gICAgcmV0dXJuIHE7XG4gIH07XG59KCk7XG5mdW5jdGlvbiBmaW5hbGlzZSh4LCBzZCwgcm0sIGlzVHJ1bmNhdGVkKSB7XG4gIHZhciBkaWdpdHMsIGksIGosIGssIHJkLCByb3VuZFVwLCB3LCB4ZCwgeGRpLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgb3V0OlxuICAgIGlmIChzZCAhPSBudWxsKSB7XG4gICAgICB4ZCA9IHguZDtcbiAgICAgIGlmICgheGQpXG4gICAgICAgIHJldHVybiB4O1xuICAgICAgZm9yIChkaWdpdHMgPSAxLCBrID0geGRbMF07IGsgPj0gMTA7IGsgLz0gMTApXG4gICAgICAgIGRpZ2l0cysrO1xuICAgICAgaSA9IHNkIC0gZGlnaXRzO1xuICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgIGkgKz0gTE9HX0JBU0U7XG4gICAgICAgIGogPSBzZDtcbiAgICAgICAgdyA9IHhkW3hkaSA9IDBdO1xuICAgICAgICByZCA9IHcgLyBtYXRocG93KDEwLCBkaWdpdHMgLSBqIC0gMSkgJSAxMCB8IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4ZGkgPSBNYXRoLmNlaWwoKGkgKyAxKSAvIExPR19CQVNFKTtcbiAgICAgICAgayA9IHhkLmxlbmd0aDtcbiAgICAgICAgaWYgKHhkaSA+PSBrKSB7XG4gICAgICAgICAgaWYgKGlzVHJ1bmNhdGVkKSB7XG4gICAgICAgICAgICBmb3IgKDsgaysrIDw9IHhkaTsgKVxuICAgICAgICAgICAgICB4ZC5wdXNoKDApO1xuICAgICAgICAgICAgdyA9IHJkID0gMDtcbiAgICAgICAgICAgIGRpZ2l0cyA9IDE7XG4gICAgICAgICAgICBpICU9IExPR19CQVNFO1xuICAgICAgICAgICAgaiA9IGkgLSBMT0dfQkFTRSArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrIG91dDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdyA9IGsgPSB4ZFt4ZGldO1xuICAgICAgICAgIGZvciAoZGlnaXRzID0gMTsgayA+PSAxMDsgayAvPSAxMClcbiAgICAgICAgICAgIGRpZ2l0cysrO1xuICAgICAgICAgIGkgJT0gTE9HX0JBU0U7XG4gICAgICAgICAgaiA9IGkgLSBMT0dfQkFTRSArIGRpZ2l0cztcbiAgICAgICAgICByZCA9IGogPCAwID8gMCA6IHcgLyBtYXRocG93KDEwLCBkaWdpdHMgLSBqIC0gMSkgJSAxMCB8IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlzVHJ1bmNhdGVkID0gaXNUcnVuY2F0ZWQgfHwgc2QgPCAwIHx8IHhkW3hkaSArIDFdICE9PSB2b2lkIDAgfHwgKGogPCAwID8gdyA6IHcgJSBtYXRocG93KDEwLCBkaWdpdHMgLSBqIC0gMSkpO1xuICAgICAgcm91bmRVcCA9IHJtIDwgNCA/IChyZCB8fCBpc1RydW5jYXRlZCkgJiYgKHJtID09IDAgfHwgcm0gPT0gKHgucyA8IDAgPyAzIDogMikpIDogcmQgPiA1IHx8IHJkID09IDUgJiYgKHJtID09IDQgfHwgaXNUcnVuY2F0ZWQgfHwgcm0gPT0gNiAmJiAoaSA+IDAgPyBqID4gMCA/IHcgLyBtYXRocG93KDEwLCBkaWdpdHMgLSBqKSA6IDAgOiB4ZFt4ZGkgLSAxXSkgJSAxMCAmIDEgfHwgcm0gPT0gKHgucyA8IDAgPyA4IDogNykpO1xuICAgICAgaWYgKHNkIDwgMSB8fCAheGRbMF0pIHtcbiAgICAgICAgeGQubGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKHJvdW5kVXApIHtcbiAgICAgICAgICBzZCAtPSB4LmUgKyAxO1xuICAgICAgICAgIHhkWzBdID0gbWF0aHBvdygxMCwgKExPR19CQVNFIC0gc2QgJSBMT0dfQkFTRSkgJSBMT0dfQkFTRSk7XG4gICAgICAgICAgeC5lID0gLXNkIHx8IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeGRbMF0gPSB4LmUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4O1xuICAgICAgfVxuICAgICAgaWYgKGkgPT0gMCkge1xuICAgICAgICB4ZC5sZW5ndGggPSB4ZGk7XG4gICAgICAgIGsgPSAxO1xuICAgICAgICB4ZGktLTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHhkLmxlbmd0aCA9IHhkaSArIDE7XG4gICAgICAgIGsgPSBtYXRocG93KDEwLCBMT0dfQkFTRSAtIGkpO1xuICAgICAgICB4ZFt4ZGldID0gaiA+IDAgPyAodyAvIG1hdGhwb3coMTAsIGRpZ2l0cyAtIGopICUgbWF0aHBvdygxMCwgaikgfCAwKSAqIGsgOiAwO1xuICAgICAgfVxuICAgICAgaWYgKHJvdW5kVXApIHtcbiAgICAgICAgZm9yICg7IDsgKSB7XG4gICAgICAgICAgaWYgKHhkaSA9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxLCBqID0geGRbMF07IGogPj0gMTA7IGogLz0gMTApXG4gICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIGogPSB4ZFswXSArPSBrO1xuICAgICAgICAgICAgZm9yIChrID0gMTsgaiA+PSAxMDsgaiAvPSAxMClcbiAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgaWYgKGkgIT0gaykge1xuICAgICAgICAgICAgICB4LmUrKztcbiAgICAgICAgICAgICAgaWYgKHhkWzBdID09IEJBU0UpXG4gICAgICAgICAgICAgICAgeGRbMF0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHhkW3hkaV0gKz0gaztcbiAgICAgICAgICAgIGlmICh4ZFt4ZGldICE9IEJBU0UpXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgeGRbeGRpLS1dID0gMDtcbiAgICAgICAgICAgIGsgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChpID0geGQubGVuZ3RoOyB4ZFstLWldID09PSAwOyApXG4gICAgICAgIHhkLnBvcCgpO1xuICAgIH1cbiAgaWYgKGV4dGVybmFsKSB7XG4gICAgaWYgKHguZSA+IEN0b3IubWF4RSkge1xuICAgICAgeC5kID0gbnVsbDtcbiAgICAgIHguZSA9IE5hTjtcbiAgICB9IGVsc2UgaWYgKHguZSA8IEN0b3IubWluRSkge1xuICAgICAgeC5lID0gMDtcbiAgICAgIHguZCA9IFswXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHg7XG59XG5fX25hbWUoZmluYWxpc2UsIFwiZmluYWxpc2VcIik7XG5mdW5jdGlvbiBmaW5pdGVUb1N0cmluZyh4LCBpc0V4cCwgc2QpIHtcbiAgaWYgKCF4LmlzRmluaXRlKCkpXG4gICAgcmV0dXJuIG5vbkZpbml0ZVRvU3RyaW5nKHgpO1xuICB2YXIgaywgZSA9IHguZSwgc3RyID0gZGlnaXRzVG9TdHJpbmcoeC5kKSwgbGVuID0gc3RyLmxlbmd0aDtcbiAgaWYgKGlzRXhwKSB7XG4gICAgaWYgKHNkICYmIChrID0gc2QgLSBsZW4pID4gMCkge1xuICAgICAgc3RyID0gc3RyLmNoYXJBdCgwKSArIFwiLlwiICsgc3RyLnNsaWNlKDEpICsgZ2V0WmVyb1N0cmluZyhrKTtcbiAgICB9IGVsc2UgaWYgKGxlbiA+IDEpIHtcbiAgICAgIHN0ciA9IHN0ci5jaGFyQXQoMCkgKyBcIi5cIiArIHN0ci5zbGljZSgxKTtcbiAgICB9XG4gICAgc3RyID0gc3RyICsgKHguZSA8IDAgPyBcImVcIiA6IFwiZStcIikgKyB4LmU7XG4gIH0gZWxzZSBpZiAoZSA8IDApIHtcbiAgICBzdHIgPSBcIjAuXCIgKyBnZXRaZXJvU3RyaW5nKC1lIC0gMSkgKyBzdHI7XG4gICAgaWYgKHNkICYmIChrID0gc2QgLSBsZW4pID4gMClcbiAgICAgIHN0ciArPSBnZXRaZXJvU3RyaW5nKGspO1xuICB9IGVsc2UgaWYgKGUgPj0gbGVuKSB7XG4gICAgc3RyICs9IGdldFplcm9TdHJpbmcoZSArIDEgLSBsZW4pO1xuICAgIGlmIChzZCAmJiAoayA9IHNkIC0gZSAtIDEpID4gMClcbiAgICAgIHN0ciA9IHN0ciArIFwiLlwiICsgZ2V0WmVyb1N0cmluZyhrKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKGsgPSBlICsgMSkgPCBsZW4pXG4gICAgICBzdHIgPSBzdHIuc2xpY2UoMCwgaykgKyBcIi5cIiArIHN0ci5zbGljZShrKTtcbiAgICBpZiAoc2QgJiYgKGsgPSBzZCAtIGxlbikgPiAwKSB7XG4gICAgICBpZiAoZSArIDEgPT09IGxlbilcbiAgICAgICAgc3RyICs9IFwiLlwiO1xuICAgICAgc3RyICs9IGdldFplcm9TdHJpbmcoayk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59XG5fX25hbWUoZmluaXRlVG9TdHJpbmcsIFwiZmluaXRlVG9TdHJpbmdcIik7XG5mdW5jdGlvbiBnZXRCYXNlMTBFeHBvbmVudChkaWdpdHMsIGUpIHtcbiAgdmFyIHcgPSBkaWdpdHNbMF07XG4gIGZvciAoZSAqPSBMT0dfQkFTRTsgdyA+PSAxMDsgdyAvPSAxMClcbiAgICBlKys7XG4gIHJldHVybiBlO1xufVxuX19uYW1lKGdldEJhc2UxMEV4cG9uZW50LCBcImdldEJhc2UxMEV4cG9uZW50XCIpO1xuZnVuY3Rpb24gZ2V0TG4xMChDdG9yLCBzZCwgcHIpIHtcbiAgaWYgKHNkID4gTE4xMF9QUkVDSVNJT04pIHtcbiAgICBleHRlcm5hbCA9IHRydWU7XG4gICAgaWYgKHByKVxuICAgICAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcbiAgICB0aHJvdyBFcnJvcihwcmVjaXNpb25MaW1pdEV4Y2VlZGVkKTtcbiAgfVxuICByZXR1cm4gZmluYWxpc2UobmV3IEN0b3IoTE4xMCksIHNkLCAxLCB0cnVlKTtcbn1cbl9fbmFtZShnZXRMbjEwLCBcImdldExuMTBcIik7XG5mdW5jdGlvbiBnZXRQaShDdG9yLCBzZCwgcm0pIHtcbiAgaWYgKHNkID4gUElfUFJFQ0lTSU9OKVxuICAgIHRocm93IEVycm9yKHByZWNpc2lvbkxpbWl0RXhjZWVkZWQpO1xuICByZXR1cm4gZmluYWxpc2UobmV3IEN0b3IoUEkpLCBzZCwgcm0sIHRydWUpO1xufVxuX19uYW1lKGdldFBpLCBcImdldFBpXCIpO1xuZnVuY3Rpb24gZ2V0UHJlY2lzaW9uKGRpZ2l0cykge1xuICB2YXIgdyA9IGRpZ2l0cy5sZW5ndGggLSAxLCBsZW4gPSB3ICogTE9HX0JBU0UgKyAxO1xuICB3ID0gZGlnaXRzW3ddO1xuICBpZiAodykge1xuICAgIGZvciAoOyB3ICUgMTAgPT0gMDsgdyAvPSAxMClcbiAgICAgIGxlbi0tO1xuICAgIGZvciAodyA9IGRpZ2l0c1swXTsgdyA+PSAxMDsgdyAvPSAxMClcbiAgICAgIGxlbisrO1xuICB9XG4gIHJldHVybiBsZW47XG59XG5fX25hbWUoZ2V0UHJlY2lzaW9uLCBcImdldFByZWNpc2lvblwiKTtcbmZ1bmN0aW9uIGdldFplcm9TdHJpbmcoaykge1xuICB2YXIgenMgPSBcIlwiO1xuICBmb3IgKDsgay0tOyApXG4gICAgenMgKz0gXCIwXCI7XG4gIHJldHVybiB6cztcbn1cbl9fbmFtZShnZXRaZXJvU3RyaW5nLCBcImdldFplcm9TdHJpbmdcIik7XG5mdW5jdGlvbiBpbnRQb3coQ3RvciwgeCwgbiwgcHIpIHtcbiAgdmFyIGlzVHJ1bmNhdGVkLCByID0gbmV3IEN0b3IoMSksIGsgPSBNYXRoLmNlaWwocHIgLyBMT0dfQkFTRSArIDQpO1xuICBleHRlcm5hbCA9IGZhbHNlO1xuICBmb3IgKDsgOyApIHtcbiAgICBpZiAobiAlIDIpIHtcbiAgICAgIHIgPSByLnRpbWVzKHgpO1xuICAgICAgaWYgKHRydW5jYXRlKHIuZCwgaykpXG4gICAgICAgIGlzVHJ1bmNhdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgbiA9IG1hdGhmbG9vcihuIC8gMik7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIG4gPSByLmQubGVuZ3RoIC0gMTtcbiAgICAgIGlmIChpc1RydW5jYXRlZCAmJiByLmRbbl0gPT09IDApXG4gICAgICAgICsrci5kW25dO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHggPSB4LnRpbWVzKHgpO1xuICAgIHRydW5jYXRlKHguZCwgayk7XG4gIH1cbiAgZXh0ZXJuYWwgPSB0cnVlO1xuICByZXR1cm4gcjtcbn1cbl9fbmFtZShpbnRQb3csIFwiaW50UG93XCIpO1xuZnVuY3Rpb24gaXNPZGQobikge1xuICByZXR1cm4gbi5kW24uZC5sZW5ndGggLSAxXSAmIDE7XG59XG5fX25hbWUoaXNPZGQsIFwiaXNPZGRcIik7XG5mdW5jdGlvbiBtYXhPck1pbihDdG9yLCBhcmdzLCBsdGd0KSB7XG4gIHZhciB5LCB4ID0gbmV3IEN0b3IoYXJnc1swXSksIGkgPSAwO1xuICBmb3IgKDsgKytpIDwgYXJncy5sZW5ndGg7ICkge1xuICAgIHkgPSBuZXcgQ3RvcihhcmdzW2ldKTtcbiAgICBpZiAoIXkucykge1xuICAgICAgeCA9IHk7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKHhbbHRndF0oeSkpIHtcbiAgICAgIHggPSB5O1xuICAgIH1cbiAgfVxuICByZXR1cm4geDtcbn1cbl9fbmFtZShtYXhPck1pbiwgXCJtYXhPck1pblwiKTtcbmZ1bmN0aW9uIG5hdHVyYWxFeHBvbmVudGlhbCh4LCBzZCkge1xuICB2YXIgZGVub21pbmF0b3IsIGd1YXJkLCBqLCBwb3cyLCBzdW0yLCB0LCB3cHIsIHJlcCA9IDAsIGkgPSAwLCBrID0gMCwgQ3RvciA9IHguY29uc3RydWN0b3IsIHJtID0gQ3Rvci5yb3VuZGluZywgcHIgPSBDdG9yLnByZWNpc2lvbjtcbiAgaWYgKCF4LmQgfHwgIXguZFswXSB8fCB4LmUgPiAxNykge1xuICAgIHJldHVybiBuZXcgQ3Rvcih4LmQgPyAheC5kWzBdID8gMSA6IHgucyA8IDAgPyAwIDogMSAvIDAgOiB4LnMgPyB4LnMgPCAwID8gMCA6IHggOiAwIC8gMCk7XG4gIH1cbiAgaWYgKHNkID09IG51bGwpIHtcbiAgICBleHRlcm5hbCA9IGZhbHNlO1xuICAgIHdwciA9IHByO1xuICB9IGVsc2Uge1xuICAgIHdwciA9IHNkO1xuICB9XG4gIHQgPSBuZXcgQ3RvcigwLjAzMTI1KTtcbiAgd2hpbGUgKHguZSA+IC0yKSB7XG4gICAgeCA9IHgudGltZXModCk7XG4gICAgayArPSA1O1xuICB9XG4gIGd1YXJkID0gTWF0aC5sb2cobWF0aHBvdygyLCBrKSkgLyBNYXRoLkxOMTAgKiAyICsgNSB8IDA7XG4gIHdwciArPSBndWFyZDtcbiAgZGVub21pbmF0b3IgPSBwb3cyID0gc3VtMiA9IG5ldyBDdG9yKDEpO1xuICBDdG9yLnByZWNpc2lvbiA9IHdwcjtcbiAgZm9yICg7IDsgKSB7XG4gICAgcG93MiA9IGZpbmFsaXNlKHBvdzIudGltZXMoeCksIHdwciwgMSk7XG4gICAgZGVub21pbmF0b3IgPSBkZW5vbWluYXRvci50aW1lcygrK2kpO1xuICAgIHQgPSBzdW0yLnBsdXMoZGl2aWRlKHBvdzIsIGRlbm9taW5hdG9yLCB3cHIsIDEpKTtcbiAgICBpZiAoZGlnaXRzVG9TdHJpbmcodC5kKS5zbGljZSgwLCB3cHIpID09PSBkaWdpdHNUb1N0cmluZyhzdW0yLmQpLnNsaWNlKDAsIHdwcikpIHtcbiAgICAgIGogPSBrO1xuICAgICAgd2hpbGUgKGotLSlcbiAgICAgICAgc3VtMiA9IGZpbmFsaXNlKHN1bTIudGltZXMoc3VtMiksIHdwciwgMSk7XG4gICAgICBpZiAoc2QgPT0gbnVsbCkge1xuICAgICAgICBpZiAocmVwIDwgMyAmJiBjaGVja1JvdW5kaW5nRGlnaXRzKHN1bTIuZCwgd3ByIC0gZ3VhcmQsIHJtLCByZXApKSB7XG4gICAgICAgICAgQ3Rvci5wcmVjaXNpb24gPSB3cHIgKz0gMTA7XG4gICAgICAgICAgZGVub21pbmF0b3IgPSBwb3cyID0gdCA9IG5ldyBDdG9yKDEpO1xuICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgIHJlcCsrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmaW5hbGlzZShzdW0yLCBDdG9yLnByZWNpc2lvbiA9IHByLCBybSwgZXh0ZXJuYWwgPSB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcbiAgICAgICAgcmV0dXJuIHN1bTI7XG4gICAgICB9XG4gICAgfVxuICAgIHN1bTIgPSB0O1xuICB9XG59XG5fX25hbWUobmF0dXJhbEV4cG9uZW50aWFsLCBcIm5hdHVyYWxFeHBvbmVudGlhbFwiKTtcbmZ1bmN0aW9uIG5hdHVyYWxMb2dhcml0aG0oeSwgc2QpIHtcbiAgdmFyIGMsIGMwLCBkZW5vbWluYXRvciwgZSwgbnVtZXJhdG9yLCByZXAsIHN1bTIsIHQsIHdwciwgeDEsIHgyLCBuID0gMSwgZ3VhcmQgPSAxMCwgeCA9IHksIHhkID0geC5kLCBDdG9yID0geC5jb25zdHJ1Y3Rvciwgcm0gPSBDdG9yLnJvdW5kaW5nLCBwciA9IEN0b3IucHJlY2lzaW9uO1xuICBpZiAoeC5zIDwgMCB8fCAheGQgfHwgIXhkWzBdIHx8ICF4LmUgJiYgeGRbMF0gPT0gMSAmJiB4ZC5sZW5ndGggPT0gMSkge1xuICAgIHJldHVybiBuZXcgQ3Rvcih4ZCAmJiAheGRbMF0gPyAtMSAvIDAgOiB4LnMgIT0gMSA/IE5hTiA6IHhkID8gMCA6IHgpO1xuICB9XG4gIGlmIChzZCA9PSBudWxsKSB7XG4gICAgZXh0ZXJuYWwgPSBmYWxzZTtcbiAgICB3cHIgPSBwcjtcbiAgfSBlbHNlIHtcbiAgICB3cHIgPSBzZDtcbiAgfVxuICBDdG9yLnByZWNpc2lvbiA9IHdwciArPSBndWFyZDtcbiAgYyA9IGRpZ2l0c1RvU3RyaW5nKHhkKTtcbiAgYzAgPSBjLmNoYXJBdCgwKTtcbiAgaWYgKE1hdGguYWJzKGUgPSB4LmUpIDwgMTVlMTQpIHtcbiAgICB3aGlsZSAoYzAgPCA3ICYmIGMwICE9IDEgfHwgYzAgPT0gMSAmJiBjLmNoYXJBdCgxKSA+IDMpIHtcbiAgICAgIHggPSB4LnRpbWVzKHkpO1xuICAgICAgYyA9IGRpZ2l0c1RvU3RyaW5nKHguZCk7XG4gICAgICBjMCA9IGMuY2hhckF0KDApO1xuICAgICAgbisrO1xuICAgIH1cbiAgICBlID0geC5lO1xuICAgIGlmIChjMCA+IDEpIHtcbiAgICAgIHggPSBuZXcgQ3RvcihcIjAuXCIgKyBjKTtcbiAgICAgIGUrKztcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IG5ldyBDdG9yKGMwICsgXCIuXCIgKyBjLnNsaWNlKDEpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdCA9IGdldExuMTAoQ3Rvciwgd3ByICsgMiwgcHIpLnRpbWVzKGUgKyBcIlwiKTtcbiAgICB4ID0gbmF0dXJhbExvZ2FyaXRobShuZXcgQ3RvcihjMCArIFwiLlwiICsgYy5zbGljZSgxKSksIHdwciAtIGd1YXJkKS5wbHVzKHQpO1xuICAgIEN0b3IucHJlY2lzaW9uID0gcHI7XG4gICAgcmV0dXJuIHNkID09IG51bGwgPyBmaW5hbGlzZSh4LCBwciwgcm0sIGV4dGVybmFsID0gdHJ1ZSkgOiB4O1xuICB9XG4gIHgxID0geDtcbiAgc3VtMiA9IG51bWVyYXRvciA9IHggPSBkaXZpZGUoeC5taW51cygxKSwgeC5wbHVzKDEpLCB3cHIsIDEpO1xuICB4MiA9IGZpbmFsaXNlKHgudGltZXMoeCksIHdwciwgMSk7XG4gIGRlbm9taW5hdG9yID0gMztcbiAgZm9yICg7IDsgKSB7XG4gICAgbnVtZXJhdG9yID0gZmluYWxpc2UobnVtZXJhdG9yLnRpbWVzKHgyKSwgd3ByLCAxKTtcbiAgICB0ID0gc3VtMi5wbHVzKGRpdmlkZShudW1lcmF0b3IsIG5ldyBDdG9yKGRlbm9taW5hdG9yKSwgd3ByLCAxKSk7XG4gICAgaWYgKGRpZ2l0c1RvU3RyaW5nKHQuZCkuc2xpY2UoMCwgd3ByKSA9PT0gZGlnaXRzVG9TdHJpbmcoc3VtMi5kKS5zbGljZSgwLCB3cHIpKSB7XG4gICAgICBzdW0yID0gc3VtMi50aW1lcygyKTtcbiAgICAgIGlmIChlICE9PSAwKVxuICAgICAgICBzdW0yID0gc3VtMi5wbHVzKGdldExuMTAoQ3Rvciwgd3ByICsgMiwgcHIpLnRpbWVzKGUgKyBcIlwiKSk7XG4gICAgICBzdW0yID0gZGl2aWRlKHN1bTIsIG5ldyBDdG9yKG4pLCB3cHIsIDEpO1xuICAgICAgaWYgKHNkID09IG51bGwpIHtcbiAgICAgICAgaWYgKGNoZWNrUm91bmRpbmdEaWdpdHMoc3VtMi5kLCB3cHIgLSBndWFyZCwgcm0sIHJlcCkpIHtcbiAgICAgICAgICBDdG9yLnByZWNpc2lvbiA9IHdwciArPSBndWFyZDtcbiAgICAgICAgICB0ID0gbnVtZXJhdG9yID0geCA9IGRpdmlkZSh4MS5taW51cygxKSwgeDEucGx1cygxKSwgd3ByLCAxKTtcbiAgICAgICAgICB4MiA9IGZpbmFsaXNlKHgudGltZXMoeCksIHdwciwgMSk7XG4gICAgICAgICAgZGVub21pbmF0b3IgPSByZXAgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmaW5hbGlzZShzdW0yLCBDdG9yLnByZWNpc2lvbiA9IHByLCBybSwgZXh0ZXJuYWwgPSB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcbiAgICAgICAgcmV0dXJuIHN1bTI7XG4gICAgICB9XG4gICAgfVxuICAgIHN1bTIgPSB0O1xuICAgIGRlbm9taW5hdG9yICs9IDI7XG4gIH1cbn1cbl9fbmFtZShuYXR1cmFsTG9nYXJpdGhtLCBcIm5hdHVyYWxMb2dhcml0aG1cIik7XG5mdW5jdGlvbiBub25GaW5pdGVUb1N0cmluZyh4KSB7XG4gIHJldHVybiBTdHJpbmcoeC5zICogeC5zIC8gMCk7XG59XG5fX25hbWUobm9uRmluaXRlVG9TdHJpbmcsIFwibm9uRmluaXRlVG9TdHJpbmdcIik7XG5mdW5jdGlvbiBwYXJzZURlY2ltYWwoeCwgc3RyKSB7XG4gIHZhciBlLCBpLCBsZW47XG4gIGlmICgoZSA9IHN0ci5pbmRleE9mKFwiLlwiKSkgPiAtMSlcbiAgICBzdHIgPSBzdHIucmVwbGFjZShcIi5cIiwgXCJcIik7XG4gIGlmICgoaSA9IHN0ci5zZWFyY2goL2UvaSkpID4gMCkge1xuICAgIGlmIChlIDwgMClcbiAgICAgIGUgPSBpO1xuICAgIGUgKz0gK3N0ci5zbGljZShpICsgMSk7XG4gICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBpKTtcbiAgfSBlbHNlIGlmIChlIDwgMCkge1xuICAgIGUgPSBzdHIubGVuZ3RoO1xuICB9XG4gIGZvciAoaSA9IDA7IHN0ci5jaGFyQ29kZUF0KGkpID09PSA0ODsgaSsrKVxuICAgIDtcbiAgZm9yIChsZW4gPSBzdHIubGVuZ3RoOyBzdHIuY2hhckNvZGVBdChsZW4gLSAxKSA9PT0gNDg7IC0tbGVuKVxuICAgIDtcbiAgc3RyID0gc3RyLnNsaWNlKGksIGxlbik7XG4gIGlmIChzdHIpIHtcbiAgICBsZW4gLT0gaTtcbiAgICB4LmUgPSBlID0gZSAtIGkgLSAxO1xuICAgIHguZCA9IFtdO1xuICAgIGkgPSAoZSArIDEpICUgTE9HX0JBU0U7XG4gICAgaWYgKGUgPCAwKVxuICAgICAgaSArPSBMT0dfQkFTRTtcbiAgICBpZiAoaSA8IGxlbikge1xuICAgICAgaWYgKGkpXG4gICAgICAgIHguZC5wdXNoKCtzdHIuc2xpY2UoMCwgaSkpO1xuICAgICAgZm9yIChsZW4gLT0gTE9HX0JBU0U7IGkgPCBsZW47IClcbiAgICAgICAgeC5kLnB1c2goK3N0ci5zbGljZShpLCBpICs9IExPR19CQVNFKSk7XG4gICAgICBzdHIgPSBzdHIuc2xpY2UoaSk7XG4gICAgICBpID0gTE9HX0JBU0UgLSBzdHIubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBpIC09IGxlbjtcbiAgICB9XG4gICAgZm9yICg7IGktLTsgKVxuICAgICAgc3RyICs9IFwiMFwiO1xuICAgIHguZC5wdXNoKCtzdHIpO1xuICAgIGlmIChleHRlcm5hbCkge1xuICAgICAgaWYgKHguZSA+IHguY29uc3RydWN0b3IubWF4RSkge1xuICAgICAgICB4LmQgPSBudWxsO1xuICAgICAgICB4LmUgPSBOYU47XG4gICAgICB9IGVsc2UgaWYgKHguZSA8IHguY29uc3RydWN0b3IubWluRSkge1xuICAgICAgICB4LmUgPSAwO1xuICAgICAgICB4LmQgPSBbMF07XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHguZSA9IDA7XG4gICAgeC5kID0gWzBdO1xuICB9XG4gIHJldHVybiB4O1xufVxuX19uYW1lKHBhcnNlRGVjaW1hbCwgXCJwYXJzZURlY2ltYWxcIik7XG5mdW5jdGlvbiBwYXJzZU90aGVyKHgsIHN0cikge1xuICB2YXIgYmFzZSwgQ3RvciwgZGl2aXNvciwgaSwgaXNGbG9hdCwgbGVuLCBwLCB4ZCwgeGU7XG4gIGlmIChzdHIuaW5kZXhPZihcIl9cIikgPiAtMSkge1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC8oXFxkKV8oPz1cXGQpL2csIFwiJDFcIik7XG4gICAgaWYgKGlzRGVjaW1hbC50ZXN0KHN0cikpXG4gICAgICByZXR1cm4gcGFyc2VEZWNpbWFsKHgsIHN0cik7XG4gIH0gZWxzZSBpZiAoc3RyID09PSBcIkluZmluaXR5XCIgfHwgc3RyID09PSBcIk5hTlwiKSB7XG4gICAgaWYgKCErc3RyKVxuICAgICAgeC5zID0gTmFOO1xuICAgIHguZSA9IE5hTjtcbiAgICB4LmQgPSBudWxsO1xuICAgIHJldHVybiB4O1xuICB9XG4gIGlmIChpc0hleC50ZXN0KHN0cikpIHtcbiAgICBiYXNlID0gMTY7XG4gICAgc3RyID0gc3RyLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAoaXNCaW5hcnkudGVzdChzdHIpKSB7XG4gICAgYmFzZSA9IDI7XG4gIH0gZWxzZSBpZiAoaXNPY3RhbC50ZXN0KHN0cikpIHtcbiAgICBiYXNlID0gODtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBFcnJvcihpbnZhbGlkQXJndW1lbnQgKyBzdHIpO1xuICB9XG4gIGkgPSBzdHIuc2VhcmNoKC9wL2kpO1xuICBpZiAoaSA+IDApIHtcbiAgICBwID0gK3N0ci5zbGljZShpICsgMSk7XG4gICAgc3RyID0gc3RyLnN1YnN0cmluZygyLCBpKTtcbiAgfSBlbHNlIHtcbiAgICBzdHIgPSBzdHIuc2xpY2UoMik7XG4gIH1cbiAgaSA9IHN0ci5pbmRleE9mKFwiLlwiKTtcbiAgaXNGbG9hdCA9IGkgPj0gMDtcbiAgQ3RvciA9IHguY29uc3RydWN0b3I7XG4gIGlmIChpc0Zsb2F0KSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoXCIuXCIsIFwiXCIpO1xuICAgIGxlbiA9IHN0ci5sZW5ndGg7XG4gICAgaSA9IGxlbiAtIGk7XG4gICAgZGl2aXNvciA9IGludFBvdyhDdG9yLCBuZXcgQ3RvcihiYXNlKSwgaSwgaSAqIDIpO1xuICB9XG4gIHhkID0gY29udmVydEJhc2Uoc3RyLCBiYXNlLCBCQVNFKTtcbiAgeGUgPSB4ZC5sZW5ndGggLSAxO1xuICBmb3IgKGkgPSB4ZTsgeGRbaV0gPT09IDA7IC0taSlcbiAgICB4ZC5wb3AoKTtcbiAgaWYgKGkgPCAwKVxuICAgIHJldHVybiBuZXcgQ3Rvcih4LnMgKiAwKTtcbiAgeC5lID0gZ2V0QmFzZTEwRXhwb25lbnQoeGQsIHhlKTtcbiAgeC5kID0geGQ7XG4gIGV4dGVybmFsID0gZmFsc2U7XG4gIGlmIChpc0Zsb2F0KVxuICAgIHggPSBkaXZpZGUoeCwgZGl2aXNvciwgbGVuICogNCk7XG4gIGlmIChwKVxuICAgIHggPSB4LnRpbWVzKE1hdGguYWJzKHApIDwgNTQgPyBtYXRocG93KDIsIHApIDogRGVjaW1hbC5wb3coMiwgcCkpO1xuICBleHRlcm5hbCA9IHRydWU7XG4gIHJldHVybiB4O1xufVxuX19uYW1lKHBhcnNlT3RoZXIsIFwicGFyc2VPdGhlclwiKTtcbmZ1bmN0aW9uIHNpbmUoQ3RvciwgeCkge1xuICB2YXIgaywgbGVuID0geC5kLmxlbmd0aDtcbiAgaWYgKGxlbiA8IDMpIHtcbiAgICByZXR1cm4geC5pc1plcm8oKSA/IHggOiB0YXlsb3JTZXJpZXMoQ3RvciwgMiwgeCwgeCk7XG4gIH1cbiAgayA9IDEuNCAqIE1hdGguc3FydChsZW4pO1xuICBrID0gayA+IDE2ID8gMTYgOiBrIHwgMDtcbiAgeCA9IHgudGltZXMoMSAvIHRpbnlQb3coNSwgaykpO1xuICB4ID0gdGF5bG9yU2VyaWVzKEN0b3IsIDIsIHgsIHgpO1xuICB2YXIgc2luMl94LCBkNSA9IG5ldyBDdG9yKDUpLCBkMTYgPSBuZXcgQ3RvcigxNiksIGQyMCA9IG5ldyBDdG9yKDIwKTtcbiAgZm9yICg7IGstLTsgKSB7XG4gICAgc2luMl94ID0geC50aW1lcyh4KTtcbiAgICB4ID0geC50aW1lcyhkNS5wbHVzKHNpbjJfeC50aW1lcyhkMTYudGltZXMoc2luMl94KS5taW51cyhkMjApKSkpO1xuICB9XG4gIHJldHVybiB4O1xufVxuX19uYW1lKHNpbmUsIFwic2luZVwiKTtcbmZ1bmN0aW9uIHRheWxvclNlcmllcyhDdG9yLCBuLCB4LCB5LCBpc0h5cGVyYm9saWMpIHtcbiAgdmFyIGosIHQsIHUsIHgyLCBpID0gMSwgcHIgPSBDdG9yLnByZWNpc2lvbiwgayA9IE1hdGguY2VpbChwciAvIExPR19CQVNFKTtcbiAgZXh0ZXJuYWwgPSBmYWxzZTtcbiAgeDIgPSB4LnRpbWVzKHgpO1xuICB1ID0gbmV3IEN0b3IoeSk7XG4gIGZvciAoOyA7ICkge1xuICAgIHQgPSBkaXZpZGUodS50aW1lcyh4MiksIG5ldyBDdG9yKG4rKyAqIG4rKyksIHByLCAxKTtcbiAgICB1ID0gaXNIeXBlcmJvbGljID8geS5wbHVzKHQpIDogeS5taW51cyh0KTtcbiAgICB5ID0gZGl2aWRlKHQudGltZXMoeDIpLCBuZXcgQ3RvcihuKysgKiBuKyspLCBwciwgMSk7XG4gICAgdCA9IHUucGx1cyh5KTtcbiAgICBpZiAodC5kW2tdICE9PSB2b2lkIDApIHtcbiAgICAgIGZvciAoaiA9IGs7IHQuZFtqXSA9PT0gdS5kW2pdICYmIGotLTsgKVxuICAgICAgICA7XG4gICAgICBpZiAoaiA9PSAtMSlcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGogPSB1O1xuICAgIHUgPSB5O1xuICAgIHkgPSB0O1xuICAgIHQgPSBqO1xuICAgIGkrKztcbiAgfVxuICBleHRlcm5hbCA9IHRydWU7XG4gIHQuZC5sZW5ndGggPSBrICsgMTtcbiAgcmV0dXJuIHQ7XG59XG5fX25hbWUodGF5bG9yU2VyaWVzLCBcInRheWxvclNlcmllc1wiKTtcbmZ1bmN0aW9uIHRpbnlQb3coYiwgZSkge1xuICB2YXIgbiA9IGI7XG4gIHdoaWxlICgtLWUpXG4gICAgbiAqPSBiO1xuICByZXR1cm4gbjtcbn1cbl9fbmFtZSh0aW55UG93LCBcInRpbnlQb3dcIik7XG5mdW5jdGlvbiB0b0xlc3NUaGFuSGFsZlBpKEN0b3IsIHgpIHtcbiAgdmFyIHQsIGlzTmVnID0geC5zIDwgMCwgcGkgPSBnZXRQaShDdG9yLCBDdG9yLnByZWNpc2lvbiwgMSksIGhhbGZQaSA9IHBpLnRpbWVzKDAuNSk7XG4gIHggPSB4LmFicygpO1xuICBpZiAoeC5sdGUoaGFsZlBpKSkge1xuICAgIHF1YWRyYW50ID0gaXNOZWcgPyA0IDogMTtcbiAgICByZXR1cm4geDtcbiAgfVxuICB0ID0geC5kaXZUb0ludChwaSk7XG4gIGlmICh0LmlzWmVybygpKSB7XG4gICAgcXVhZHJhbnQgPSBpc05lZyA/IDMgOiAyO1xuICB9IGVsc2Uge1xuICAgIHggPSB4Lm1pbnVzKHQudGltZXMocGkpKTtcbiAgICBpZiAoeC5sdGUoaGFsZlBpKSkge1xuICAgICAgcXVhZHJhbnQgPSBpc09kZCh0KSA/IGlzTmVnID8gMiA6IDMgOiBpc05lZyA/IDQgOiAxO1xuICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICAgIHF1YWRyYW50ID0gaXNPZGQodCkgPyBpc05lZyA/IDEgOiA0IDogaXNOZWcgPyAzIDogMjtcbiAgfVxuICByZXR1cm4geC5taW51cyhwaSkuYWJzKCk7XG59XG5fX25hbWUodG9MZXNzVGhhbkhhbGZQaSwgXCJ0b0xlc3NUaGFuSGFsZlBpXCIpO1xuZnVuY3Rpb24gdG9TdHJpbmdCaW5hcnkoeCwgYmFzZU91dCwgc2QsIHJtKSB7XG4gIHZhciBiYXNlLCBlLCBpLCBrLCBsZW4sIHJvdW5kVXAsIHN0ciwgeGQsIHksIEN0b3IgPSB4LmNvbnN0cnVjdG9yLCBpc0V4cCA9IHNkICE9PSB2b2lkIDA7XG4gIGlmIChpc0V4cCkge1xuICAgIGNoZWNrSW50MzIoc2QsIDEsIE1BWF9ESUdJVFMpO1xuICAgIGlmIChybSA9PT0gdm9pZCAwKVxuICAgICAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICAgIGVsc2VcbiAgICAgIGNoZWNrSW50MzIocm0sIDAsIDgpO1xuICB9IGVsc2Uge1xuICAgIHNkID0gQ3Rvci5wcmVjaXNpb247XG4gICAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICB9XG4gIGlmICgheC5pc0Zpbml0ZSgpKSB7XG4gICAgc3RyID0gbm9uRmluaXRlVG9TdHJpbmcoeCk7XG4gIH0gZWxzZSB7XG4gICAgc3RyID0gZmluaXRlVG9TdHJpbmcoeCk7XG4gICAgaSA9IHN0ci5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaXNFeHApIHtcbiAgICAgIGJhc2UgPSAyO1xuICAgICAgaWYgKGJhc2VPdXQgPT0gMTYpIHtcbiAgICAgICAgc2QgPSBzZCAqIDQgLSAzO1xuICAgICAgfSBlbHNlIGlmIChiYXNlT3V0ID09IDgpIHtcbiAgICAgICAgc2QgPSBzZCAqIDMgLSAyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBiYXNlID0gYmFzZU91dDtcbiAgICB9XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgc3RyID0gc3RyLnJlcGxhY2UoXCIuXCIsIFwiXCIpO1xuICAgICAgeSA9IG5ldyBDdG9yKDEpO1xuICAgICAgeS5lID0gc3RyLmxlbmd0aCAtIGk7XG4gICAgICB5LmQgPSBjb252ZXJ0QmFzZShmaW5pdGVUb1N0cmluZyh5KSwgMTAsIGJhc2UpO1xuICAgICAgeS5lID0geS5kLmxlbmd0aDtcbiAgICB9XG4gICAgeGQgPSBjb252ZXJ0QmFzZShzdHIsIDEwLCBiYXNlKTtcbiAgICBlID0gbGVuID0geGQubGVuZ3RoO1xuICAgIGZvciAoOyB4ZFstLWxlbl0gPT0gMDsgKVxuICAgICAgeGQucG9wKCk7XG4gICAgaWYgKCF4ZFswXSkge1xuICAgICAgc3RyID0gaXNFeHAgPyBcIjBwKzBcIiA6IFwiMFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgZS0tO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeCA9IG5ldyBDdG9yKHgpO1xuICAgICAgICB4LmQgPSB4ZDtcbiAgICAgICAgeC5lID0gZTtcbiAgICAgICAgeCA9IGRpdmlkZSh4LCB5LCBzZCwgcm0sIDAsIGJhc2UpO1xuICAgICAgICB4ZCA9IHguZDtcbiAgICAgICAgZSA9IHguZTtcbiAgICAgICAgcm91bmRVcCA9IGluZXhhY3Q7XG4gICAgICB9XG4gICAgICBpID0geGRbc2RdO1xuICAgICAgayA9IGJhc2UgLyAyO1xuICAgICAgcm91bmRVcCA9IHJvdW5kVXAgfHwgeGRbc2QgKyAxXSAhPT0gdm9pZCAwO1xuICAgICAgcm91bmRVcCA9IHJtIDwgNCA/IChpICE9PSB2b2lkIDAgfHwgcm91bmRVcCkgJiYgKHJtID09PSAwIHx8IHJtID09PSAoeC5zIDwgMCA/IDMgOiAyKSkgOiBpID4gayB8fCBpID09PSBrICYmIChybSA9PT0gNCB8fCByb3VuZFVwIHx8IHJtID09PSA2ICYmIHhkW3NkIC0gMV0gJiAxIHx8IHJtID09PSAoeC5zIDwgMCA/IDggOiA3KSk7XG4gICAgICB4ZC5sZW5ndGggPSBzZDtcbiAgICAgIGlmIChyb3VuZFVwKSB7XG4gICAgICAgIGZvciAoOyArK3hkWy0tc2RdID4gYmFzZSAtIDE7ICkge1xuICAgICAgICAgIHhkW3NkXSA9IDA7XG4gICAgICAgICAgaWYgKCFzZCkge1xuICAgICAgICAgICAgKytlO1xuICAgICAgICAgICAgeGQudW5zaGlmdCgxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAobGVuID0geGQubGVuZ3RoOyAheGRbbGVuIC0gMV07IC0tbGVuKVxuICAgICAgICA7XG4gICAgICBmb3IgKGkgPSAwLCBzdHIgPSBcIlwiOyBpIDwgbGVuOyBpKyspXG4gICAgICAgIHN0ciArPSBOVU1FUkFMUy5jaGFyQXQoeGRbaV0pO1xuICAgICAgaWYgKGlzRXhwKSB7XG4gICAgICAgIGlmIChsZW4gPiAxKSB7XG4gICAgICAgICAgaWYgKGJhc2VPdXQgPT0gMTYgfHwgYmFzZU91dCA9PSA4KSB7XG4gICAgICAgICAgICBpID0gYmFzZU91dCA9PSAxNiA/IDQgOiAzO1xuICAgICAgICAgICAgZm9yICgtLWxlbjsgbGVuICUgaTsgbGVuKyspXG4gICAgICAgICAgICAgIHN0ciArPSBcIjBcIjtcbiAgICAgICAgICAgIHhkID0gY29udmVydEJhc2Uoc3RyLCBiYXNlLCBiYXNlT3V0KTtcbiAgICAgICAgICAgIGZvciAobGVuID0geGQubGVuZ3RoOyAheGRbbGVuIC0gMV07IC0tbGVuKVxuICAgICAgICAgICAgICA7XG4gICAgICAgICAgICBmb3IgKGkgPSAxLCBzdHIgPSBcIjEuXCI7IGkgPCBsZW47IGkrKylcbiAgICAgICAgICAgICAgc3RyICs9IE5VTUVSQUxTLmNoYXJBdCh4ZFtpXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0ciA9IHN0ci5jaGFyQXQoMCkgKyBcIi5cIiArIHN0ci5zbGljZSgxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RyID0gc3RyICsgKGUgPCAwID8gXCJwXCIgOiBcInArXCIpICsgZTtcbiAgICAgIH0gZWxzZSBpZiAoZSA8IDApIHtcbiAgICAgICAgZm9yICg7ICsrZTsgKVxuICAgICAgICAgIHN0ciA9IFwiMFwiICsgc3RyO1xuICAgICAgICBzdHIgPSBcIjAuXCIgKyBzdHI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoKytlID4gbGVuKVxuICAgICAgICAgIGZvciAoZSAtPSBsZW47IGUtLTsgKVxuICAgICAgICAgICAgc3RyICs9IFwiMFwiO1xuICAgICAgICBlbHNlIGlmIChlIDwgbGVuKVxuICAgICAgICAgIHN0ciA9IHN0ci5zbGljZSgwLCBlKSArIFwiLlwiICsgc3RyLnNsaWNlKGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdHIgPSAoYmFzZU91dCA9PSAxNiA/IFwiMHhcIiA6IGJhc2VPdXQgPT0gMiA/IFwiMGJcIiA6IGJhc2VPdXQgPT0gOCA/IFwiMG9cIiA6IFwiXCIpICsgc3RyO1xuICB9XG4gIHJldHVybiB4LnMgPCAwID8gXCItXCIgKyBzdHIgOiBzdHI7XG59XG5fX25hbWUodG9TdHJpbmdCaW5hcnksIFwidG9TdHJpbmdCaW5hcnlcIik7XG5mdW5jdGlvbiB0cnVuY2F0ZShhcnIsIGxlbikge1xuICBpZiAoYXJyLmxlbmd0aCA+IGxlbikge1xuICAgIGFyci5sZW5ndGggPSBsZW47XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbl9fbmFtZSh0cnVuY2F0ZSwgXCJ0cnVuY2F0ZVwiKTtcbmZ1bmN0aW9uIGFicyh4KSB7XG4gIHJldHVybiBuZXcgdGhpcyh4KS5hYnMoKTtcbn1cbl9fbmFtZShhYnMsIFwiYWJzXCIpO1xuZnVuY3Rpb24gYWNvcyh4KSB7XG4gIHJldHVybiBuZXcgdGhpcyh4KS5hY29zKCk7XG59XG5fX25hbWUoYWNvcywgXCJhY29zXCIpO1xuZnVuY3Rpb24gYWNvc2goeCkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkuYWNvc2goKTtcbn1cbl9fbmFtZShhY29zaCwgXCJhY29zaFwiKTtcbmZ1bmN0aW9uIGFkZCh4LCB5KSB7XG4gIHJldHVybiBuZXcgdGhpcyh4KS5wbHVzKHkpO1xufVxuX19uYW1lKGFkZCwgXCJhZGRcIik7XG5mdW5jdGlvbiBhc2luKHgpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLmFzaW4oKTtcbn1cbl9fbmFtZShhc2luLCBcImFzaW5cIik7XG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiBuZXcgdGhpcyh4KS5hc2luaCgpO1xufVxuX19uYW1lKGFzaW5oLCBcImFzaW5oXCIpO1xuZnVuY3Rpb24gYXRhbih4KSB7XG4gIHJldHVybiBuZXcgdGhpcyh4KS5hdGFuKCk7XG59XG5fX25hbWUoYXRhbiwgXCJhdGFuXCIpO1xuZnVuY3Rpb24gYXRhbmgoeCkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkuYXRhbmgoKTtcbn1cbl9fbmFtZShhdGFuaCwgXCJhdGFuaFwiKTtcbmZ1bmN0aW9uIGF0YW4yKHksIHgpIHtcbiAgeSA9IG5ldyB0aGlzKHkpO1xuICB4ID0gbmV3IHRoaXMoeCk7XG4gIHZhciByLCBwciA9IHRoaXMucHJlY2lzaW9uLCBybSA9IHRoaXMucm91bmRpbmcsIHdwciA9IHByICsgNDtcbiAgaWYgKCF5LnMgfHwgIXgucykge1xuICAgIHIgPSBuZXcgdGhpcyhOYU4pO1xuICB9IGVsc2UgaWYgKCF5LmQgJiYgIXguZCkge1xuICAgIHIgPSBnZXRQaSh0aGlzLCB3cHIsIDEpLnRpbWVzKHgucyA+IDAgPyAwLjI1IDogMC43NSk7XG4gICAgci5zID0geS5zO1xuICB9IGVsc2UgaWYgKCF4LmQgfHwgeS5pc1plcm8oKSkge1xuICAgIHIgPSB4LnMgPCAwID8gZ2V0UGkodGhpcywgcHIsIHJtKSA6IG5ldyB0aGlzKDApO1xuICAgIHIucyA9IHkucztcbiAgfSBlbHNlIGlmICgheS5kIHx8IHguaXNaZXJvKCkpIHtcbiAgICByID0gZ2V0UGkodGhpcywgd3ByLCAxKS50aW1lcygwLjUpO1xuICAgIHIucyA9IHkucztcbiAgfSBlbHNlIGlmICh4LnMgPCAwKSB7XG4gICAgdGhpcy5wcmVjaXNpb24gPSB3cHI7XG4gICAgdGhpcy5yb3VuZGluZyA9IDE7XG4gICAgciA9IHRoaXMuYXRhbihkaXZpZGUoeSwgeCwgd3ByLCAxKSk7XG4gICAgeCA9IGdldFBpKHRoaXMsIHdwciwgMSk7XG4gICAgdGhpcy5wcmVjaXNpb24gPSBwcjtcbiAgICB0aGlzLnJvdW5kaW5nID0gcm07XG4gICAgciA9IHkucyA8IDAgPyByLm1pbnVzKHgpIDogci5wbHVzKHgpO1xuICB9IGVsc2Uge1xuICAgIHIgPSB0aGlzLmF0YW4oZGl2aWRlKHksIHgsIHdwciwgMSkpO1xuICB9XG4gIHJldHVybiByO1xufVxuX19uYW1lKGF0YW4yLCBcImF0YW4yXCIpO1xuZnVuY3Rpb24gY2JydCh4KSB7XG4gIHJldHVybiBuZXcgdGhpcyh4KS5jYnJ0KCk7XG59XG5fX25hbWUoY2JydCwgXCJjYnJ0XCIpO1xuZnVuY3Rpb24gY2VpbCh4KSB7XG4gIHJldHVybiBmaW5hbGlzZSh4ID0gbmV3IHRoaXMoeCksIHguZSArIDEsIDIpO1xufVxuX19uYW1lKGNlaWwsIFwiY2VpbFwiKTtcbmZ1bmN0aW9uIGNsYW1wKHgsIG1pbjIsIG1heDIpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLmNsYW1wKG1pbjIsIG1heDIpO1xufVxuX19uYW1lKGNsYW1wLCBcImNsYW1wXCIpO1xuZnVuY3Rpb24gY29uZmlnKG9iaikge1xuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiKVxuICAgIHRocm93IEVycm9yKGRlY2ltYWxFcnJvciArIFwiT2JqZWN0IGV4cGVjdGVkXCIpO1xuICB2YXIgaSwgcCwgdiwgdXNlRGVmYXVsdHMgPSBvYmouZGVmYXVsdHMgPT09IHRydWUsIHBzID0gW1xuICAgIFwicHJlY2lzaW9uXCIsXG4gICAgMSxcbiAgICBNQVhfRElHSVRTLFxuICAgIFwicm91bmRpbmdcIixcbiAgICAwLFxuICAgIDgsXG4gICAgXCJ0b0V4cE5lZ1wiLFxuICAgIC1FWFBfTElNSVQsXG4gICAgMCxcbiAgICBcInRvRXhwUG9zXCIsXG4gICAgMCxcbiAgICBFWFBfTElNSVQsXG4gICAgXCJtYXhFXCIsXG4gICAgMCxcbiAgICBFWFBfTElNSVQsXG4gICAgXCJtaW5FXCIsXG4gICAgLUVYUF9MSU1JVCxcbiAgICAwLFxuICAgIFwibW9kdWxvXCIsXG4gICAgMCxcbiAgICA5XG4gIF07XG4gIGZvciAoaSA9IDA7IGkgPCBwcy5sZW5ndGg7IGkgKz0gMykge1xuICAgIGlmIChwID0gcHNbaV0sIHVzZURlZmF1bHRzKVxuICAgICAgdGhpc1twXSA9IERFRkFVTFRTW3BdO1xuICAgIGlmICgodiA9IG9ialtwXSkgIT09IHZvaWQgMCkge1xuICAgICAgaWYgKG1hdGhmbG9vcih2KSA9PT0gdiAmJiB2ID49IHBzW2kgKyAxXSAmJiB2IDw9IHBzW2kgKyAyXSlcbiAgICAgICAgdGhpc1twXSA9IHY7XG4gICAgICBlbHNlXG4gICAgICAgIHRocm93IEVycm9yKGludmFsaWRBcmd1bWVudCArIHAgKyBcIjogXCIgKyB2KTtcbiAgICB9XG4gIH1cbiAgaWYgKHAgPSBcImNyeXB0b1wiLCB1c2VEZWZhdWx0cylcbiAgICB0aGlzW3BdID0gREVGQVVMVFNbcF07XG4gIGlmICgodiA9IG9ialtwXSkgIT09IHZvaWQgMCkge1xuICAgIGlmICh2ID09PSB0cnVlIHx8IHYgPT09IGZhbHNlIHx8IHYgPT09IDAgfHwgdiA9PT0gMSkge1xuICAgICAgaWYgKHYpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjcnlwdG8gIT0gXCJ1bmRlZmluZWRcIiAmJiBjcnlwdG8gJiYgKGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgfHwgY3J5cHRvLnJhbmRvbUJ5dGVzKSkge1xuICAgICAgICAgIHRoaXNbcF0gPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IEVycm9yKGNyeXB0b1VuYXZhaWxhYmxlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1twXSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcihpbnZhbGlkQXJndW1lbnQgKyBwICsgXCI6IFwiICsgdik7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuX19uYW1lKGNvbmZpZywgXCJjb25maWdcIik7XG5mdW5jdGlvbiBjb3MoeCkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkuY29zKCk7XG59XG5fX25hbWUoY29zLCBcImNvc1wiKTtcbmZ1bmN0aW9uIGNvc2goeCkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkuY29zaCgpO1xufVxuX19uYW1lKGNvc2gsIFwiY29zaFwiKTtcbmZ1bmN0aW9uIGNsb25lKG9iaikge1xuICB2YXIgaSwgcCwgcHM7XG4gIGZ1bmN0aW9uIERlY2ltYWwyKHYpIHtcbiAgICB2YXIgZSwgaTIsIHQsIHggPSB0aGlzO1xuICAgIGlmICghKHggaW5zdGFuY2VvZiBEZWNpbWFsMikpXG4gICAgICByZXR1cm4gbmV3IERlY2ltYWwyKHYpO1xuICAgIHguY29uc3RydWN0b3IgPSBEZWNpbWFsMjtcbiAgICBpZiAoaXNEZWNpbWFsSW5zdGFuY2UodikpIHtcbiAgICAgIHgucyA9IHYucztcbiAgICAgIGlmIChleHRlcm5hbCkge1xuICAgICAgICBpZiAoIXYuZCB8fCB2LmUgPiBEZWNpbWFsMi5tYXhFKSB7XG4gICAgICAgICAgeC5lID0gTmFOO1xuICAgICAgICAgIHguZCA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAodi5lIDwgRGVjaW1hbDIubWluRSkge1xuICAgICAgICAgIHguZSA9IDA7XG4gICAgICAgICAgeC5kID0gWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHguZSA9IHYuZTtcbiAgICAgICAgICB4LmQgPSB2LmQuc2xpY2UoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeC5lID0gdi5lO1xuICAgICAgICB4LmQgPSB2LmQgPyB2LmQuc2xpY2UoKSA6IHYuZDtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdCA9IHR5cGVvZiB2O1xuICAgIGlmICh0ID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpZiAodiA9PT0gMCkge1xuICAgICAgICB4LnMgPSAxIC8gdiA8IDAgPyAtMSA6IDE7XG4gICAgICAgIHguZSA9IDA7XG4gICAgICAgIHguZCA9IFswXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHYgPCAwKSB7XG4gICAgICAgIHYgPSAtdjtcbiAgICAgICAgeC5zID0gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4LnMgPSAxO1xuICAgICAgfVxuICAgICAgaWYgKHYgPT09IH5+diAmJiB2IDwgMWU3KSB7XG4gICAgICAgIGZvciAoZSA9IDAsIGkyID0gdjsgaTIgPj0gMTA7IGkyIC89IDEwKVxuICAgICAgICAgIGUrKztcbiAgICAgICAgaWYgKGV4dGVybmFsKSB7XG4gICAgICAgICAgaWYgKGUgPiBEZWNpbWFsMi5tYXhFKSB7XG4gICAgICAgICAgICB4LmUgPSBOYU47XG4gICAgICAgICAgICB4LmQgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZSA8IERlY2ltYWwyLm1pbkUpIHtcbiAgICAgICAgICAgIHguZSA9IDA7XG4gICAgICAgICAgICB4LmQgPSBbMF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHguZSA9IGU7XG4gICAgICAgICAgICB4LmQgPSBbdl07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHguZSA9IGU7XG4gICAgICAgICAgeC5kID0gW3ZdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAodiAqIDAgIT09IDApIHtcbiAgICAgICAgaWYgKCF2KVxuICAgICAgICAgIHgucyA9IE5hTjtcbiAgICAgICAgeC5lID0gTmFOO1xuICAgICAgICB4LmQgPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyc2VEZWNpbWFsKHgsIHYudG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIGlmICh0ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBFcnJvcihpbnZhbGlkQXJndW1lbnQgKyB2KTtcbiAgICB9XG4gICAgaWYgKChpMiA9IHYuY2hhckNvZGVBdCgwKSkgPT09IDQ1KSB7XG4gICAgICB2ID0gdi5zbGljZSgxKTtcbiAgICAgIHgucyA9IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaTIgPT09IDQzKVxuICAgICAgICB2ID0gdi5zbGljZSgxKTtcbiAgICAgIHgucyA9IDE7XG4gICAgfVxuICAgIHJldHVybiBpc0RlY2ltYWwudGVzdCh2KSA/IHBhcnNlRGVjaW1hbCh4LCB2KSA6IHBhcnNlT3RoZXIoeCwgdik7XG4gIH1cbiAgX19uYW1lKERlY2ltYWwyLCBcIkRlY2ltYWxcIik7XG4gIERlY2ltYWwyLnByb3RvdHlwZSA9IFA7XG4gIERlY2ltYWwyLlJPVU5EX1VQID0gMDtcbiAgRGVjaW1hbDIuUk9VTkRfRE9XTiA9IDE7XG4gIERlY2ltYWwyLlJPVU5EX0NFSUwgPSAyO1xuICBEZWNpbWFsMi5ST1VORF9GTE9PUiA9IDM7XG4gIERlY2ltYWwyLlJPVU5EX0hBTEZfVVAgPSA0O1xuICBEZWNpbWFsMi5ST1VORF9IQUxGX0RPV04gPSA1O1xuICBEZWNpbWFsMi5ST1VORF9IQUxGX0VWRU4gPSA2O1xuICBEZWNpbWFsMi5ST1VORF9IQUxGX0NFSUwgPSA3O1xuICBEZWNpbWFsMi5ST1VORF9IQUxGX0ZMT09SID0gODtcbiAgRGVjaW1hbDIuRVVDTElEID0gOTtcbiAgRGVjaW1hbDIuY29uZmlnID0gRGVjaW1hbDIuc2V0ID0gY29uZmlnO1xuICBEZWNpbWFsMi5jbG9uZSA9IGNsb25lO1xuICBEZWNpbWFsMi5pc0RlY2ltYWwgPSBpc0RlY2ltYWxJbnN0YW5jZTtcbiAgRGVjaW1hbDIuYWJzID0gYWJzO1xuICBEZWNpbWFsMi5hY29zID0gYWNvcztcbiAgRGVjaW1hbDIuYWNvc2ggPSBhY29zaDtcbiAgRGVjaW1hbDIuYWRkID0gYWRkO1xuICBEZWNpbWFsMi5hc2luID0gYXNpbjtcbiAgRGVjaW1hbDIuYXNpbmggPSBhc2luaDtcbiAgRGVjaW1hbDIuYXRhbiA9IGF0YW47XG4gIERlY2ltYWwyLmF0YW5oID0gYXRhbmg7XG4gIERlY2ltYWwyLmF0YW4yID0gYXRhbjI7XG4gIERlY2ltYWwyLmNicnQgPSBjYnJ0O1xuICBEZWNpbWFsMi5jZWlsID0gY2VpbDtcbiAgRGVjaW1hbDIuY2xhbXAgPSBjbGFtcDtcbiAgRGVjaW1hbDIuY29zID0gY29zO1xuICBEZWNpbWFsMi5jb3NoID0gY29zaDtcbiAgRGVjaW1hbDIuZGl2ID0gZGl2O1xuICBEZWNpbWFsMi5leHAgPSBleHA7XG4gIERlY2ltYWwyLmZsb29yID0gZmxvb3I7XG4gIERlY2ltYWwyLmh5cG90ID0gaHlwb3Q7XG4gIERlY2ltYWwyLmxuID0gbG47XG4gIERlY2ltYWwyLmxvZyA9IGxvZztcbiAgRGVjaW1hbDIubG9nMTAgPSBsb2cxMDtcbiAgRGVjaW1hbDIubG9nMiA9IGxvZzI7XG4gIERlY2ltYWwyLm1heCA9IG1heDtcbiAgRGVjaW1hbDIubWluID0gbWluO1xuICBEZWNpbWFsMi5tb2QgPSBtb2Q7XG4gIERlY2ltYWwyLm11bCA9IG11bDtcbiAgRGVjaW1hbDIucG93ID0gcG93O1xuICBEZWNpbWFsMi5yYW5kb20gPSByYW5kb207XG4gIERlY2ltYWwyLnJvdW5kID0gcm91bmQ7XG4gIERlY2ltYWwyLnNpZ24gPSBzaWduO1xuICBEZWNpbWFsMi5zaW4gPSBzaW47XG4gIERlY2ltYWwyLnNpbmggPSBzaW5oO1xuICBEZWNpbWFsMi5zcXJ0ID0gc3FydDtcbiAgRGVjaW1hbDIuc3ViID0gc3ViO1xuICBEZWNpbWFsMi5zdW0gPSBzdW07XG4gIERlY2ltYWwyLnRhbiA9IHRhbjtcbiAgRGVjaW1hbDIudGFuaCA9IHRhbmg7XG4gIERlY2ltYWwyLnRydW5jID0gdHJ1bmM7XG4gIGlmIChvYmogPT09IHZvaWQgMClcbiAgICBvYmogPSB7fTtcbiAgaWYgKG9iaikge1xuICAgIGlmIChvYmouZGVmYXVsdHMgIT09IHRydWUpIHtcbiAgICAgIHBzID0gW1wicHJlY2lzaW9uXCIsIFwicm91bmRpbmdcIiwgXCJ0b0V4cE5lZ1wiLCBcInRvRXhwUG9zXCIsIFwibWF4RVwiLCBcIm1pbkVcIiwgXCJtb2R1bG9cIiwgXCJjcnlwdG9cIl07XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcHMubGVuZ3RoOyApXG4gICAgICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KHAgPSBwc1tpKytdKSlcbiAgICAgICAgICBvYmpbcF0gPSB0aGlzW3BdO1xuICAgIH1cbiAgfVxuICBEZWNpbWFsMi5jb25maWcob2JqKTtcbiAgcmV0dXJuIERlY2ltYWwyO1xufVxuX19uYW1lKGNsb25lLCBcImNsb25lXCIpO1xuZnVuY3Rpb24gZGl2KHgsIHkpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLmRpdih5KTtcbn1cbl9fbmFtZShkaXYsIFwiZGl2XCIpO1xuZnVuY3Rpb24gZXhwKHgpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLmV4cCgpO1xufVxuX19uYW1lKGV4cCwgXCJleHBcIik7XG5mdW5jdGlvbiBmbG9vcih4KSB7XG4gIHJldHVybiBmaW5hbGlzZSh4ID0gbmV3IHRoaXMoeCksIHguZSArIDEsIDMpO1xufVxuX19uYW1lKGZsb29yLCBcImZsb29yXCIpO1xuZnVuY3Rpb24gaHlwb3QoKSB7XG4gIHZhciBpLCBuLCB0ID0gbmV3IHRoaXMoMCk7XG4gIGV4dGVybmFsID0gZmFsc2U7XG4gIGZvciAoaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyApIHtcbiAgICBuID0gbmV3IHRoaXMoYXJndW1lbnRzW2krK10pO1xuICAgIGlmICghbi5kKSB7XG4gICAgICBpZiAobi5zKSB7XG4gICAgICAgIGV4dGVybmFsID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKDEgLyAwKTtcbiAgICAgIH1cbiAgICAgIHQgPSBuO1xuICAgIH0gZWxzZSBpZiAodC5kKSB7XG4gICAgICB0ID0gdC5wbHVzKG4udGltZXMobikpO1xuICAgIH1cbiAgfVxuICBleHRlcm5hbCA9IHRydWU7XG4gIHJldHVybiB0LnNxcnQoKTtcbn1cbl9fbmFtZShoeXBvdCwgXCJoeXBvdFwiKTtcbmZ1bmN0aW9uIGlzRGVjaW1hbEluc3RhbmNlKG9iaikge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRGVjaW1hbCB8fCBvYmogJiYgb2JqLnRvU3RyaW5nVGFnID09PSB0YWcgfHwgZmFsc2U7XG59XG5fX25hbWUoaXNEZWNpbWFsSW5zdGFuY2UsIFwiaXNEZWNpbWFsSW5zdGFuY2VcIik7XG5mdW5jdGlvbiBsbih4KSB7XG4gIHJldHVybiBuZXcgdGhpcyh4KS5sbigpO1xufVxuX19uYW1lKGxuLCBcImxuXCIpO1xuZnVuY3Rpb24gbG9nKHgsIHkpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLmxvZyh5KTtcbn1cbl9fbmFtZShsb2csIFwibG9nXCIpO1xuZnVuY3Rpb24gbG9nMih4KSB7XG4gIHJldHVybiBuZXcgdGhpcyh4KS5sb2coMik7XG59XG5fX25hbWUobG9nMiwgXCJsb2cyXCIpO1xuZnVuY3Rpb24gbG9nMTAoeCkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkubG9nKDEwKTtcbn1cbl9fbmFtZShsb2cxMCwgXCJsb2cxMFwiKTtcbmZ1bmN0aW9uIG1heCgpIHtcbiAgcmV0dXJuIG1heE9yTWluKHRoaXMsIGFyZ3VtZW50cywgXCJsdFwiKTtcbn1cbl9fbmFtZShtYXgsIFwibWF4XCIpO1xuZnVuY3Rpb24gbWluKCkge1xuICByZXR1cm4gbWF4T3JNaW4odGhpcywgYXJndW1lbnRzLCBcImd0XCIpO1xufVxuX19uYW1lKG1pbiwgXCJtaW5cIik7XG5mdW5jdGlvbiBtb2QoeCwgeSkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkubW9kKHkpO1xufVxuX19uYW1lKG1vZCwgXCJtb2RcIik7XG5mdW5jdGlvbiBtdWwoeCwgeSkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkubXVsKHkpO1xufVxuX19uYW1lKG11bCwgXCJtdWxcIik7XG5mdW5jdGlvbiBwb3coeCwgeSkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkucG93KHkpO1xufVxuX19uYW1lKHBvdywgXCJwb3dcIik7XG5mdW5jdGlvbiByYW5kb20oc2QpIHtcbiAgdmFyIGQsIGUsIGssIG4sIGkgPSAwLCByID0gbmV3IHRoaXMoMSksIHJkID0gW107XG4gIGlmIChzZCA9PT0gdm9pZCAwKVxuICAgIHNkID0gdGhpcy5wcmVjaXNpb247XG4gIGVsc2VcbiAgICBjaGVja0ludDMyKHNkLCAxLCBNQVhfRElHSVRTKTtcbiAgayA9IE1hdGguY2VpbChzZCAvIExPR19CQVNFKTtcbiAgaWYgKCF0aGlzLmNyeXB0bykge1xuICAgIGZvciAoOyBpIDwgazsgKVxuICAgICAgcmRbaSsrXSA9IE1hdGgucmFuZG9tKCkgKiAxZTcgfCAwO1xuICB9IGVsc2UgaWYgKGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICBkID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoaykpO1xuICAgIGZvciAoOyBpIDwgazsgKSB7XG4gICAgICBuID0gZFtpXTtcbiAgICAgIGlmIChuID49IDQyOWU3KSB7XG4gICAgICAgIGRbaV0gPSBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheSgxKSlbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZFtpKytdID0gbiAlIDFlNztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoY3J5cHRvLnJhbmRvbUJ5dGVzKSB7XG4gICAgZCA9IGNyeXB0by5yYW5kb21CeXRlcyhrICo9IDQpO1xuICAgIGZvciAoOyBpIDwgazsgKSB7XG4gICAgICBuID0gZFtpXSArIChkW2kgKyAxXSA8PCA4KSArIChkW2kgKyAyXSA8PCAxNikgKyAoKGRbaSArIDNdICYgMTI3KSA8PCAyNCk7XG4gICAgICBpZiAobiA+PSAyMTRlNykge1xuICAgICAgICBjcnlwdG8ucmFuZG9tQnl0ZXMoNCkuY29weShkLCBpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJkLnB1c2gobiAlIDFlNyk7XG4gICAgICAgIGkgKz0gNDtcbiAgICAgIH1cbiAgICB9XG4gICAgaSA9IGsgLyA0O1xuICB9IGVsc2Uge1xuICAgIHRocm93IEVycm9yKGNyeXB0b1VuYXZhaWxhYmxlKTtcbiAgfVxuICBrID0gcmRbLS1pXTtcbiAgc2QgJT0gTE9HX0JBU0U7XG4gIGlmIChrICYmIHNkKSB7XG4gICAgbiA9IG1hdGhwb3coMTAsIExPR19CQVNFIC0gc2QpO1xuICAgIHJkW2ldID0gKGsgLyBuIHwgMCkgKiBuO1xuICB9XG4gIGZvciAoOyByZFtpXSA9PT0gMDsgaS0tKVxuICAgIHJkLnBvcCgpO1xuICBpZiAoaSA8IDApIHtcbiAgICBlID0gMDtcbiAgICByZCA9IFswXTtcbiAgfSBlbHNlIHtcbiAgICBlID0gLTE7XG4gICAgZm9yICg7IHJkWzBdID09PSAwOyBlIC09IExPR19CQVNFKVxuICAgICAgcmQuc2hpZnQoKTtcbiAgICBmb3IgKGsgPSAxLCBuID0gcmRbMF07IG4gPj0gMTA7IG4gLz0gMTApXG4gICAgICBrKys7XG4gICAgaWYgKGsgPCBMT0dfQkFTRSlcbiAgICAgIGUgLT0gTE9HX0JBU0UgLSBrO1xuICB9XG4gIHIuZSA9IGU7XG4gIHIuZCA9IHJkO1xuICByZXR1cm4gcjtcbn1cbl9fbmFtZShyYW5kb20sIFwicmFuZG9tXCIpO1xuZnVuY3Rpb24gcm91bmQoeCkge1xuICByZXR1cm4gZmluYWxpc2UoeCA9IG5ldyB0aGlzKHgpLCB4LmUgKyAxLCB0aGlzLnJvdW5kaW5nKTtcbn1cbl9fbmFtZShyb3VuZCwgXCJyb3VuZFwiKTtcbmZ1bmN0aW9uIHNpZ24oeCkge1xuICB4ID0gbmV3IHRoaXMoeCk7XG4gIHJldHVybiB4LmQgPyB4LmRbMF0gPyB4LnMgOiAwICogeC5zIDogeC5zIHx8IE5hTjtcbn1cbl9fbmFtZShzaWduLCBcInNpZ25cIik7XG5mdW5jdGlvbiBzaW4oeCkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkuc2luKCk7XG59XG5fX25hbWUoc2luLCBcInNpblwiKTtcbmZ1bmN0aW9uIHNpbmgoeCkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkuc2luaCgpO1xufVxuX19uYW1lKHNpbmgsIFwic2luaFwiKTtcbmZ1bmN0aW9uIHNxcnQoeCkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkuc3FydCgpO1xufVxuX19uYW1lKHNxcnQsIFwic3FydFwiKTtcbmZ1bmN0aW9uIHN1Yih4LCB5KSB7XG4gIHJldHVybiBuZXcgdGhpcyh4KS5zdWIoeSk7XG59XG5fX25hbWUoc3ViLCBcInN1YlwiKTtcbmZ1bmN0aW9uIHN1bSgpIHtcbiAgdmFyIGkgPSAwLCBhcmdzID0gYXJndW1lbnRzLCB4ID0gbmV3IHRoaXMoYXJnc1tpXSk7XG4gIGV4dGVybmFsID0gZmFsc2U7XG4gIGZvciAoOyB4LnMgJiYgKytpIDwgYXJncy5sZW5ndGg7IClcbiAgICB4ID0geC5wbHVzKGFyZ3NbaV0pO1xuICBleHRlcm5hbCA9IHRydWU7XG4gIHJldHVybiBmaW5hbGlzZSh4LCB0aGlzLnByZWNpc2lvbiwgdGhpcy5yb3VuZGluZyk7XG59XG5fX25hbWUoc3VtLCBcInN1bVwiKTtcbmZ1bmN0aW9uIHRhbih4KSB7XG4gIHJldHVybiBuZXcgdGhpcyh4KS50YW4oKTtcbn1cbl9fbmFtZSh0YW4sIFwidGFuXCIpO1xuZnVuY3Rpb24gdGFuaCh4KSB7XG4gIHJldHVybiBuZXcgdGhpcyh4KS50YW5oKCk7XG59XG5fX25hbWUodGFuaCwgXCJ0YW5oXCIpO1xuZnVuY3Rpb24gdHJ1bmMoeCkge1xuICByZXR1cm4gZmluYWxpc2UoeCA9IG5ldyB0aGlzKHgpLCB4LmUgKyAxLCAxKTtcbn1cbl9fbmFtZSh0cnVuYywgXCJ0cnVuY1wiKTtcblBbU3ltYm9sLmZvcihcIm5vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tXCIpXSA9IFAudG9TdHJpbmc7XG5QW1N5bWJvbC50b1N0cmluZ1RhZ10gPSBcIkRlY2ltYWxcIjtcbnZhciBEZWNpbWFsID0gUC5jb25zdHJ1Y3RvciA9IGNsb25lKERFRkFVTFRTKTtcbkxOMTAgPSBuZXcgRGVjaW1hbChMTjEwKTtcblBJID0gbmV3IERlY2ltYWwoUEkpO1xudmFyIGRlY2ltYWxfZGVmYXVsdCA9IERlY2ltYWw7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgRGVjaW1hbCxcbiAgbWFrZVN0cmljdEVudW0sXG4gIG9iamVjdEVudW1WYWx1ZXNcbn0pO1xuLyohXG4gKiAgZGVjaW1hbC5qcyB2MTAuNC4wXG4gKiAgQW4gYXJiaXRyYXJ5LXByZWNpc2lvbiBEZWNpbWFsIHR5cGUgZm9yIEphdmFTY3JpcHQuXG4gKiAgaHR0cHM6Ly9naXRodWIuY29tL01pa2VNY2wvZGVjaW1hbC5qc1xuICogIENvcHlyaWdodCAoYykgMjAyMiBNaWNoYWVsIE1jbGF1Z2hsaW4gPE04Y2g4OGxAZ21haWwuY29tPlxuICogIE1JVCBMaWNlbmNlXG4gKi9cbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fbmFtZSIsInRhcmdldCIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwiX19leHBvcnQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJfX3RvQ29tbW9uSlMiLCJtb2QyIiwiaW5kZXhfYnJvd3Nlcl9leHBvcnRzIiwiRGVjaW1hbCIsImRlY2ltYWxfZGVmYXVsdCIsIm1ha2VTdHJpY3RFbnVtIiwib2JqZWN0RW51bVZhbHVlcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZWNyZXQiLCJTeW1ib2wiLCJyZXByZXNlbnRhdGlvbnMiLCJXZWFrTWFwIiwiT2JqZWN0RW51bVZhbHVlIiwiYXJnIiwic2V0IiwiX2dldE5hbWUiLCJfZ2V0TmFtZXNwYWNlIiwiY29uc3RydWN0b3IiLCJ0b1N0cmluZyIsIk51bGxUeXBlc0VudW1WYWx1ZSIsIkRiTnVsbCIsIkpzb25OdWxsIiwiQW55TnVsbCIsImNsYXNzZXMiLCJpbnN0YW5jZXMiLCJhbGxvd0xpc3QiLCJTZXQiLCJpdGVyYXRvciIsInRvU3RyaW5nVGFnIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwidG9QcmltaXRpdmUiLCJkZWZpbml0aW9uIiwiUHJveHkiLCJwcm9wZXJ0eSIsImhhcyIsIlR5cGVFcnJvciIsIlN0cmluZyIsIkVYUF9MSU1JVCIsIk1BWF9ESUdJVFMiLCJOVU1FUkFMUyIsIkxOMTAiLCJQSSIsIkRFRkFVTFRTIiwicHJlY2lzaW9uIiwicm91bmRpbmciLCJtb2R1bG8iLCJ0b0V4cE5lZyIsInRvRXhwUG9zIiwibWluRSIsIm1heEUiLCJjcnlwdG8iLCJpbmV4YWN0IiwicXVhZHJhbnQiLCJleHRlcm5hbCIsImRlY2ltYWxFcnJvciIsImludmFsaWRBcmd1bWVudCIsInByZWNpc2lvbkxpbWl0RXhjZWVkZWQiLCJjcnlwdG9VbmF2YWlsYWJsZSIsInRhZyIsIm1hdGhmbG9vciIsIk1hdGgiLCJmbG9vciIsIm1hdGhwb3ciLCJwb3ciLCJpc0JpbmFyeSIsImlzSGV4IiwiaXNPY3RhbCIsImlzRGVjaW1hbCIsIkJBU0UiLCJMT0dfQkFTRSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJMTjEwX1BSRUNJU0lPTiIsImxlbmd0aCIsIlBJX1BSRUNJU0lPTiIsIlAiLCJhYnNvbHV0ZVZhbHVlIiwiYWJzIiwieCIsInMiLCJmaW5hbGlzZSIsImNlaWwiLCJlIiwiY2xhbXBlZFRvIiwiY2xhbXAiLCJtaW4yIiwibWF4MiIsImsiLCJDdG9yIiwiTmFOIiwiZ3QiLCJFcnJvciIsImNtcCIsImNvbXBhcmVkVG8iLCJ5IiwiaSIsImoiLCJ4ZEwiLCJ5ZEwiLCJ4ZCIsImQiLCJ5ZCIsInhzIiwieXMiLCJjb3NpbmUiLCJjb3MiLCJwciIsInJtIiwibWF4Iiwic2QiLCJ0b0xlc3NUaGFuSGFsZlBpIiwibmVnIiwiY3ViZVJvb3QiLCJjYnJ0IiwibSIsIm4iLCJyIiwicmVwIiwidCIsInQzIiwidDNwbHVzeCIsImlzRmluaXRlIiwiaXNaZXJvIiwiZGlnaXRzVG9TdHJpbmciLCJ0b0V4cG9uZW50aWFsIiwic2xpY2UiLCJpbmRleE9mIiwidGltZXMiLCJwbHVzIiwiZGl2aWRlIiwiZXEiLCJjaGFyQXQiLCJkZWNpbWFsUGxhY2VzIiwiZHAiLCJ3IiwiZGl2aWRlZEJ5IiwiZGl2IiwiZGl2aWRlZFRvSW50ZWdlckJ5IiwiZGl2VG9JbnQiLCJlcXVhbHMiLCJncmVhdGVyVGhhbiIsImdyZWF0ZXJUaGFuT3JFcXVhbFRvIiwiZ3RlIiwiaHlwZXJib2xpY0Nvc2luZSIsImNvc2giLCJsZW4iLCJvbmUiLCJ0aW55UG93IiwidGF5bG9yU2VyaWVzIiwiY29zaDJfeCIsImQ4IiwibWludXMiLCJoeXBlcmJvbGljU2luZSIsInNpbmgiLCJzcXJ0Iiwic2luaDJfeCIsImQ1IiwiZDE2IiwiZDIwIiwiaHlwZXJib2xpY1RhbmdlbnQiLCJ0YW5oIiwiaW52ZXJzZUNvc2luZSIsImFjb3MiLCJoYWxmUGkiLCJpc05lZyIsImdldFBpIiwiYXNpbiIsImludmVyc2VIeXBlcmJvbGljQ29zaW5lIiwiYWNvc2giLCJsdGUiLCJsbiIsImludmVyc2VIeXBlcmJvbGljU2luZSIsImFzaW5oIiwiaW52ZXJzZUh5cGVyYm9saWNUYW5nZW50IiwiYXRhbmgiLCJ3cHIiLCJ4c2QiLCJpbnZlcnNlU2luZSIsImF0YW4iLCJpbnZlcnNlVGFuZ2VudCIsInB4IiwieDIiLCJtaW4iLCJpc0ludGVnZXIiLCJpc0ludCIsImlzTmFOIiwiaXNOZWdhdGl2ZSIsImlzUG9zaXRpdmUiLCJpc1BvcyIsImxlc3NUaGFuIiwibHQiLCJsZXNzVGhhbk9yRXF1YWxUbyIsImxvZ2FyaXRobSIsImxvZyIsImJhc2UiLCJpc0Jhc2UxMCIsImRlbm9taW5hdG9yIiwiaW5mIiwibnVtIiwiZ3VhcmQiLCJuYXR1cmFsTG9nYXJpdGhtIiwiZ2V0TG4xMCIsImNoZWNrUm91bmRpbmdEaWdpdHMiLCJzdWIiLCJ4ZSIsInhMVHkiLCJyZXZlcnNlIiwicHVzaCIsInBvcCIsInNoaWZ0IiwiZ2V0QmFzZTEwRXhwb25lbnQiLCJtb2QiLCJxIiwibmF0dXJhbEV4cG9uZW50aWFsIiwiZXhwIiwibmVnYXRlZCIsImFkZCIsImNhcnJ5IiwidW5zaGlmdCIsInoiLCJnZXRQcmVjaXNpb24iLCJyb3VuZCIsInNpbmUiLCJzaW4iLCJzcXVhcmVSb290IiwidGFuZ2VudCIsInRhbiIsIm11bCIsInJMIiwidG9CaW5hcnkiLCJ0b1N0cmluZ0JpbmFyeSIsInRvRGVjaW1hbFBsYWNlcyIsInRvRFAiLCJjaGVja0ludDMyIiwic3RyIiwiZmluaXRlVG9TdHJpbmciLCJ0b0ZpeGVkIiwidG9GcmFjdGlvbiIsIm1heEQiLCJkMCIsImQxIiwiZDIiLCJuMCIsIm4xIiwidG9IZXhhZGVjaW1hbCIsInRvSGV4IiwidG9OZWFyZXN0IiwidG9OdW1iZXIiLCJ0b09jdGFsIiwidG9Qb3dlciIsInluIiwiaW50UG93IiwidG9QcmVjaXNpb24iLCJ0b1NpZ25pZmljYW50RGlnaXRzIiwidG9TRCIsInRydW5jYXRlZCIsInRydW5jIiwidmFsdWVPZiIsInRvSlNPTiIsIndzIiwiaW5kZXhPZkxhc3RXb3JkIiwiZ2V0WmVyb1N0cmluZyIsInJlcGVhdGluZyIsImRpIiwicmQiLCJjb252ZXJ0QmFzZSIsImJhc2VJbiIsImJhc2VPdXQiLCJhcnIiLCJhcnJMIiwic3RyTCIsImNvczJ4IiwibXVsdGlwbHlJbnRlZ2VyIiwidGVtcCIsImNvbXBhcmUiLCJhIiwiYiIsImFMIiwiYkwiLCJzdWJ0cmFjdCIsImxvZ0Jhc2UiLCJtb3JlIiwicHJvZCIsInByb2RMIiwicWQiLCJyZW0iLCJyZW1MIiwicmVtMCIsInhpIiwieEwiLCJ5ZDAiLCJ5TCIsInl6Iiwic2lnbjIiLCJpc1RydW5jYXRlZCIsImRpZ2l0cyIsInJvdW5kVXAiLCJ4ZGkiLCJvdXQiLCJpc0V4cCIsIm5vbkZpbml0ZVRvU3RyaW5nIiwienMiLCJ0cnVuY2F0ZSIsImlzT2RkIiwibWF4T3JNaW4iLCJhcmdzIiwibHRndCIsInBvdzIiLCJzdW0yIiwiYyIsImMwIiwibnVtZXJhdG9yIiwieDEiLCJwYXJzZURlY2ltYWwiLCJyZXBsYWNlIiwic2VhcmNoIiwic3Vic3RyaW5nIiwiY2hhckNvZGVBdCIsInBhcnNlT3RoZXIiLCJkaXZpc29yIiwiaXNGbG9hdCIsInAiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJzaW4yX3giLCJpc0h5cGVyYm9saWMiLCJ1IiwicGkiLCJhdGFuMiIsImNvbmZpZyIsIm9iaiIsInYiLCJ1c2VEZWZhdWx0cyIsImRlZmF1bHRzIiwicHMiLCJnZXRSYW5kb21WYWx1ZXMiLCJyYW5kb21CeXRlcyIsImNsb25lIiwiRGVjaW1hbDIiLCJpMiIsImlzRGVjaW1hbEluc3RhbmNlIiwiUk9VTkRfVVAiLCJST1VORF9ET1dOIiwiUk9VTkRfQ0VJTCIsIlJPVU5EX0ZMT09SIiwiUk9VTkRfSEFMRl9VUCIsIlJPVU5EX0hBTEZfRE9XTiIsIlJPVU5EX0hBTEZfRVZFTiIsIlJPVU5EX0hBTEZfQ0VJTCIsIlJPVU5EX0hBTEZfRkxPT1IiLCJFVUNMSUQiLCJoeXBvdCIsImxvZzEwIiwibG9nMiIsInJhbmRvbSIsInNpZ24iLCJzdW0iLCJhcmd1bWVudHMiLCJVaW50MzJBcnJheSIsImNvcHkiLCJmb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./prisma/generated/client2/runtime/index-browser.js\n"));

/***/ }),

/***/ "../node_modules/@swc/helpers/src/_class_call_check.mjs":
/*!**************************************************************!*\
  !*** ../node_modules/@swc/helpers/src/_class_call_check.mjs ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _classCallCheck; }\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9zcmMvX2NsYXNzX2NhbGxfY2hlY2subWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3JkZXJzLy4uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvc3JjL19jbGFzc19jYWxsX2NoZWNrLm1qcz83NzdjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@swc/helpers/src/_class_call_check.mjs\n"));

/***/ })

}]);